
build/storm32.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000249 	.word	0x08000249
 8000008:	0800024b 	.word	0x0800024b
 800000c:	0800024b 	.word	0x0800024b
 8000010:	0800024b 	.word	0x0800024b
 8000014:	0800024b 	.word	0x0800024b
 8000018:	0800024b 	.word	0x0800024b
 800001c:	0800024b 	.word	0x0800024b
 8000020:	0800024b 	.word	0x0800024b
 8000024:	0800024b 	.word	0x0800024b
 8000028:	0800024b 	.word	0x0800024b
 800002c:	08009011 	.word	0x08009011
 8000030:	0800024b 	.word	0x0800024b
 8000034:	0800024b 	.word	0x0800024b
 8000038:	0800024b 	.word	0x0800024b
 800003c:	08005ff1 	.word	0x08005ff1
 8000040:	0800024b 	.word	0x0800024b
 8000044:	0800024b 	.word	0x0800024b
 8000048:	0800024b 	.word	0x0800024b
 800004c:	0800024b 	.word	0x0800024b
 8000050:	0800024b 	.word	0x0800024b
 8000054:	0800024b 	.word	0x0800024b
 8000058:	0800024b 	.word	0x0800024b
 800005c:	0800024b 	.word	0x0800024b
 8000060:	0800024b 	.word	0x0800024b
 8000064:	0800024b 	.word	0x0800024b
 8000068:	0800024b 	.word	0x0800024b
 800006c:	08004c91 	.word	0x08004c91
 8000070:	08004cb1 	.word	0x08004cb1
 8000074:	08004cd1 	.word	0x08004cd1
 8000078:	08004cf1 	.word	0x08004cf1
 800007c:	08004d11 	.word	0x08004d11
 8000080:	08004d31 	.word	0x08004d31
 8000084:	08004d51 	.word	0x08004d51
 8000088:	0800024b 	.word	0x0800024b
 800008c:	0800024b 	.word	0x0800024b
 8000090:	08006c41 	.word	0x08006c41
 8000094:	0800024b 	.word	0x0800024b
 8000098:	0800024b 	.word	0x0800024b
 800009c:	0800024b 	.word	0x0800024b
 80000a0:	0800024b 	.word	0x0800024b
 80000a4:	0800024b 	.word	0x0800024b
 80000a8:	0800024b 	.word	0x0800024b
 80000ac:	0800024b 	.word	0x0800024b
 80000b0:	08006051 	.word	0x08006051
 80000b4:	08006071 	.word	0x08006071
 80000b8:	08006091 	.word	0x08006091
 80000bc:	08005a51 	.word	0x08005a51
 80000c0:	08005a71 	.word	0x08005a71
 80000c4:	08005ab1 	.word	0x08005ab1
 80000c8:	08005ad1 	.word	0x08005ad1
 80000cc:	0800024b 	.word	0x0800024b
 80000d0:	0800024b 	.word	0x0800024b
 80000d4:	0800024b 	.word	0x0800024b
 80000d8:	0800024b 	.word	0x0800024b
 80000dc:	080066a1 	.word	0x080066a1
 80000e0:	0800024b 	.word	0x0800024b
 80000e4:	0800024b 	.word	0x0800024b
 80000e8:	0800024b 	.word	0x0800024b
 80000ec:	0800024b 	.word	0x0800024b
 80000f0:	0800024b 	.word	0x0800024b
 80000f4:	0800024b 	.word	0x0800024b
 80000f8:	0800024b 	.word	0x0800024b
 80000fc:	0800024b 	.word	0x0800024b
 8000100:	0800024b 	.word	0x0800024b
 8000104:	0800024b 	.word	0x0800024b
 8000108:	0800024b 	.word	0x0800024b
 800010c:	0800024b 	.word	0x0800024b
 8000110:	0800024b 	.word	0x0800024b
 8000114:	0800024b 	.word	0x0800024b
 8000118:	0800024b 	.word	0x0800024b
 800011c:	0800024b 	.word	0x0800024b
 8000120:	0800024b 	.word	0x0800024b
 8000124:	0800024b 	.word	0x0800024b
 8000128:	0800024b 	.word	0x0800024b
 800012c:	0800024b 	.word	0x0800024b
 8000130:	0800024b 	.word	0x0800024b
 8000134:	0800024b 	.word	0x0800024b
 8000138:	0800024b 	.word	0x0800024b
 800013c:	0800024b 	.word	0x0800024b
 8000140:	0800024b 	.word	0x0800024b
 8000144:	0800024b 	.word	0x0800024b
 8000148:	0800024b 	.word	0x0800024b
 800014c:	0800024b 	.word	0x0800024b
 8000150:	0800024b 	.word	0x0800024b
 8000154:	0800024b 	.word	0x0800024b
 8000158:	0800024b 	.word	0x0800024b
 800015c:	0800024b 	.word	0x0800024b

Disassembly of section .text:

08000170 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000170:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000172:	4826      	ldr	r0, [pc, #152]	; (800020c <endfiniloop+0x6>)
                msr     MSP, r0
 8000174:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000178:	4825      	ldr	r0, [pc, #148]	; (8000210 <endfiniloop+0xa>)
                msr     PSP, r0
 800017a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 800017e:	4825      	ldr	r0, [pc, #148]	; (8000214 <endfiniloop+0xe>)
                ldr     r1, =SCB_VTOR
 8000180:	4925      	ldr	r1, [pc, #148]	; (8000218 <endfiniloop+0x12>)
                str     r0, [r1]
 8000182:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 8000184:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000186:	f380 8814 	msr	CONTROL, r0
                isb
 800018a:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 800018e:	f001 fa1f 	bl	80015d0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000192:	f007 f895 	bl	80072c0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000196:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800019a:	4920      	ldr	r1, [pc, #128]	; (800021c <endfiniloop+0x16>)
                ldr     r2, =__main_stack_end__
 800019c:	4a1b      	ldr	r2, [pc, #108]	; (800020c <endfiniloop+0x6>)

0800019e <msloop>:
msloop:
                cmp     r1, r2
 800019e:	4291      	cmp	r1, r2
                itt     lo
 80001a0:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a2:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80001a6:	e7fa      	bcc.n	800019e <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80001a8:	491d      	ldr	r1, [pc, #116]	; (8000220 <endfiniloop+0x1a>)
                ldr     r2, =__process_stack_end__
 80001aa:	4a19      	ldr	r2, [pc, #100]	; (8000210 <endfiniloop+0xa>)

080001ac <psloop>:
psloop:
                cmp     r1, r2
 80001ac:	4291      	cmp	r1, r2
                itt     lo
 80001ae:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001b0:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001b4:	e7fa      	bcc.n	80001ac <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 80001b6:	491b      	ldr	r1, [pc, #108]	; (8000224 <endfiniloop+0x1e>)
                ldr     r2, =__data_base__
 80001b8:	4a1b      	ldr	r2, [pc, #108]	; (8000228 <endfiniloop+0x22>)
                ldr     r3, =__data_end__
 80001ba:	4b1c      	ldr	r3, [pc, #112]	; (800022c <endfiniloop+0x26>)

080001bc <dloop>:
dloop:
                cmp     r2, r3
 80001bc:	429a      	cmp	r2, r3
                ittt    lo
 80001be:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001c0:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001c4:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001c8:	e7f8      	bcc.n	80001bc <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 80001ca:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001cc:	4918      	ldr	r1, [pc, #96]	; (8000230 <endfiniloop+0x2a>)
                ldr     r2, =__bss_end__
 80001ce:	4a19      	ldr	r2, [pc, #100]	; (8000234 <endfiniloop+0x2e>)

080001d0 <bloop>:
bloop:
                cmp     r1, r2
 80001d0:	4291      	cmp	r1, r2
                itt     lo
 80001d2:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001d4:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001d8:	e7fa      	bcc.n	80001d0 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001da:	f001 fa11 	bl	8001600 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001de:	f001 f9ff 	bl	80015e0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001e2:	4c15      	ldr	r4, [pc, #84]	; (8000238 <endfiniloop+0x32>)
                ldr     r5, =__init_array_end__
 80001e4:	4d15      	ldr	r5, [pc, #84]	; (800023c <endfiniloop+0x36>)

080001e6 <initloop>:
initloop:
                cmp     r4, r5
 80001e6:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001e8:	da03      	bge.n	80001f2 <endinitloop>
                ldr     r1, [r4], #4
 80001ea:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001ee:	4788      	blx	r1
                b       initloop
 80001f0:	e7f9      	b.n	80001e6 <initloop>

080001f2 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001f2:	f009 feed 	bl	8009fd0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001f6:	4c12      	ldr	r4, [pc, #72]	; (8000240 <endfiniloop+0x3a>)
                ldr     r5, =__fini_array_end__
 80001f8:	4d12      	ldr	r5, [pc, #72]	; (8000244 <endfiniloop+0x3e>)

080001fa <finiloop>:
finiloop:
                cmp     r4, r5
 80001fa:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001fc:	da03      	bge.n	8000206 <endfiniloop>
                ldr     r1, [r4], #4
 80001fe:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000202:	4788      	blx	r1
                b       finiloop
 8000204:	e7f9      	b.n	80001fa <finiloop>

08000206 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000206:	f001 b9f3 	b.w	80015f0 <__default_exit>
 800020a:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 800020c:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000210:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000214:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000218:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800021c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000220:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000224:	0800acf0 	.word	0x0800acf0
                ldr     r2, =__data_base__
 8000228:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800022c:	20000d60 	.word	0x20000d60
                ldr     r1, =__bss_base__
 8000230:	20000d60 	.word	0x20000d60
                ldr     r2, =__bss_end__
 8000234:	20001c10 	.word	0x20001c10
                ldr     r4, =__init_array_base__
 8000238:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800023c:	08000164 	.word	0x08000164
                ldr     r4, =__fini_array_base__
 8000240:	08000164 	.word	0x08000164
                ldr     r5, =__fini_array_end__
 8000244:	08000164 	.word	0x08000164

08000248 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000248:	e792      	b.n	8000170 <_crt0_entry>

0800024a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800024a:	f000 f800 	bl	800024e <_unhandled_exception>

0800024e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800024e:	e7fe      	b.n	800024e <_unhandled_exception>

08000250 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000254:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000258:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800025a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000260 <__port_thread_start>:
__port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      __port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 8000260:	f007 f8e6 	bl	8007430 <__dbg_check_unlock>
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000264:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000266:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800026a:	4628      	mov	r0, r5
                blx     r4
 800026c:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800026e:	2000      	movs	r0, #0
                bl      chThdExit
 8000270:	f008 f94e 	bl	8008510 <chThdExit>

08000274 <.zombies>:
.zombies:       b       .zombies
 8000274:	e7fe      	b.n	8000274 <.zombies>

08000276 <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
 8000276:	f007 f8b3 	bl	80073e0 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
 800027a:	f007 fd91 	bl	8007da0 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800027e:	f007 f8d7 	bl	8007430 <__dbg_check_unlock>

08000282 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000282:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000284:	e7fe      	b.n	8000284 <__port_exit_from_isr+0x2>
	...

08000288 <__aeabi_dmul>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800028e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000292:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000296:	bf1d      	ittte	ne
 8000298:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800029c:	ea94 0f0c 	teqne	r4, ip
 80002a0:	ea95 0f0c 	teqne	r5, ip
 80002a4:	f000 f8de 	bleq	8000464 <__aeabi_dmul+0x1dc>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea81 0603 	eor.w	r6, r1, r3
 80002ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002ba:	bf18      	it	ne
 80002bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c8:	d038      	beq.n	800033c <__aeabi_dmul+0xb4>
 80002ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80002ce:	f04f 0500 	mov.w	r5, #0
 80002d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002de:	f04f 0600 	mov.w	r6, #0
 80002e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002e6:	f09c 0f00 	teq	ip, #0
 80002ea:	bf18      	it	ne
 80002ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002fc:	d204      	bcs.n	8000308 <__aeabi_dmul+0x80>
 80002fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000302:	416d      	adcs	r5, r5
 8000304:	eb46 0606 	adc.w	r6, r6, r6
 8000308:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800030c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000310:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000314:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000318:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800031c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000320:	bf88      	it	hi
 8000322:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000326:	d81e      	bhi.n	8000366 <__aeabi_dmul+0xde>
 8000328:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000340:	ea46 0101 	orr.w	r1, r6, r1
 8000344:	ea40 0002 	orr.w	r0, r0, r2
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000350:	bfc2      	ittt	gt
 8000352:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000356:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800035a:	bd70      	popgt	{r4, r5, r6, pc}
 800035c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000360:	f04f 0e00 	mov.w	lr, #0
 8000364:	3c01      	subs	r4, #1
 8000366:	f300 80ab 	bgt.w	80004c0 <__aeabi_dmul+0x238>
 800036a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800036e:	bfde      	ittt	le
 8000370:	2000      	movle	r0, #0
 8000372:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000376:	bd70      	pople	{r4, r5, r6, pc}
 8000378:	f1c4 0400 	rsb	r4, r4, #0
 800037c:	3c20      	subs	r4, #32
 800037e:	da35      	bge.n	80003ec <__aeabi_dmul+0x164>
 8000380:	340c      	adds	r4, #12
 8000382:	dc1b      	bgt.n	80003bc <__aeabi_dmul+0x134>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0520 	rsb	r5, r4, #32
 800038c:	fa00 f305 	lsl.w	r3, r0, r5
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f205 	lsl.w	r2, r1, r5
 8000398:	ea40 0002 	orr.w	r0, r0, r2
 800039c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a8:	fa21 f604 	lsr.w	r6, r1, r4
 80003ac:	eb42 0106 	adc.w	r1, r2, r6
 80003b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003b4:	bf08      	it	eq
 80003b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f1c4 040c 	rsb	r4, r4, #12
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f304 	lsl.w	r3, r0, r4
 80003c8:	fa20 f005 	lsr.w	r0, r0, r5
 80003cc:	fa01 f204 	lsl.w	r2, r1, r4
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003e4:	bf08      	it	eq
 80003e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f1c4 0520 	rsb	r5, r4, #32
 80003f0:	fa00 f205 	lsl.w	r2, r0, r5
 80003f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f8:	fa20 f304 	lsr.w	r3, r0, r4
 80003fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000400:	ea43 0302 	orr.w	r3, r3, r2
 8000404:	fa21 f004 	lsr.w	r0, r1, r4
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	fa21 f204 	lsr.w	r2, r1, r4
 8000410:	ea20 0002 	bic.w	r0, r0, r2
 8000414:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f094 0f00 	teq	r4, #0
 8000428:	d10f      	bne.n	800044a <__aeabi_dmul+0x1c2>
 800042a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800042e:	0040      	lsls	r0, r0, #1
 8000430:	eb41 0101 	adc.w	r1, r1, r1
 8000434:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000438:	bf08      	it	eq
 800043a:	3c01      	subeq	r4, #1
 800043c:	d0f7      	beq.n	800042e <__aeabi_dmul+0x1a6>
 800043e:	ea41 0106 	orr.w	r1, r1, r6
 8000442:	f095 0f00 	teq	r5, #0
 8000446:	bf18      	it	ne
 8000448:	4770      	bxne	lr
 800044a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	eb43 0303 	adc.w	r3, r3, r3
 8000454:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000458:	bf08      	it	eq
 800045a:	3d01      	subeq	r5, #1
 800045c:	d0f7      	beq.n	800044e <__aeabi_dmul+0x1c6>
 800045e:	ea43 0306 	orr.w	r3, r3, r6
 8000462:	4770      	bx	lr
 8000464:	ea94 0f0c 	teq	r4, ip
 8000468:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800046c:	bf18      	it	ne
 800046e:	ea95 0f0c 	teqne	r5, ip
 8000472:	d00c      	beq.n	800048e <__aeabi_dmul+0x206>
 8000474:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000478:	bf18      	it	ne
 800047a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800047e:	d1d1      	bne.n	8000424 <__aeabi_dmul+0x19c>
 8000480:	ea81 0103 	eor.w	r1, r1, r3
 8000484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd70      	pop	{r4, r5, r6, pc}
 800048e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000492:	bf06      	itte	eq
 8000494:	4610      	moveq	r0, r2
 8000496:	4619      	moveq	r1, r3
 8000498:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800049c:	d019      	beq.n	80004d2 <__aeabi_dmul+0x24a>
 800049e:	ea94 0f0c 	teq	r4, ip
 80004a2:	d102      	bne.n	80004aa <__aeabi_dmul+0x222>
 80004a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a8:	d113      	bne.n	80004d2 <__aeabi_dmul+0x24a>
 80004aa:	ea95 0f0c 	teq	r5, ip
 80004ae:	d105      	bne.n	80004bc <__aeabi_dmul+0x234>
 80004b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004b4:	bf1c      	itt	ne
 80004b6:	4610      	movne	r0, r2
 80004b8:	4619      	movne	r1, r3
 80004ba:	d10a      	bne.n	80004d2 <__aeabi_dmul+0x24a>
 80004bc:	ea81 0103 	eor.w	r1, r1, r3
 80004c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd70      	pop	{r4, r5, r6, pc}
 80004d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004da:	bd70      	pop	{r4, r5, r6, pc}

080004dc <__aeabi_ddiv>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8a7 	bleq	800064a <__aeabi_ddiv+0x16e>
 80004fc:	eba4 0405 	sub.w	r4, r4, r5
 8000500:	ea81 0e03 	eor.w	lr, r1, r3
 8000504:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000508:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800050c:	f000 8088 	beq.w	8000620 <__aeabi_ddiv+0x144>
 8000510:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000514:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000518:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800051c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000520:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000524:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000528:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800052c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000530:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000534:	429d      	cmp	r5, r3
 8000536:	bf08      	it	eq
 8000538:	4296      	cmpeq	r6, r2
 800053a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800053e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000542:	d202      	bcs.n	800054a <__aeabi_ddiv+0x6e>
 8000544:	085b      	lsrs	r3, r3, #1
 8000546:	ea4f 0232 	mov.w	r2, r2, rrx
 800054a:	1ab6      	subs	r6, r6, r2
 800054c:	eb65 0503 	sbc.w	r5, r5, r3
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	ea4f 0232 	mov.w	r2, r2, rrx
 8000556:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800055a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800055e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000562:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000566:	bf22      	ittt	cs
 8000568:	1ab6      	subcs	r6, r6, r2
 800056a:	4675      	movcs	r5, lr
 800056c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000570:	085b      	lsrs	r3, r3, #1
 8000572:	ea4f 0232 	mov.w	r2, r2, rrx
 8000576:	ebb6 0e02 	subs.w	lr, r6, r2
 800057a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800057e:	bf22      	ittt	cs
 8000580:	1ab6      	subcs	r6, r6, r2
 8000582:	4675      	movcs	r5, lr
 8000584:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000588:	085b      	lsrs	r3, r3, #1
 800058a:	ea4f 0232 	mov.w	r2, r2, rrx
 800058e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000592:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000596:	bf22      	ittt	cs
 8000598:	1ab6      	subcs	r6, r6, r2
 800059a:	4675      	movcs	r5, lr
 800059c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005a0:	085b      	lsrs	r3, r3, #1
 80005a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80005a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80005aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80005ae:	bf22      	ittt	cs
 80005b0:	1ab6      	subcs	r6, r6, r2
 80005b2:	4675      	movcs	r5, lr
 80005b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80005bc:	d018      	beq.n	80005f0 <__aeabi_ddiv+0x114>
 80005be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80005c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80005c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80005ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80005ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80005d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80005d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80005da:	d1c0      	bne.n	800055e <__aeabi_ddiv+0x82>
 80005dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005e0:	d10b      	bne.n	80005fa <__aeabi_ddiv+0x11e>
 80005e2:	ea41 0100 	orr.w	r1, r1, r0
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80005ee:	e7b6      	b.n	800055e <__aeabi_ddiv+0x82>
 80005f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005f4:	bf04      	itt	eq
 80005f6:	4301      	orreq	r1, r0
 80005f8:	2000      	moveq	r0, #0
 80005fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fe:	bf88      	it	hi
 8000600:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000604:	f63f aeaf 	bhi.w	8000366 <__aeabi_dmul+0xde>
 8000608:	ebb5 0c03 	subs.w	ip, r5, r3
 800060c:	bf04      	itt	eq
 800060e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000624:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000628:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	e690      	b.n	8000366 <__aeabi_dmul+0xde>
 8000644:	ea45 0e06 	orr.w	lr, r5, r6
 8000648:	e68d      	b.n	8000366 <__aeabi_dmul+0xde>
 800064a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800064e:	ea94 0f0c 	teq	r4, ip
 8000652:	bf08      	it	eq
 8000654:	ea95 0f0c 	teqeq	r5, ip
 8000658:	f43f af3b 	beq.w	80004d2 <__aeabi_dmul+0x24a>
 800065c:	ea94 0f0c 	teq	r4, ip
 8000660:	d10a      	bne.n	8000678 <__aeabi_ddiv+0x19c>
 8000662:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000666:	f47f af34 	bne.w	80004d2 <__aeabi_dmul+0x24a>
 800066a:	ea95 0f0c 	teq	r5, ip
 800066e:	f47f af25 	bne.w	80004bc <__aeabi_dmul+0x234>
 8000672:	4610      	mov	r0, r2
 8000674:	4619      	mov	r1, r3
 8000676:	e72c      	b.n	80004d2 <__aeabi_dmul+0x24a>
 8000678:	ea95 0f0c 	teq	r5, ip
 800067c:	d106      	bne.n	800068c <__aeabi_ddiv+0x1b0>
 800067e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000682:	f43f aefd 	beq.w	8000480 <__aeabi_dmul+0x1f8>
 8000686:	4610      	mov	r0, r2
 8000688:	4619      	mov	r1, r3
 800068a:	e722      	b.n	80004d2 <__aeabi_dmul+0x24a>
 800068c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000690:	bf18      	it	ne
 8000692:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000696:	f47f aec5 	bne.w	8000424 <__aeabi_dmul+0x19c>
 800069a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800069e:	f47f af0d 	bne.w	80004bc <__aeabi_dmul+0x234>
 80006a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80006a6:	f47f aeeb 	bne.w	8000480 <__aeabi_dmul+0x1f8>
 80006aa:	e712      	b.n	80004d2 <__aeabi_dmul+0x24a>

080006ac <__gedf2>:
 80006ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80006b0:	e006      	b.n	80006c0 <__cmpdf2+0x4>
 80006b2:	bf00      	nop

080006b4 <__ledf2>:
 80006b4:	f04f 0c01 	mov.w	ip, #1
 80006b8:	e002      	b.n	80006c0 <__cmpdf2+0x4>
 80006ba:	bf00      	nop

080006bc <__cmpdf2>:
 80006bc:	f04f 0c01 	mov.w	ip, #1
 80006c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006d0:	bf18      	it	ne
 80006d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006d6:	d01b      	beq.n	8000710 <__cmpdf2+0x54>
 80006d8:	b001      	add	sp, #4
 80006da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006de:	bf0c      	ite	eq
 80006e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006e4:	ea91 0f03 	teqne	r1, r3
 80006e8:	bf02      	ittt	eq
 80006ea:	ea90 0f02 	teqeq	r0, r2
 80006ee:	2000      	moveq	r0, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	f110 0f00 	cmn.w	r0, #0
 80006f6:	ea91 0f03 	teq	r1, r3
 80006fa:	bf58      	it	pl
 80006fc:	4299      	cmppl	r1, r3
 80006fe:	bf08      	it	eq
 8000700:	4290      	cmpeq	r0, r2
 8000702:	bf2c      	ite	cs
 8000704:	17d8      	asrcs	r0, r3, #31
 8000706:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800070a:	f040 0001 	orr.w	r0, r0, #1
 800070e:	4770      	bx	lr
 8000710:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000718:	d102      	bne.n	8000720 <__cmpdf2+0x64>
 800071a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800071e:	d107      	bne.n	8000730 <__cmpdf2+0x74>
 8000720:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000724:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000728:	d1d6      	bne.n	80006d8 <__cmpdf2+0x1c>
 800072a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800072e:	d0d3      	beq.n	80006d8 <__cmpdf2+0x1c>
 8000730:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <__aeabi_cdrcmple>:
 8000738:	4684      	mov	ip, r0
 800073a:	4610      	mov	r0, r2
 800073c:	4662      	mov	r2, ip
 800073e:	468c      	mov	ip, r1
 8000740:	4619      	mov	r1, r3
 8000742:	4663      	mov	r3, ip
 8000744:	e000      	b.n	8000748 <__aeabi_cdcmpeq>
 8000746:	bf00      	nop

08000748 <__aeabi_cdcmpeq>:
 8000748:	b501      	push	{r0, lr}
 800074a:	f7ff ffb7 	bl	80006bc <__cmpdf2>
 800074e:	2800      	cmp	r0, #0
 8000750:	bf48      	it	mi
 8000752:	f110 0f00 	cmnmi.w	r0, #0
 8000756:	bd01      	pop	{r0, pc}

08000758 <__aeabi_dcmpeq>:
 8000758:	f84d ed08 	str.w	lr, [sp, #-8]!
 800075c:	f7ff fff4 	bl	8000748 <__aeabi_cdcmpeq>
 8000760:	bf0c      	ite	eq
 8000762:	2001      	moveq	r0, #1
 8000764:	2000      	movne	r0, #0
 8000766:	f85d fb08 	ldr.w	pc, [sp], #8
 800076a:	bf00      	nop

0800076c <__aeabi_dcmplt>:
 800076c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000770:	f7ff ffea 	bl	8000748 <__aeabi_cdcmpeq>
 8000774:	bf34      	ite	cc
 8000776:	2001      	movcc	r0, #1
 8000778:	2000      	movcs	r0, #0
 800077a:	f85d fb08 	ldr.w	pc, [sp], #8
 800077e:	bf00      	nop

08000780 <__aeabi_dcmple>:
 8000780:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000784:	f7ff ffe0 	bl	8000748 <__aeabi_cdcmpeq>
 8000788:	bf94      	ite	ls
 800078a:	2001      	movls	r0, #1
 800078c:	2000      	movhi	r0, #0
 800078e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000792:	bf00      	nop

08000794 <__aeabi_dcmpge>:
 8000794:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000798:	f7ff ffce 	bl	8000738 <__aeabi_cdrcmple>
 800079c:	bf94      	ite	ls
 800079e:	2001      	movls	r0, #1
 80007a0:	2000      	movhi	r0, #0
 80007a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a6:	bf00      	nop

080007a8 <__aeabi_dcmpgt>:
 80007a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007ac:	f7ff ffc4 	bl	8000738 <__aeabi_cdrcmple>
 80007b0:	bf34      	ite	cc
 80007b2:	2001      	movcc	r0, #1
 80007b4:	2000      	movcs	r0, #0
 80007b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ba:	bf00      	nop

080007bc <__aeabi_dcmpun>:
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	d102      	bne.n	80007cc <__aeabi_dcmpun+0x10>
 80007c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dcmpun+0x26>
 80007cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007d4:	d102      	bne.n	80007dc <__aeabi_dcmpun+0x20>
 80007d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007da:	d102      	bne.n	80007e2 <__aeabi_dcmpun+0x26>
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	f04f 0001 	mov.w	r0, #1
 80007e6:	4770      	bx	lr

080007e8 <__aeabi_drsub>:
 80007e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e002      	b.n	80007f4 <__adddf3>
 80007ee:	bf00      	nop

080007f0 <__aeabi_dsub>:
 80007f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080007f4 <__adddf3>:
 80007f4:	b530      	push	{r4, r5, lr}
 80007f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80007fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80007fe:	ea94 0f05 	teq	r4, r5
 8000802:	bf08      	it	eq
 8000804:	ea90 0f02 	teqeq	r0, r2
 8000808:	bf1f      	itttt	ne
 800080a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800080e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000812:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000816:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800081a:	f000 80e2 	beq.w	80009e2 <__adddf3+0x1ee>
 800081e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000822:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000826:	bfb8      	it	lt
 8000828:	426d      	neglt	r5, r5
 800082a:	dd0c      	ble.n	8000846 <__adddf3+0x52>
 800082c:	442c      	add	r4, r5
 800082e:	ea80 0202 	eor.w	r2, r0, r2
 8000832:	ea81 0303 	eor.w	r3, r1, r3
 8000836:	ea82 0000 	eor.w	r0, r2, r0
 800083a:	ea83 0101 	eor.w	r1, r3, r1
 800083e:	ea80 0202 	eor.w	r2, r0, r2
 8000842:	ea81 0303 	eor.w	r3, r1, r3
 8000846:	2d36      	cmp	r5, #54	; 0x36
 8000848:	bf88      	it	hi
 800084a:	bd30      	pophi	{r4, r5, pc}
 800084c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000850:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000854:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000858:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800085c:	d002      	beq.n	8000864 <__adddf3+0x70>
 800085e:	4240      	negs	r0, r0
 8000860:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000864:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000870:	d002      	beq.n	8000878 <__adddf3+0x84>
 8000872:	4252      	negs	r2, r2
 8000874:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000878:	ea94 0f05 	teq	r4, r5
 800087c:	f000 80a7 	beq.w	80009ce <__adddf3+0x1da>
 8000880:	f1a4 0401 	sub.w	r4, r4, #1
 8000884:	f1d5 0e20 	rsbs	lr, r5, #32
 8000888:	db0d      	blt.n	80008a6 <__adddf3+0xb2>
 800088a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800088e:	fa22 f205 	lsr.w	r2, r2, r5
 8000892:	1880      	adds	r0, r0, r2
 8000894:	f141 0100 	adc.w	r1, r1, #0
 8000898:	fa03 f20e 	lsl.w	r2, r3, lr
 800089c:	1880      	adds	r0, r0, r2
 800089e:	fa43 f305 	asr.w	r3, r3, r5
 80008a2:	4159      	adcs	r1, r3
 80008a4:	e00e      	b.n	80008c4 <__adddf3+0xd0>
 80008a6:	f1a5 0520 	sub.w	r5, r5, #32
 80008aa:	f10e 0e20 	add.w	lr, lr, #32
 80008ae:	2a01      	cmp	r2, #1
 80008b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80008b4:	bf28      	it	cs
 80008b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80008ba:	fa43 f305 	asr.w	r3, r3, r5
 80008be:	18c0      	adds	r0, r0, r3
 80008c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80008c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008c8:	d507      	bpl.n	80008da <__adddf3+0xe6>
 80008ca:	f04f 0e00 	mov.w	lr, #0
 80008ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80008d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80008d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80008da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80008de:	d31b      	bcc.n	8000918 <__adddf3+0x124>
 80008e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80008e4:	d30c      	bcc.n	8000900 <__adddf3+0x10c>
 80008e6:	0849      	lsrs	r1, r1, #1
 80008e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80008ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80008f0:	f104 0401 	add.w	r4, r4, #1
 80008f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80008f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80008fc:	f080 809a 	bcs.w	8000a34 <__adddf3+0x240>
 8000900:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000904:	bf08      	it	eq
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	ea41 0105 	orr.w	r1, r1, r5
 8000916:	bd30      	pop	{r4, r5, pc}
 8000918:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800091c:	4140      	adcs	r0, r0
 800091e:	eb41 0101 	adc.w	r1, r1, r1
 8000922:	3c01      	subs	r4, #1
 8000924:	bf28      	it	cs
 8000926:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800092a:	d2e9      	bcs.n	8000900 <__adddf3+0x10c>
 800092c:	f091 0f00 	teq	r1, #0
 8000930:	bf04      	itt	eq
 8000932:	4601      	moveq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	fab1 f381 	clz	r3, r1
 800093a:	bf08      	it	eq
 800093c:	3320      	addeq	r3, #32
 800093e:	f1a3 030b 	sub.w	r3, r3, #11
 8000942:	f1b3 0220 	subs.w	r2, r3, #32
 8000946:	da0c      	bge.n	8000962 <__adddf3+0x16e>
 8000948:	320c      	adds	r2, #12
 800094a:	dd08      	ble.n	800095e <__adddf3+0x16a>
 800094c:	f102 0c14 	add.w	ip, r2, #20
 8000950:	f1c2 020c 	rsb	r2, r2, #12
 8000954:	fa01 f00c 	lsl.w	r0, r1, ip
 8000958:	fa21 f102 	lsr.w	r1, r1, r2
 800095c:	e00c      	b.n	8000978 <__adddf3+0x184>
 800095e:	f102 0214 	add.w	r2, r2, #20
 8000962:	bfd8      	it	le
 8000964:	f1c2 0c20 	rsble	ip, r2, #32
 8000968:	fa01 f102 	lsl.w	r1, r1, r2
 800096c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000970:	bfdc      	itt	le
 8000972:	ea41 010c 	orrle.w	r1, r1, ip
 8000976:	4090      	lslle	r0, r2
 8000978:	1ae4      	subs	r4, r4, r3
 800097a:	bfa2      	ittt	ge
 800097c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000980:	4329      	orrge	r1, r5
 8000982:	bd30      	popge	{r4, r5, pc}
 8000984:	ea6f 0404 	mvn.w	r4, r4
 8000988:	3c1f      	subs	r4, #31
 800098a:	da1c      	bge.n	80009c6 <__adddf3+0x1d2>
 800098c:	340c      	adds	r4, #12
 800098e:	dc0e      	bgt.n	80009ae <__adddf3+0x1ba>
 8000990:	f104 0414 	add.w	r4, r4, #20
 8000994:	f1c4 0220 	rsb	r2, r4, #32
 8000998:	fa20 f004 	lsr.w	r0, r0, r4
 800099c:	fa01 f302 	lsl.w	r3, r1, r2
 80009a0:	ea40 0003 	orr.w	r0, r0, r3
 80009a4:	fa21 f304 	lsr.w	r3, r1, r4
 80009a8:	ea45 0103 	orr.w	r1, r5, r3
 80009ac:	bd30      	pop	{r4, r5, pc}
 80009ae:	f1c4 040c 	rsb	r4, r4, #12
 80009b2:	f1c4 0220 	rsb	r2, r4, #32
 80009b6:	fa20 f002 	lsr.w	r0, r0, r2
 80009ba:	fa01 f304 	lsl.w	r3, r1, r4
 80009be:	ea40 0003 	orr.w	r0, r0, r3
 80009c2:	4629      	mov	r1, r5
 80009c4:	bd30      	pop	{r4, r5, pc}
 80009c6:	fa21 f004 	lsr.w	r0, r1, r4
 80009ca:	4629      	mov	r1, r5
 80009cc:	bd30      	pop	{r4, r5, pc}
 80009ce:	f094 0f00 	teq	r4, #0
 80009d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80009d6:	bf06      	itte	eq
 80009d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80009dc:	3401      	addeq	r4, #1
 80009de:	3d01      	subne	r5, #1
 80009e0:	e74e      	b.n	8000880 <__adddf3+0x8c>
 80009e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80009e6:	bf18      	it	ne
 80009e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80009ec:	d029      	beq.n	8000a42 <__adddf3+0x24e>
 80009ee:	ea94 0f05 	teq	r4, r5
 80009f2:	bf08      	it	eq
 80009f4:	ea90 0f02 	teqeq	r0, r2
 80009f8:	d005      	beq.n	8000a06 <__adddf3+0x212>
 80009fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80009fe:	bf04      	itt	eq
 8000a00:	4619      	moveq	r1, r3
 8000a02:	4610      	moveq	r0, r2
 8000a04:	bd30      	pop	{r4, r5, pc}
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf1e      	ittt	ne
 8000a0c:	2100      	movne	r1, #0
 8000a0e:	2000      	movne	r0, #0
 8000a10:	bd30      	popne	{r4, r5, pc}
 8000a12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a16:	d105      	bne.n	8000a24 <__adddf3+0x230>
 8000a18:	0040      	lsls	r0, r0, #1
 8000a1a:	4149      	adcs	r1, r1
 8000a1c:	bf28      	it	cs
 8000a1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000a22:	bd30      	pop	{r4, r5, pc}
 8000a24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000a28:	bf3c      	itt	cc
 8000a2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000a2e:	bd30      	popcc	{r4, r5, pc}
 8000a30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000a38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	bd30      	pop	{r4, r5, pc}
 8000a42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a46:	bf1a      	itte	ne
 8000a48:	4619      	movne	r1, r3
 8000a4a:	4610      	movne	r0, r2
 8000a4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a50:	bf1c      	itt	ne
 8000a52:	460b      	movne	r3, r1
 8000a54:	4602      	movne	r2, r0
 8000a56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a5a:	bf06      	itte	eq
 8000a5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000a60:	ea91 0f03 	teqeq	r1, r3
 8000a64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000a68:	bd30      	pop	{r4, r5, pc}
 8000a6a:	bf00      	nop

08000a6c <__aeabi_ui2d>:
 8000a6c:	f090 0f00 	teq	r0, #0
 8000a70:	bf04      	itt	eq
 8000a72:	2100      	moveq	r1, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	b530      	push	{r4, r5, lr}
 8000a78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a80:	f04f 0500 	mov.w	r5, #0
 8000a84:	f04f 0100 	mov.w	r1, #0
 8000a88:	e750      	b.n	800092c <__adddf3+0x138>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_i2d>:
 8000a8c:	f090 0f00 	teq	r0, #0
 8000a90:	bf04      	itt	eq
 8000a92:	2100      	moveq	r1, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	b530      	push	{r4, r5, lr}
 8000a98:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000aa0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	f04f 0100 	mov.w	r1, #0
 8000aac:	e73e      	b.n	800092c <__adddf3+0x138>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_f2d>:
 8000ab0:	0042      	lsls	r2, r0, #1
 8000ab2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000ab6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000abe:	bf1f      	itttt	ne
 8000ac0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000ac4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000ac8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000acc:	4770      	bxne	lr
 8000ace:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000ad2:	bf08      	it	eq
 8000ad4:	4770      	bxeq	lr
 8000ad6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000ada:	bf04      	itt	eq
 8000adc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000ae0:	4770      	bxeq	lr
 8000ae2:	b530      	push	{r4, r5, lr}
 8000ae4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000ae8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000aec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000af0:	e71c      	b.n	800092c <__adddf3+0x138>
 8000af2:	bf00      	nop

08000af4 <__aeabi_ul2d>:
 8000af4:	ea50 0201 	orrs.w	r2, r0, r1
 8000af8:	bf08      	it	eq
 8000afa:	4770      	bxeq	lr
 8000afc:	b530      	push	{r4, r5, lr}
 8000afe:	f04f 0500 	mov.w	r5, #0
 8000b02:	e00a      	b.n	8000b1a <__aeabi_l2d+0x16>

08000b04 <__aeabi_l2d>:
 8000b04:	ea50 0201 	orrs.w	r2, r0, r1
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	b530      	push	{r4, r5, lr}
 8000b0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000b12:	d502      	bpl.n	8000b1a <__aeabi_l2d+0x16>
 8000b14:	4240      	negs	r0, r0
 8000b16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b26:	f43f aed8 	beq.w	80008da <__adddf3+0xe6>
 8000b2a:	f04f 0203 	mov.w	r2, #3
 8000b2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b32:	bf18      	it	ne
 8000b34:	3203      	addne	r2, #3
 8000b36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b3a:	bf18      	it	ne
 8000b3c:	3203      	addne	r2, #3
 8000b3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b42:	f1c2 0320 	rsb	r3, r2, #32
 8000b46:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b52:	ea40 000e 	orr.w	r0, r0, lr
 8000b56:	fa21 f102 	lsr.w	r1, r1, r2
 8000b5a:	4414      	add	r4, r2
 8000b5c:	e6bd      	b.n	80008da <__adddf3+0xe6>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_f2uiz>:
 80011a8:	0042      	lsls	r2, r0, #1
 80011aa:	d20e      	bcs.n	80011ca <__aeabi_f2uiz+0x22>
 80011ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011b0:	d30b      	bcc.n	80011ca <__aeabi_f2uiz+0x22>
 80011b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ba:	d409      	bmi.n	80011d0 <__aeabi_f2uiz+0x28>
 80011bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011c4:	fa23 f002 	lsr.w	r0, r3, r2
 80011c8:	4770      	bx	lr
 80011ca:	f04f 0000 	mov.w	r0, #0
 80011ce:	4770      	bx	lr
 80011d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011d4:	d101      	bne.n	80011da <__aeabi_f2uiz+0x32>
 80011d6:	0242      	lsls	r2, r0, #9
 80011d8:	d102      	bne.n	80011e0 <__aeabi_f2uiz+0x38>
 80011da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011de:	4770      	bx	lr
 80011e0:	f04f 0000 	mov.w	r0, #0
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop

080011e8 <__aeabi_uldivmod>:
 80011e8:	b953      	cbnz	r3, 8001200 <__aeabi_uldivmod+0x18>
 80011ea:	b94a      	cbnz	r2, 8001200 <__aeabi_uldivmod+0x18>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	bf08      	it	eq
 80011f0:	2800      	cmpeq	r0, #0
 80011f2:	bf1c      	itt	ne
 80011f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80011f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80011fc:	f000 b96e 	b.w	80014dc <__aeabi_idiv0>
 8001200:	f1ad 0c08 	sub.w	ip, sp, #8
 8001204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001208:	f000 f806 	bl	8001218 <__udivmoddi4>
 800120c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001214:	b004      	add	sp, #16
 8001216:	4770      	bx	lr

08001218 <__udivmoddi4>:
 8001218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800121c:	9e08      	ldr	r6, [sp, #32]
 800121e:	460d      	mov	r5, r1
 8001220:	4604      	mov	r4, r0
 8001222:	468e      	mov	lr, r1
 8001224:	2b00      	cmp	r3, #0
 8001226:	f040 8083 	bne.w	8001330 <__udivmoddi4+0x118>
 800122a:	428a      	cmp	r2, r1
 800122c:	4617      	mov	r7, r2
 800122e:	d947      	bls.n	80012c0 <__udivmoddi4+0xa8>
 8001230:	fab2 f382 	clz	r3, r2
 8001234:	b14b      	cbz	r3, 800124a <__udivmoddi4+0x32>
 8001236:	f1c3 0120 	rsb	r1, r3, #32
 800123a:	fa05 fe03 	lsl.w	lr, r5, r3
 800123e:	fa20 f101 	lsr.w	r1, r0, r1
 8001242:	409f      	lsls	r7, r3
 8001244:	ea41 0e0e 	orr.w	lr, r1, lr
 8001248:	409c      	lsls	r4, r3
 800124a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800124e:	fbbe fcf8 	udiv	ip, lr, r8
 8001252:	fa1f f987 	uxth.w	r9, r7
 8001256:	fb08 e21c 	mls	r2, r8, ip, lr
 800125a:	fb0c f009 	mul.w	r0, ip, r9
 800125e:	0c21      	lsrs	r1, r4, #16
 8001260:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001264:	4290      	cmp	r0, r2
 8001266:	d90a      	bls.n	800127e <__udivmoddi4+0x66>
 8001268:	18ba      	adds	r2, r7, r2
 800126a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800126e:	f080 8118 	bcs.w	80014a2 <__udivmoddi4+0x28a>
 8001272:	4290      	cmp	r0, r2
 8001274:	f240 8115 	bls.w	80014a2 <__udivmoddi4+0x28a>
 8001278:	f1ac 0c02 	sub.w	ip, ip, #2
 800127c:	443a      	add	r2, r7
 800127e:	1a12      	subs	r2, r2, r0
 8001280:	fbb2 f0f8 	udiv	r0, r2, r8
 8001284:	fb08 2210 	mls	r2, r8, r0, r2
 8001288:	fb00 f109 	mul.w	r1, r0, r9
 800128c:	b2a4      	uxth	r4, r4
 800128e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001292:	42a1      	cmp	r1, r4
 8001294:	d909      	bls.n	80012aa <__udivmoddi4+0x92>
 8001296:	193c      	adds	r4, r7, r4
 8001298:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800129c:	f080 8103 	bcs.w	80014a6 <__udivmoddi4+0x28e>
 80012a0:	42a1      	cmp	r1, r4
 80012a2:	f240 8100 	bls.w	80014a6 <__udivmoddi4+0x28e>
 80012a6:	3802      	subs	r0, #2
 80012a8:	443c      	add	r4, r7
 80012aa:	1a64      	subs	r4, r4, r1
 80012ac:	2100      	movs	r1, #0
 80012ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012b2:	b11e      	cbz	r6, 80012bc <__udivmoddi4+0xa4>
 80012b4:	2200      	movs	r2, #0
 80012b6:	40dc      	lsrs	r4, r3
 80012b8:	e9c6 4200 	strd	r4, r2, [r6]
 80012bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c0:	b902      	cbnz	r2, 80012c4 <__udivmoddi4+0xac>
 80012c2:	deff      	udf	#255	; 0xff
 80012c4:	fab2 f382 	clz	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d14f      	bne.n	800136c <__udivmoddi4+0x154>
 80012cc:	1a8d      	subs	r5, r1, r2
 80012ce:	2101      	movs	r1, #1
 80012d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012d4:	fa1f f882 	uxth.w	r8, r2
 80012d8:	fbb5 fcfe 	udiv	ip, r5, lr
 80012dc:	fb0e 551c 	mls	r5, lr, ip, r5
 80012e0:	fb08 f00c 	mul.w	r0, r8, ip
 80012e4:	0c22      	lsrs	r2, r4, #16
 80012e6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80012ea:	42a8      	cmp	r0, r5
 80012ec:	d907      	bls.n	80012fe <__udivmoddi4+0xe6>
 80012ee:	197d      	adds	r5, r7, r5
 80012f0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80012f4:	d202      	bcs.n	80012fc <__udivmoddi4+0xe4>
 80012f6:	42a8      	cmp	r0, r5
 80012f8:	f200 80e9 	bhi.w	80014ce <__udivmoddi4+0x2b6>
 80012fc:	4694      	mov	ip, r2
 80012fe:	1a2d      	subs	r5, r5, r0
 8001300:	fbb5 f0fe 	udiv	r0, r5, lr
 8001304:	fb0e 5510 	mls	r5, lr, r0, r5
 8001308:	fb08 f800 	mul.w	r8, r8, r0
 800130c:	b2a4      	uxth	r4, r4
 800130e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001312:	45a0      	cmp	r8, r4
 8001314:	d907      	bls.n	8001326 <__udivmoddi4+0x10e>
 8001316:	193c      	adds	r4, r7, r4
 8001318:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800131c:	d202      	bcs.n	8001324 <__udivmoddi4+0x10c>
 800131e:	45a0      	cmp	r8, r4
 8001320:	f200 80d9 	bhi.w	80014d6 <__udivmoddi4+0x2be>
 8001324:	4610      	mov	r0, r2
 8001326:	eba4 0408 	sub.w	r4, r4, r8
 800132a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800132e:	e7c0      	b.n	80012b2 <__udivmoddi4+0x9a>
 8001330:	428b      	cmp	r3, r1
 8001332:	d908      	bls.n	8001346 <__udivmoddi4+0x12e>
 8001334:	2e00      	cmp	r6, #0
 8001336:	f000 80b1 	beq.w	800149c <__udivmoddi4+0x284>
 800133a:	2100      	movs	r1, #0
 800133c:	e9c6 0500 	strd	r0, r5, [r6]
 8001340:	4608      	mov	r0, r1
 8001342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001346:	fab3 f183 	clz	r1, r3
 800134a:	2900      	cmp	r1, #0
 800134c:	d14b      	bne.n	80013e6 <__udivmoddi4+0x1ce>
 800134e:	42ab      	cmp	r3, r5
 8001350:	d302      	bcc.n	8001358 <__udivmoddi4+0x140>
 8001352:	4282      	cmp	r2, r0
 8001354:	f200 80b9 	bhi.w	80014ca <__udivmoddi4+0x2b2>
 8001358:	1a84      	subs	r4, r0, r2
 800135a:	eb65 0303 	sbc.w	r3, r5, r3
 800135e:	2001      	movs	r0, #1
 8001360:	469e      	mov	lr, r3
 8001362:	2e00      	cmp	r6, #0
 8001364:	d0aa      	beq.n	80012bc <__udivmoddi4+0xa4>
 8001366:	e9c6 4e00 	strd	r4, lr, [r6]
 800136a:	e7a7      	b.n	80012bc <__udivmoddi4+0xa4>
 800136c:	409f      	lsls	r7, r3
 800136e:	f1c3 0220 	rsb	r2, r3, #32
 8001372:	40d1      	lsrs	r1, r2
 8001374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001378:	fbb1 f0fe 	udiv	r0, r1, lr
 800137c:	fa1f f887 	uxth.w	r8, r7
 8001380:	fb0e 1110 	mls	r1, lr, r0, r1
 8001384:	fa24 f202 	lsr.w	r2, r4, r2
 8001388:	409d      	lsls	r5, r3
 800138a:	fb00 fc08 	mul.w	ip, r0, r8
 800138e:	432a      	orrs	r2, r5
 8001390:	0c15      	lsrs	r5, r2, #16
 8001392:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001396:	45ac      	cmp	ip, r5
 8001398:	fa04 f403 	lsl.w	r4, r4, r3
 800139c:	d909      	bls.n	80013b2 <__udivmoddi4+0x19a>
 800139e:	197d      	adds	r5, r7, r5
 80013a0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80013a4:	f080 808f 	bcs.w	80014c6 <__udivmoddi4+0x2ae>
 80013a8:	45ac      	cmp	ip, r5
 80013aa:	f240 808c 	bls.w	80014c6 <__udivmoddi4+0x2ae>
 80013ae:	3802      	subs	r0, #2
 80013b0:	443d      	add	r5, r7
 80013b2:	eba5 050c 	sub.w	r5, r5, ip
 80013b6:	fbb5 f1fe 	udiv	r1, r5, lr
 80013ba:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013be:	fb01 f908 	mul.w	r9, r1, r8
 80013c2:	b295      	uxth	r5, r2
 80013c4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013c8:	45a9      	cmp	r9, r5
 80013ca:	d907      	bls.n	80013dc <__udivmoddi4+0x1c4>
 80013cc:	197d      	adds	r5, r7, r5
 80013ce:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80013d2:	d274      	bcs.n	80014be <__udivmoddi4+0x2a6>
 80013d4:	45a9      	cmp	r9, r5
 80013d6:	d972      	bls.n	80014be <__udivmoddi4+0x2a6>
 80013d8:	3902      	subs	r1, #2
 80013da:	443d      	add	r5, r7
 80013dc:	eba5 0509 	sub.w	r5, r5, r9
 80013e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013e4:	e778      	b.n	80012d8 <__udivmoddi4+0xc0>
 80013e6:	f1c1 0720 	rsb	r7, r1, #32
 80013ea:	408b      	lsls	r3, r1
 80013ec:	fa22 fc07 	lsr.w	ip, r2, r7
 80013f0:	ea4c 0c03 	orr.w	ip, ip, r3
 80013f4:	fa25 f407 	lsr.w	r4, r5, r7
 80013f8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80013fc:	fbb4 f9fe 	udiv	r9, r4, lr
 8001400:	fa1f f88c 	uxth.w	r8, ip
 8001404:	fb0e 4419 	mls	r4, lr, r9, r4
 8001408:	fa20 f307 	lsr.w	r3, r0, r7
 800140c:	fb09 fa08 	mul.w	sl, r9, r8
 8001410:	408d      	lsls	r5, r1
 8001412:	431d      	orrs	r5, r3
 8001414:	0c2b      	lsrs	r3, r5, #16
 8001416:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800141a:	45a2      	cmp	sl, r4
 800141c:	fa02 f201 	lsl.w	r2, r2, r1
 8001420:	fa00 f301 	lsl.w	r3, r0, r1
 8001424:	d909      	bls.n	800143a <__udivmoddi4+0x222>
 8001426:	eb1c 0404 	adds.w	r4, ip, r4
 800142a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800142e:	d248      	bcs.n	80014c2 <__udivmoddi4+0x2aa>
 8001430:	45a2      	cmp	sl, r4
 8001432:	d946      	bls.n	80014c2 <__udivmoddi4+0x2aa>
 8001434:	f1a9 0902 	sub.w	r9, r9, #2
 8001438:	4464      	add	r4, ip
 800143a:	eba4 040a 	sub.w	r4, r4, sl
 800143e:	fbb4 f0fe 	udiv	r0, r4, lr
 8001442:	fb0e 4410 	mls	r4, lr, r0, r4
 8001446:	fb00 fa08 	mul.w	sl, r0, r8
 800144a:	b2ad      	uxth	r5, r5
 800144c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001450:	45a2      	cmp	sl, r4
 8001452:	d908      	bls.n	8001466 <__udivmoddi4+0x24e>
 8001454:	eb1c 0404 	adds.w	r4, ip, r4
 8001458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800145c:	d22d      	bcs.n	80014ba <__udivmoddi4+0x2a2>
 800145e:	45a2      	cmp	sl, r4
 8001460:	d92b      	bls.n	80014ba <__udivmoddi4+0x2a2>
 8001462:	3802      	subs	r0, #2
 8001464:	4464      	add	r4, ip
 8001466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800146a:	fba0 8902 	umull	r8, r9, r0, r2
 800146e:	eba4 040a 	sub.w	r4, r4, sl
 8001472:	454c      	cmp	r4, r9
 8001474:	46c6      	mov	lr, r8
 8001476:	464d      	mov	r5, r9
 8001478:	d319      	bcc.n	80014ae <__udivmoddi4+0x296>
 800147a:	d016      	beq.n	80014aa <__udivmoddi4+0x292>
 800147c:	b15e      	cbz	r6, 8001496 <__udivmoddi4+0x27e>
 800147e:	ebb3 020e 	subs.w	r2, r3, lr
 8001482:	eb64 0405 	sbc.w	r4, r4, r5
 8001486:	fa04 f707 	lsl.w	r7, r4, r7
 800148a:	fa22 f301 	lsr.w	r3, r2, r1
 800148e:	431f      	orrs	r7, r3
 8001490:	40cc      	lsrs	r4, r1
 8001492:	e9c6 7400 	strd	r7, r4, [r6]
 8001496:	2100      	movs	r1, #0
 8001498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800149c:	4631      	mov	r1, r6
 800149e:	4630      	mov	r0, r6
 80014a0:	e70c      	b.n	80012bc <__udivmoddi4+0xa4>
 80014a2:	468c      	mov	ip, r1
 80014a4:	e6eb      	b.n	800127e <__udivmoddi4+0x66>
 80014a6:	4610      	mov	r0, r2
 80014a8:	e6ff      	b.n	80012aa <__udivmoddi4+0x92>
 80014aa:	4543      	cmp	r3, r8
 80014ac:	d2e6      	bcs.n	800147c <__udivmoddi4+0x264>
 80014ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80014b2:	eb69 050c 	sbc.w	r5, r9, ip
 80014b6:	3801      	subs	r0, #1
 80014b8:	e7e0      	b.n	800147c <__udivmoddi4+0x264>
 80014ba:	4628      	mov	r0, r5
 80014bc:	e7d3      	b.n	8001466 <__udivmoddi4+0x24e>
 80014be:	4611      	mov	r1, r2
 80014c0:	e78c      	b.n	80013dc <__udivmoddi4+0x1c4>
 80014c2:	4681      	mov	r9, r0
 80014c4:	e7b9      	b.n	800143a <__udivmoddi4+0x222>
 80014c6:	4608      	mov	r0, r1
 80014c8:	e773      	b.n	80013b2 <__udivmoddi4+0x19a>
 80014ca:	4608      	mov	r0, r1
 80014cc:	e749      	b.n	8001362 <__udivmoddi4+0x14a>
 80014ce:	f1ac 0c02 	sub.w	ip, ip, #2
 80014d2:	443d      	add	r5, r7
 80014d4:	e713      	b.n	80012fe <__udivmoddi4+0xe6>
 80014d6:	3802      	subs	r0, #2
 80014d8:	443c      	add	r4, r7
 80014da:	e724      	b.n	8001326 <__udivmoddi4+0x10e>

080014dc <__aeabi_idiv0>:
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <memcpy>:
 80014e0:	4684      	mov	ip, r0
 80014e2:	ea41 0300 	orr.w	r3, r1, r0
 80014e6:	f013 0303 	ands.w	r3, r3, #3
 80014ea:	d149      	bne.n	8001580 <memcpy+0xa0>
 80014ec:	3a40      	subs	r2, #64	; 0x40
 80014ee:	d323      	bcc.n	8001538 <memcpy+0x58>
 80014f0:	680b      	ldr	r3, [r1, #0]
 80014f2:	6003      	str	r3, [r0, #0]
 80014f4:	684b      	ldr	r3, [r1, #4]
 80014f6:	6043      	str	r3, [r0, #4]
 80014f8:	688b      	ldr	r3, [r1, #8]
 80014fa:	6083      	str	r3, [r0, #8]
 80014fc:	68cb      	ldr	r3, [r1, #12]
 80014fe:	60c3      	str	r3, [r0, #12]
 8001500:	690b      	ldr	r3, [r1, #16]
 8001502:	6103      	str	r3, [r0, #16]
 8001504:	694b      	ldr	r3, [r1, #20]
 8001506:	6143      	str	r3, [r0, #20]
 8001508:	698b      	ldr	r3, [r1, #24]
 800150a:	6183      	str	r3, [r0, #24]
 800150c:	69cb      	ldr	r3, [r1, #28]
 800150e:	61c3      	str	r3, [r0, #28]
 8001510:	6a0b      	ldr	r3, [r1, #32]
 8001512:	6203      	str	r3, [r0, #32]
 8001514:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001516:	6243      	str	r3, [r0, #36]	; 0x24
 8001518:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800151a:	6283      	str	r3, [r0, #40]	; 0x28
 800151c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800151e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001520:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001522:	6303      	str	r3, [r0, #48]	; 0x30
 8001524:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001526:	6343      	str	r3, [r0, #52]	; 0x34
 8001528:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800152a:	6383      	str	r3, [r0, #56]	; 0x38
 800152c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800152e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001530:	3040      	adds	r0, #64	; 0x40
 8001532:	3140      	adds	r1, #64	; 0x40
 8001534:	3a40      	subs	r2, #64	; 0x40
 8001536:	d2db      	bcs.n	80014f0 <memcpy+0x10>
 8001538:	3230      	adds	r2, #48	; 0x30
 800153a:	d30b      	bcc.n	8001554 <memcpy+0x74>
 800153c:	680b      	ldr	r3, [r1, #0]
 800153e:	6003      	str	r3, [r0, #0]
 8001540:	684b      	ldr	r3, [r1, #4]
 8001542:	6043      	str	r3, [r0, #4]
 8001544:	688b      	ldr	r3, [r1, #8]
 8001546:	6083      	str	r3, [r0, #8]
 8001548:	68cb      	ldr	r3, [r1, #12]
 800154a:	60c3      	str	r3, [r0, #12]
 800154c:	3010      	adds	r0, #16
 800154e:	3110      	adds	r1, #16
 8001550:	3a10      	subs	r2, #16
 8001552:	d2f3      	bcs.n	800153c <memcpy+0x5c>
 8001554:	320c      	adds	r2, #12
 8001556:	d305      	bcc.n	8001564 <memcpy+0x84>
 8001558:	f851 3b04 	ldr.w	r3, [r1], #4
 800155c:	f840 3b04 	str.w	r3, [r0], #4
 8001560:	3a04      	subs	r2, #4
 8001562:	d2f9      	bcs.n	8001558 <memcpy+0x78>
 8001564:	3204      	adds	r2, #4
 8001566:	d008      	beq.n	800157a <memcpy+0x9a>
 8001568:	07d2      	lsls	r2, r2, #31
 800156a:	bf1c      	itt	ne
 800156c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001570:	f800 3b01 	strbne.w	r3, [r0], #1
 8001574:	d301      	bcc.n	800157a <memcpy+0x9a>
 8001576:	880b      	ldrh	r3, [r1, #0]
 8001578:	8003      	strh	r3, [r0, #0]
 800157a:	4660      	mov	r0, ip
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2a08      	cmp	r2, #8
 8001582:	d313      	bcc.n	80015ac <memcpy+0xcc>
 8001584:	078b      	lsls	r3, r1, #30
 8001586:	d0b1      	beq.n	80014ec <memcpy+0xc>
 8001588:	f010 0303 	ands.w	r3, r0, #3
 800158c:	d0ae      	beq.n	80014ec <memcpy+0xc>
 800158e:	f1c3 0304 	rsb	r3, r3, #4
 8001592:	1ad2      	subs	r2, r2, r3
 8001594:	07db      	lsls	r3, r3, #31
 8001596:	bf1c      	itt	ne
 8001598:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800159c:	f800 3b01 	strbne.w	r3, [r0], #1
 80015a0:	d3a4      	bcc.n	80014ec <memcpy+0xc>
 80015a2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80015a6:	f820 3b02 	strh.w	r3, [r0], #2
 80015aa:	e79f      	b.n	80014ec <memcpy+0xc>
 80015ac:	3a04      	subs	r2, #4
 80015ae:	d3d9      	bcc.n	8001564 <memcpy+0x84>
 80015b0:	3a01      	subs	r2, #1
 80015b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015b6:	f800 3b01 	strb.w	r3, [r0], #1
 80015ba:	d2f9      	bcs.n	80015b0 <memcpy+0xd0>
 80015bc:	780b      	ldrb	r3, [r1, #0]
 80015be:	7003      	strb	r3, [r0, #0]
 80015c0:	784b      	ldrb	r3, [r1, #1]
 80015c2:	7043      	strb	r3, [r0, #1]
 80015c4:	788b      	ldrb	r3, [r1, #2]
 80015c6:	7083      	strb	r3, [r0, #2]
 80015c8:	4660      	mov	r0, ip
 80015ca:	4770      	bx	lr
 80015cc:	0000      	movs	r0, r0
	...

080015d0 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
	...

080015e0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
	...

080015f0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80015f0:	e7fe      	b.n	80015f0 <__default_exit>
 80015f2:	bf00      	nop
	...

08001600 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001600:	b084      	sub	sp, #16
#if CRT0_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <__init_ram_areas+0x5c>)
 8001604:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8001606:	9b03      	ldr	r3, [sp, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 800160c:	9b03      	ldr	r3, [sp, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	e009      	b.n	8001628 <__init_ram_areas+0x28>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8001614:	9b02      	ldr	r3, [sp, #8]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	9b01      	ldr	r3, [sp, #4]
 800161a:	601a      	str	r2, [r3, #0]
      p++;
 800161c:	9b01      	ldr	r3, [sp, #4]
 800161e:	3304      	adds	r3, #4
 8001620:	9301      	str	r3, [sp, #4]
      tp++;
 8001622:	9b02      	ldr	r3, [sp, #8]
 8001624:	3304      	adds	r3, #4
 8001626:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 8001628:	9b03      	ldr	r3, [sp, #12]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	9a01      	ldr	r2, [sp, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	d3f0      	bcc.n	8001614 <__init_ram_areas+0x14>
 8001632:	e005      	b.n	8001640 <__init_ram_areas+0x40>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
      p++;
 800163a:	9b01      	ldr	r3, [sp, #4]
 800163c:	3304      	adds	r3, #4
 800163e:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 8001640:	9b03      	ldr	r3, [sp, #12]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	9a01      	ldr	r2, [sp, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	d3f4      	bcc.n	8001634 <__init_ram_areas+0x34>
    }
    rap++;
 800164a:	9b03      	ldr	r3, [sp, #12]
 800164c:	3310      	adds	r3, #16
 800164e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8001650:	9b03      	ldr	r3, [sp, #12]
 8001652:	4a03      	ldr	r2, [pc, #12]	; (8001660 <__init_ram_areas+0x60>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d3d6      	bcc.n	8001606 <__init_ram_areas+0x6>
     for self-modifying code.*/
  SCB_CleanDCache();
  SCB_InvalidateICache();
#endif
#endif
}
 8001658:	b004      	add	sp, #16
 800165a:	4770      	bx	lr
 800165c:	0800a598 	.word	0x0800a598
 8001660:	0800a618 	.word	0x0800a618
	...

08001670 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
	...

08001680 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001680:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8001682:	f7ff fff5 	bl	8001670 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8001686:	f003 fa83 	bl	8004b90 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
 800168a:	4809      	ldr	r0, [pc, #36]	; (80016b0 <halInit+0x30>)
 800168c:	f003 fcb8 	bl	8005000 <_pal_lld_init>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 8001690:	f001 f876 	bl	8002780 <i2cInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 8001694:	f001 f9ec 	bl	8002a70 <pwmInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8001698:	f001 fbaa 	bl	8002df0 <sdInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800169c:	f002 fb18 	bl	8003cd0 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 80016a0:	f001 fe46 	bl	8003330 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80016a4:	f005 fe14 	bl	80072d0 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 80016a8:	f000 f80a 	bl	80016c0 <stInit>
#endif
}
 80016ac:	bd08      	pop	{r3, pc}
 80016ae:	bf00      	nop
 80016b0:	0800a96c 	.word	0x0800a96c
	...

080016c0 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 80016c0:	b508      	push	{r3, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
 80016c2:	f004 fca5 	bl	8006010 <st_lld_init>
}
 80016c6:	bd08      	pop	{r3, pc}
	...

080016d0 <chSysLock.lto_priv.0>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to disabling interrupts.
 *
 * @special
 */
static inline void chSysLock(void) {
 80016d0:	b500      	push	{lr}
 80016d2:	b083      	sub	sp, #12
 80016d4:	2330      	movs	r3, #48	; 0x30
 80016d6:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80016d8:	9b01      	ldr	r3, [sp, #4]
 80016da:	f383 8811 	msr	BASEPRI, r3

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
 80016de:	f005 fe7f 	bl	80073e0 <__dbg_check_lock>
}
 80016e2:	b003      	add	sp, #12
 80016e4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080016f0 <chSysUnlock.lto_priv.0>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to enabling interrupts.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 80016f0:	b500      	push	{lr}
 80016f2:	b083      	sub	sp, #12

  __dbg_check_unlock();
 80016f4:	f005 fe9c 	bl	8007430 <__dbg_check_unlock>
 80016f8:	2300      	movs	r3, #0
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	9b01      	ldr	r3, [sp, #4]
 80016fe:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
 8001702:	b003      	add	sp, #12
 8001704:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001710 <osalSysLock.lto_priv.0>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8001710:	b508      	push	{r3, lr}

  chSysLock();
 8001712:	f7ff ffdd 	bl	80016d0 <chSysLock.lto_priv.0>
}
 8001716:	bd08      	pop	{r3, pc}
	...

08001720 <osalSysUnlock.lto_priv.0>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8001720:	b508      	push	{r3, lr}

  chSysUnlock();
 8001722:	f7ff ffe5 	bl	80016f0 <chSysUnlock.lto_priv.0>
}
 8001726:	bd08      	pop	{r3, pc}
	...

08001730 <osalThreadQueueObjectInit.lto_priv.0>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8001730:	b500      	push	{lr}
 8001732:	b083      	sub	sp, #12
 8001734:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 8001736:	9801      	ldr	r0, [sp, #4]
 8001738:	f006 ff82 	bl	8008640 <chThdQueueObjectInit>
}
 800173c:	b003      	add	sp, #12
 800173e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001742:	bf00      	nop
	...

08001750 <osalThreadEnqueueTimeoutS.lto_priv.0>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 8001750:	b500      	push	{lr}
 8001752:	b083      	sub	sp, #12
 8001754:	9001      	str	r0, [sp, #4]
 8001756:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 8001758:	9900      	ldr	r1, [sp, #0]
 800175a:	9801      	ldr	r0, [sp, #4]
 800175c:	f006 ff88 	bl	8008670 <chThdEnqueueTimeoutS>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	b003      	add	sp, #12
 8001766:	f85d fb04 	ldr.w	pc, [sp], #4
 800176a:	bf00      	nop
 800176c:	0000      	movs	r0, r0
	...

08001770 <osalThreadDequeueNextI.lto_priv.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001770:	b500      	push	{lr}
 8001772:	b083      	sub	sp, #12
 8001774:	9001      	str	r0, [sp, #4]
 8001776:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 8001778:	9900      	ldr	r1, [sp, #0]
 800177a:	9801      	ldr	r0, [sp, #4]
 800177c:	f006 ff98 	bl	80086b0 <chThdDequeueNextI>
}
 8001780:	b003      	add	sp, #12
 8001782:	f85d fb04 	ldr.w	pc, [sp], #4
 8001786:	bf00      	nop
	...

08001790 <osalThreadDequeueAllI.lto_priv.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001790:	b500      	push	{lr}
 8001792:	b083      	sub	sp, #12
 8001794:	9001      	str	r0, [sp, #4]
 8001796:	9100      	str	r1, [sp, #0]

  chThdDequeueAllI(tqp, msg);
 8001798:	9900      	ldr	r1, [sp, #0]
 800179a:	9801      	ldr	r0, [sp, #4]
 800179c:	f006 ffa0 	bl	80086e0 <chThdDequeueAllI>
}
 80017a0:	b003      	add	sp, #12
 80017a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80017a6:	bf00      	nop
	...

080017b0 <ibqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 80017b0:	b500      	push	{lr}
 80017b2:	b085      	sub	sp, #20
 80017b4:	9003      	str	r0, [sp, #12]
 80017b6:	9201      	str	r2, [sp, #4]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	460b      	mov	r3, r1
 80017bc:	f88d 300b 	strb.w	r3, [sp, #11]

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
 80017c0:	9b03      	ldr	r3, [sp, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bf0c      	ite	eq
 80017c6:	2301      	moveq	r3, #1
 80017c8:	2300      	movne	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <ibqObjectInit+0x30>
 80017d0:	9b01      	ldr	r3, [sp, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf0c      	ite	eq
 80017d6:	2301      	moveq	r3, #1
 80017d8:	2300      	movne	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <ibqObjectInit+0x34>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <ibqObjectInit+0x36>
 80017e4:	2300      	movs	r3, #0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <ibqObjectInit+0x4a>
 80017ea:	9b00      	ldr	r3, [sp, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	bf94      	ite	ls
 80017f0:	2301      	movls	r3, #1
 80017f2:	2300      	movhi	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <ibqObjectInit+0x50>
 80017fa:	481b      	ldr	r0, [pc, #108]	; (8001868 <ibqObjectInit+0xb8>)
 80017fc:	f005 fdd8 	bl	80073b0 <chSysHalt>

  osalThreadQueueObjectInit(&ibqp->waiting);
 8001800:	9b03      	ldr	r3, [sp, #12]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff94 	bl	8001730 <osalThreadQueueObjectInit.lto_priv.0>
  ibqp->suspended = suspended;
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800180e:	721a      	strb	r2, [r3, #8]
  ibqp->bcounter  = 0;
 8001810:	9b03      	ldr	r3, [sp, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  ibqp->brdptr    = bp;
 8001816:	9b03      	ldr	r3, [sp, #12]
 8001818:	9a01      	ldr	r2, [sp, #4]
 800181a:	615a      	str	r2, [r3, #20]
  ibqp->bwrptr    = bp;
 800181c:	9b03      	ldr	r3, [sp, #12]
 800181e:	9a01      	ldr	r2, [sp, #4]
 8001820:	611a      	str	r2, [r3, #16]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8001822:	9b00      	ldr	r3, [sp, #0]
 8001824:	3304      	adds	r3, #4
 8001826:	9a06      	ldr	r2, [sp, #24]
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	9a01      	ldr	r2, [sp, #4]
 800182e:	441a      	add	r2, r3
 8001830:	9b03      	ldr	r3, [sp, #12]
 8001832:	619a      	str	r2, [r3, #24]
  ibqp->bsize     = size + sizeof (size_t);
 8001834:	9b00      	ldr	r3, [sp, #0]
 8001836:	1d1a      	adds	r2, r3, #4
 8001838:	9b03      	ldr	r3, [sp, #12]
 800183a:	61da      	str	r2, [r3, #28]
  ibqp->bn        = n;
 800183c:	9b03      	ldr	r3, [sp, #12]
 800183e:	9a06      	ldr	r2, [sp, #24]
 8001840:	621a      	str	r2, [r3, #32]
  ibqp->buffers   = bp;
 8001842:	9b03      	ldr	r3, [sp, #12]
 8001844:	9a01      	ldr	r2, [sp, #4]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
  ibqp->ptr       = NULL;
 8001848:	9b03      	ldr	r3, [sp, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
  ibqp->top       = NULL;
 800184e:	9b03      	ldr	r3, [sp, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
  ibqp->notify    = infy;
 8001854:	9b03      	ldr	r3, [sp, #12]
 8001856:	9a07      	ldr	r2, [sp, #28]
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
  ibqp->link      = link;
 800185a:	9b03      	ldr	r3, [sp, #12]
 800185c:	9a08      	ldr	r2, [sp, #32]
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001860:	b005      	add	sp, #20
 8001862:	f85d fb04 	ldr.w	pc, [sp], #4
 8001866:	bf00      	nop
 8001868:	0800a618 	.word	0x0800a618
 800186c:	00000000 	.word	0x00000000

08001870 <ibqResetI>:
 *
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 *
 * @iclass
 */
void ibqResetI(input_buffers_queue_t *ibqp) {
 8001870:	b500      	push	{lr}
 8001872:	b083      	sub	sp, #12
 8001874:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
 8001876:	f005 febb 	bl	80075f0 <chDbgCheckClassI>

  ibqp->bcounter  = 0;
 800187a:	9b01      	ldr	r3, [sp, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
  ibqp->brdptr    = ibqp->buffers;
 8001880:	9b01      	ldr	r3, [sp, #4]
 8001882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001884:	9b01      	ldr	r3, [sp, #4]
 8001886:	615a      	str	r2, [r3, #20]
  ibqp->bwrptr    = ibqp->buffers;
 8001888:	9b01      	ldr	r3, [sp, #4]
 800188a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188c:	9b01      	ldr	r3, [sp, #4]
 800188e:	611a      	str	r2, [r3, #16]
  ibqp->ptr       = NULL;
 8001890:	9b01      	ldr	r3, [sp, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
  ibqp->top       = NULL;
 8001896:	9b01      	ldr	r3, [sp, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 800189c:	9b01      	ldr	r3, [sp, #4]
 800189e:	f06f 0101 	mvn.w	r1, #1
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff74 	bl	8001790 <osalThreadDequeueAllI.lto_priv.0>
}
 80018a8:	b003      	add	sp, #12
 80018aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80018ae:	bf00      	nop

080018b0 <ibqGetEmptyBufferI>:
 * @return              A pointer to the next buffer to be filled.
 * @retval NULL         if the queue is full.
 *
 * @iclass
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 80018b0:	b500      	push	{lr}
 80018b2:	b083      	sub	sp, #12
 80018b4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
 80018b6:	f005 fe9b 	bl	80075f0 <chDbgCheckClassI>

  if (ibqIsFullI(ibqp)) {
 80018ba:	9b01      	ldr	r3, [sp, #4]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	9b01      	ldr	r3, [sp, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d105      	bne.n	80018d2 <ibqGetEmptyBufferI+0x22>
 80018c6:	9b01      	ldr	r3, [sp, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <ibqGetEmptyBufferI+0x22>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <ibqGetEmptyBufferI+0x24>
 80018d2:	2300      	movs	r3, #0
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <ibqGetEmptyBufferI+0x32>
    return NULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	e002      	b.n	80018e8 <ibqGetEmptyBufferI+0x38>
  }

  return ibqp->bwrptr + sizeof (size_t);
 80018e2:	9b01      	ldr	r3, [sp, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	3304      	adds	r3, #4
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	b003      	add	sp, #12
 80018ec:	f85d fb04 	ldr.w	pc, [sp], #4

080018f0 <ibqPostFullBufferI>:
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 80018f0:	b500      	push	{lr}
 80018f2:	b083      	sub	sp, #12
 80018f4:	9001      	str	r0, [sp, #4]
 80018f6:	9100      	str	r1, [sp, #0]

  osalDbgCheckClassI();
 80018f8:	f005 fe7a 	bl	80075f0 <chDbgCheckClassI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 80018fc:	9b00      	ldr	r3, [sp, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10a      	bne.n	8001922 <ibqPostFullBufferI+0x32>
 800190c:	9b01      	ldr	r3, [sp, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	3b04      	subs	r3, #4
 8001912:	9a00      	ldr	r2, [sp, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	bf8c      	ite	hi
 8001918:	2301      	movhi	r3, #1
 800191a:	2300      	movls	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <ibqPostFullBufferI+0x38>
 8001922:	4812      	ldr	r0, [pc, #72]	; (800196c <ibqPostFullBufferI+0x7c>)
 8001924:	f005 fd44 	bl	80073b0 <chSysHalt>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)(void *)ibqp->bwrptr) = size;
 8001928:	9b01      	ldr	r3, [sp, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	9a00      	ldr	r2, [sp, #0]
 800192e:	601a      	str	r2, [r3, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001930:	9b01      	ldr	r3, [sp, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	9b01      	ldr	r3, [sp, #4]
 8001938:	60da      	str	r2, [r3, #12]
  ibqp->bwrptr += ibqp->bsize;
 800193a:	9b01      	ldr	r3, [sp, #4]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	9b01      	ldr	r3, [sp, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	441a      	add	r2, r3
 8001944:	9b01      	ldr	r3, [sp, #4]
 8001946:	611a      	str	r2, [r3, #16]
  if (ibqp->bwrptr >= ibqp->btop) {
 8001948:	9b01      	ldr	r3, [sp, #4]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	9b01      	ldr	r3, [sp, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	429a      	cmp	r2, r3
 8001952:	d303      	bcc.n	800195c <ibqPostFullBufferI+0x6c>
    ibqp->bwrptr = ibqp->buffers;
 8001954:	9b01      	ldr	r3, [sp, #4]
 8001956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	611a      	str	r2, [r3, #16]
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 800195c:	9b01      	ldr	r3, [sp, #4]
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff05 	bl	8001770 <osalThreadDequeueNextI.lto_priv.0>
}
 8001966:	b003      	add	sp, #12
 8001968:	f85d fb04 	ldr.w	pc, [sp], #4
 800196c:	0800a628 	.word	0x0800a628

08001970 <ibqGetFullBufferTimeoutS>:
   *                      suspended state.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 sysinterval_t timeout) {
 8001970:	b500      	push	{lr}
 8001972:	b085      	sub	sp, #20
 8001974:	9001      	str	r0, [sp, #4]
 8001976:	9100      	str	r1, [sp, #0]

  osalDbgCheckClassS();
 8001978:	f005 fe5a 	bl	8007630 <chDbgCheckClassS>
 800197c:	e011      	b.n	80019a2 <ibqGetFullBufferTimeoutS+0x32>

  while (ibqIsEmptyI(ibqp)) {
    if (ibqp->suspended) {
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	7a1b      	ldrb	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <ibqGetFullBufferTimeoutS+0x1c>
      return MSG_RESET;
 8001986:	f06f 0301 	mvn.w	r3, #1
 800198a:	e01c      	b.n	80019c6 <ibqGetFullBufferTimeoutS+0x56>
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	9900      	ldr	r1, [sp, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fedd 	bl	8001750 <osalThreadEnqueueTimeoutS.lto_priv.0>
 8001996:	9003      	str	r0, [sp, #12]
    if (msg < MSG_OK) {
 8001998:	9b03      	ldr	r3, [sp, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da01      	bge.n	80019a2 <ibqGetFullBufferTimeoutS+0x32>
       return msg;
 800199e:	9b03      	ldr	r3, [sp, #12]
 80019a0:	e011      	b.n	80019c6 <ibqGetFullBufferTimeoutS+0x56>
  while (ibqIsEmptyI(ibqp)) {
 80019a2:	9b01      	ldr	r3, [sp, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0e9      	beq.n	800197e <ibqGetFullBufferTimeoutS+0xe>
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80019aa:	9b01      	ldr	r3, [sp, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	1d1a      	adds	r2, r3, #4
 80019b0:	9b01      	ldr	r3, [sp, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)(void *)ibqp->brdptr);
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b8:	9b01      	ldr	r3, [sp, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	441a      	add	r2, r3
 80019c0:	9b01      	ldr	r3, [sp, #4]
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c

  return MSG_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	b005      	add	sp, #20
 80019ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ce:	bf00      	nop

080019d0 <ibqReleaseEmptyBufferS>:
   *
   * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
   *
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 80019d0:	b500      	push	{lr}
 80019d2:	b083      	sub	sp, #12
 80019d4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassS();
 80019d6:	f005 fe2b 	bl	8007630 <chDbgCheckClassS>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 80019da:	9b01      	ldr	r3, [sp, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	1e5a      	subs	r2, r3, #1
 80019e0:	9b01      	ldr	r3, [sp, #4]
 80019e2:	60da      	str	r2, [r3, #12]
  ibqp->brdptr += ibqp->bsize;
 80019e4:	9b01      	ldr	r3, [sp, #4]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	9b01      	ldr	r3, [sp, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	441a      	add	r2, r3
 80019ee:	9b01      	ldr	r3, [sp, #4]
 80019f0:	615a      	str	r2, [r3, #20]
  if (ibqp->brdptr >= ibqp->btop) {
 80019f2:	9b01      	ldr	r3, [sp, #4]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	9b01      	ldr	r3, [sp, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d303      	bcc.n	8001a06 <ibqReleaseEmptyBufferS+0x36>
    ibqp->brdptr = ibqp->buffers;
 80019fe:	9b01      	ldr	r3, [sp, #4]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a02:	9b01      	ldr	r3, [sp, #4]
 8001a04:	615a      	str	r2, [r3, #20]
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 8001a06:	9b01      	ldr	r3, [sp, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8001a0c:	9b01      	ldr	r3, [sp, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <ibqReleaseEmptyBufferS+0x4c>
    ibqp->notify(ibqp);
 8001a14:	9b01      	ldr	r3, [sp, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	9801      	ldr	r0, [sp, #4]
 8001a1a:	4798      	blx	r3
  }
}
 8001a1c:	b003      	add	sp, #12
 8001a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a22:	bf00      	nop
	...

08001a30 <ibqGetTimeout>:
 * @retval MSG_RESET    if the queue has been reset or has been put in
 *                      suspended state.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8001a30:	b500      	push	{lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	9001      	str	r0, [sp, #4]
 8001a36:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalSysLock();
 8001a38:	f7ff fe6a 	bl	8001710 <osalSysLock.lto_priv.0>

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 8001a3c:	9b01      	ldr	r3, [sp, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10b      	bne.n	8001a5c <ibqGetTimeout+0x2c>
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001a44:	9900      	ldr	r1, [sp, #0]
 8001a46:	9801      	ldr	r0, [sp, #4]
 8001a48:	f7ff ff92 	bl	8001970 <ibqGetFullBufferTimeoutS>
 8001a4c:	9003      	str	r0, [sp, #12]
    if (msg != MSG_OK) {
 8001a4e:	9b03      	ldr	r3, [sp, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <ibqGetTimeout+0x2c>
      osalSysUnlock();
 8001a54:	f7ff fe64 	bl	8001720 <osalSysUnlock.lto_priv.0>
      return msg;
 8001a58:	9b03      	ldr	r3, [sp, #12]
 8001a5a:	e014      	b.n	8001a86 <ibqGetTimeout+0x56>
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 8001a5c:	9b01      	ldr	r3, [sp, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	9303      	str	r3, [sp, #12]
  ibqp->ptr++;
 8001a64:	9b01      	ldr	r3, [sp, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8001a6e:	9b01      	ldr	r3, [sp, #4]
 8001a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d302      	bcc.n	8001a80 <ibqGetTimeout+0x50>
    ibqReleaseEmptyBufferS(ibqp);
 8001a7a:	9801      	ldr	r0, [sp, #4]
 8001a7c:	f7ff ffa8 	bl	80019d0 <ibqReleaseEmptyBufferS>
  }

  osalSysUnlock();
 8001a80:	f7ff fe4e 	bl	8001720 <osalSysUnlock.lto_priv.0>
  return msg;
 8001a84:	9b03      	ldr	r3, [sp, #12]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	b005      	add	sp, #20
 8001a8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a8e:	bf00      	nop

08001a90 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001a90:	b500      	push	{lr}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	9003      	str	r0, [sp, #12]
 8001a96:	9102      	str	r1, [sp, #8]
 8001a98:	9201      	str	r2, [sp, #4]
 8001a9a:	9300      	str	r3, [sp, #0]
  size_t r = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9307      	str	r3, [sp, #28]

  osalDbgCheck(n > 0U);
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <ibqReadTimeout+0x26>
 8001ab0:	4834      	ldr	r0, [pc, #208]	; (8001b84 <ibqReadTimeout+0xf4>)
 8001ab2:	f005 fc7d 	bl	80073b0 <chSysHalt>

  osalSysLock();
 8001ab6:	f7ff fe2b 	bl	8001710 <osalSysLock.lto_priv.0>

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8001aba:	9b03      	ldr	r3, [sp, #12]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10b      	bne.n	8001ada <ibqReadTimeout+0x4a>
      msg_t msg;

      /* Getting a data buffer using the specified timeout.*/
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001ac2:	9900      	ldr	r1, [sp, #0]
 8001ac4:	9803      	ldr	r0, [sp, #12]
 8001ac6:	f7ff ff53 	bl	8001970 <ibqGetFullBufferTimeoutS>
 8001aca:	9005      	str	r0, [sp, #20]

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001acc:	9b05      	ldr	r3, [sp, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <ibqReadTimeout+0x4a>
        osalSysUnlock();
 8001ad2:	f7ff fe25 	bl	8001720 <osalSysUnlock.lto_priv.0>
        return r;
 8001ad6:	9b07      	ldr	r3, [sp, #28]
 8001ad8:	e050      	b.n	8001b7c <ibqReadTimeout+0xec>
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8001ada:	9b03      	ldr	r3, [sp, #12]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	461a      	mov	r2, r3
 8001ae0:	9b03      	ldr	r3, [sp, #12]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	9306      	str	r3, [sp, #24]
    if (size > (n - r)) {
 8001ae8:	9a01      	ldr	r2, [sp, #4]
 8001aea:	9b07      	ldr	r3, [sp, #28]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	9a06      	ldr	r2, [sp, #24]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d903      	bls.n	8001afc <ibqReadTimeout+0x6c>
      size = n - r;
 8001af4:	9a01      	ldr	r2, [sp, #4]
 8001af6:	9b07      	ldr	r3, [sp, #28]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	9306      	str	r3, [sp, #24]
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8001afc:	9b06      	ldr	r3, [sp, #24]
 8001afe:	2b40      	cmp	r3, #64	; 0x40
 8001b00:	d913      	bls.n	8001b2a <ibqReadTimeout+0x9a>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8001b02:	9b03      	ldr	r3, [sp, #12]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	2240      	movs	r2, #64	; 0x40
 8001b08:	4619      	mov	r1, r3
 8001b0a:	9802      	ldr	r0, [sp, #8]
 8001b0c:	f7ff fce8 	bl	80014e0 <memcpy>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8001b10:	9b02      	ldr	r3, [sp, #8]
 8001b12:	3340      	adds	r3, #64	; 0x40
 8001b14:	9302      	str	r3, [sp, #8]
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8001b16:	9b03      	ldr	r3, [sp, #12]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001b1e:	9b03      	ldr	r3, [sp, #12]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 8001b22:	9b07      	ldr	r3, [sp, #28]
 8001b24:	3340      	adds	r3, #64	; 0x40
 8001b26:	9307      	str	r3, [sp, #28]
 8001b28:	e014      	b.n	8001b54 <ibqReadTimeout+0xc4>
    }
    else {
      memcpy(bp, ibqp->ptr, size);
 8001b2a:	9b03      	ldr	r3, [sp, #12]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	9a06      	ldr	r2, [sp, #24]
 8001b30:	4619      	mov	r1, r3
 8001b32:	9802      	ldr	r0, [sp, #8]
 8001b34:	f7ff fcd4 	bl	80014e0 <memcpy>
      bp        += size;
 8001b38:	9a02      	ldr	r2, [sp, #8]
 8001b3a:	9b06      	ldr	r3, [sp, #24]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	9302      	str	r3, [sp, #8]
      ibqp->ptr += size;
 8001b40:	9b03      	ldr	r3, [sp, #12]
 8001b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b44:	9b06      	ldr	r3, [sp, #24]
 8001b46:	441a      	add	r2, r3
 8001b48:	9b03      	ldr	r3, [sp, #12]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
      r         += size;
 8001b4c:	9a07      	ldr	r2, [sp, #28]
 8001b4e:	9b06      	ldr	r3, [sp, #24]
 8001b50:	4413      	add	r3, r2
 8001b52:	9307      	str	r3, [sp, #28]
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8001b54:	9b03      	ldr	r3, [sp, #12]
 8001b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b58:	9b03      	ldr	r3, [sp, #12]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d302      	bcc.n	8001b66 <ibqReadTimeout+0xd6>
      ibqReleaseEmptyBufferS(ibqp);
 8001b60:	9803      	ldr	r0, [sp, #12]
 8001b62:	f7ff ff35 	bl	80019d0 <ibqReleaseEmptyBufferS>
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
 8001b66:	f7ff fddb 	bl	8001720 <osalSysUnlock.lto_priv.0>
    if (r >= n) {
 8001b6a:	9a07      	ldr	r2, [sp, #28]
 8001b6c:	9b01      	ldr	r3, [sp, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d301      	bcc.n	8001b76 <ibqReadTimeout+0xe6>
      return r;
 8001b72:	9b07      	ldr	r3, [sp, #28]
 8001b74:	e002      	b.n	8001b7c <ibqReadTimeout+0xec>
    }
    osalSysLock();
 8001b76:	f7ff fdcb 	bl	8001710 <osalSysLock.lto_priv.0>
 8001b7a:	e79e      	b.n	8001aba <ibqReadTimeout+0x2a>
  }
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	b009      	add	sp, #36	; 0x24
 8001b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b84:	0800a63c 	.word	0x0800a63c
	...

08001b90 <obqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 8001b90:	b500      	push	{lr}
 8001b92:	b085      	sub	sp, #20
 8001b94:	9003      	str	r0, [sp, #12]
 8001b96:	9201      	str	r2, [sp, #4]
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	f88d 300b 	strb.w	r3, [sp, #11]

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 8001ba0:	9b03      	ldr	r3, [sp, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2301      	moveq	r3, #1
 8001ba8:	2300      	movne	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <obqObjectInit+0x30>
 8001bb0:	9b01      	ldr	r3, [sp, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2301      	moveq	r3, #1
 8001bb8:	2300      	movne	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <obqObjectInit+0x34>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <obqObjectInit+0x36>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d107      	bne.n	8001bda <obqObjectInit+0x4a>
 8001bca:	9b00      	ldr	r3, [sp, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	bf94      	ite	ls
 8001bd0:	2301      	movls	r3, #1
 8001bd2:	2300      	movhi	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <obqObjectInit+0x50>
 8001bda:	481b      	ldr	r0, [pc, #108]	; (8001c48 <obqObjectInit+0xb8>)
 8001bdc:	f005 fbe8 	bl	80073b0 <chSysHalt>

  osalThreadQueueObjectInit(&obqp->waiting);
 8001be0:	9b03      	ldr	r3, [sp, #12]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fda4 	bl	8001730 <osalThreadQueueObjectInit.lto_priv.0>
  obqp->suspended = suspended;
 8001be8:	9b03      	ldr	r3, [sp, #12]
 8001bea:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001bee:	721a      	strb	r2, [r3, #8]
  obqp->bcounter  = n;
 8001bf0:	9b03      	ldr	r3, [sp, #12]
 8001bf2:	9a06      	ldr	r2, [sp, #24]
 8001bf4:	60da      	str	r2, [r3, #12]
  obqp->brdptr    = bp;
 8001bf6:	9b03      	ldr	r3, [sp, #12]
 8001bf8:	9a01      	ldr	r2, [sp, #4]
 8001bfa:	615a      	str	r2, [r3, #20]
  obqp->bwrptr    = bp;
 8001bfc:	9b03      	ldr	r3, [sp, #12]
 8001bfe:	9a01      	ldr	r2, [sp, #4]
 8001c00:	611a      	str	r2, [r3, #16]
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8001c02:	9b00      	ldr	r3, [sp, #0]
 8001c04:	3304      	adds	r3, #4
 8001c06:	9a06      	ldr	r2, [sp, #24]
 8001c08:	fb02 f303 	mul.w	r3, r2, r3
 8001c0c:	9a01      	ldr	r2, [sp, #4]
 8001c0e:	441a      	add	r2, r3
 8001c10:	9b03      	ldr	r3, [sp, #12]
 8001c12:	619a      	str	r2, [r3, #24]
  obqp->bsize     = size + sizeof (size_t);
 8001c14:	9b00      	ldr	r3, [sp, #0]
 8001c16:	1d1a      	adds	r2, r3, #4
 8001c18:	9b03      	ldr	r3, [sp, #12]
 8001c1a:	61da      	str	r2, [r3, #28]
  obqp->bn        = n;
 8001c1c:	9b03      	ldr	r3, [sp, #12]
 8001c1e:	9a06      	ldr	r2, [sp, #24]
 8001c20:	621a      	str	r2, [r3, #32]
  obqp->buffers   = bp;
 8001c22:	9b03      	ldr	r3, [sp, #12]
 8001c24:	9a01      	ldr	r2, [sp, #4]
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
  obqp->ptr       = NULL;
 8001c28:	9b03      	ldr	r3, [sp, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->top       = NULL;
 8001c2e:	9b03      	ldr	r3, [sp, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
  obqp->notify    = onfy;
 8001c34:	9b03      	ldr	r3, [sp, #12]
 8001c36:	9a07      	ldr	r2, [sp, #28]
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
  obqp->link      = link;
 8001c3a:	9b03      	ldr	r3, [sp, #12]
 8001c3c:	9a08      	ldr	r2, [sp, #32]
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c40:	b005      	add	sp, #20
 8001c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c46:	bf00      	nop
 8001c48:	0800a64c 	.word	0x0800a64c
 8001c4c:	00000000 	.word	0x00000000

08001c50 <obqResetI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 8001c50:	b500      	push	{lr}
 8001c52:	b083      	sub	sp, #12
 8001c54:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
 8001c56:	f005 fccb 	bl	80075f0 <chDbgCheckClassI>

  obqp->bcounter  = bqSizeX(obqp);
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	6a1a      	ldr	r2, [r3, #32]
 8001c5e:	9b01      	ldr	r3, [sp, #4]
 8001c60:	60da      	str	r2, [r3, #12]
  obqp->brdptr    = obqp->buffers;
 8001c62:	9b01      	ldr	r3, [sp, #4]
 8001c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c66:	9b01      	ldr	r3, [sp, #4]
 8001c68:	615a      	str	r2, [r3, #20]
  obqp->bwrptr    = obqp->buffers;
 8001c6a:	9b01      	ldr	r3, [sp, #4]
 8001c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c6e:	9b01      	ldr	r3, [sp, #4]
 8001c70:	611a      	str	r2, [r3, #16]
  obqp->ptr       = NULL;
 8001c72:	9b01      	ldr	r3, [sp, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->top       = NULL;
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 8001c7e:	9b01      	ldr	r3, [sp, #4]
 8001c80:	f06f 0101 	mvn.w	r1, #1
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fd83 	bl	8001790 <osalThreadDequeueAllI.lto_priv.0>
}
 8001c8a:	b003      	add	sp, #12
 8001c8c:	f85d fb04 	ldr.w	pc, [sp], #4

08001c90 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8001c90:	b500      	push	{lr}
 8001c92:	b083      	sub	sp, #12
 8001c94:	9001      	str	r0, [sp, #4]
 8001c96:	9100      	str	r1, [sp, #0]

  osalDbgCheckClassI();
 8001c98:	f005 fcaa 	bl	80075f0 <chDbgCheckClassI>

  if (obqIsEmptyI(obqp)) {
 8001c9c:	9b01      	ldr	r3, [sp, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	9b01      	ldr	r3, [sp, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d105      	bne.n	8001cb4 <obqGetFullBufferI+0x24>
 8001ca8:	9b01      	ldr	r3, [sp, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <obqGetFullBufferI+0x24>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <obqGetFullBufferI+0x26>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <obqGetFullBufferI+0x3a>
    *sizep = 0U;
 8001cc0:	9b00      	ldr	r3, [sp, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    return NULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e007      	b.n	8001cda <obqGetFullBufferI+0x4a>
  }

  /* Buffer size.*/
  *sizep = *((size_t *)(void *)obqp->brdptr);
 8001cca:	9b01      	ldr	r3, [sp, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	9b00      	ldr	r3, [sp, #0]
 8001cd2:	601a      	str	r2, [r3, #0]

  return obqp->brdptr + sizeof (size_t);
 8001cd4:	9b01      	ldr	r3, [sp, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	3304      	adds	r3, #4
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	b003      	add	sp, #12
 8001cde:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ce2:	bf00      	nop
	...

08001cf0 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8001cf0:	b500      	push	{lr}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
 8001cf6:	f005 fc7b 	bl	80075f0 <chDbgCheckClassI>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001cfa:	9b01      	ldr	r3, [sp, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	9b01      	ldr	r3, [sp, #4]
 8001d02:	60da      	str	r2, [r3, #12]
  obqp->brdptr += obqp->bsize;
 8001d04:	9b01      	ldr	r3, [sp, #4]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	9b01      	ldr	r3, [sp, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	441a      	add	r2, r3
 8001d0e:	9b01      	ldr	r3, [sp, #4]
 8001d10:	615a      	str	r2, [r3, #20]
  if (obqp->brdptr >= obqp->btop) {
 8001d12:	9b01      	ldr	r3, [sp, #4]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	9b01      	ldr	r3, [sp, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d303      	bcc.n	8001d26 <obqReleaseEmptyBufferI+0x36>
    obqp->brdptr = obqp->buffers;
 8001d1e:	9b01      	ldr	r3, [sp, #4]
 8001d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d22:	9b01      	ldr	r3, [sp, #4]
 8001d24:	615a      	str	r2, [r3, #20]
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 8001d26:	9b01      	ldr	r3, [sp, #4]
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fd20 	bl	8001770 <osalThreadDequeueNextI.lto_priv.0>
}
 8001d30:	b003      	add	sp, #12
 8001d32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d36:	bf00      	nop
	...

08001d40 <obqGetEmptyBufferTimeoutS>:
 *                      suspended state.
 *
 * @sclass
 */
msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                sysinterval_t timeout) {
 8001d40:	b500      	push	{lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	9001      	str	r0, [sp, #4]
 8001d46:	9100      	str	r1, [sp, #0]

  osalDbgCheckClassS();
 8001d48:	f005 fc72 	bl	8007630 <chDbgCheckClassS>
 8001d4c:	e011      	b.n	8001d72 <obqGetEmptyBufferTimeoutS+0x32>

  while (obqIsFullI(obqp)) {
    if (obqp->suspended) {
 8001d4e:	9b01      	ldr	r3, [sp, #4]
 8001d50:	7a1b      	ldrb	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <obqGetEmptyBufferTimeoutS+0x1c>
      return MSG_RESET;
 8001d56:	f06f 0301 	mvn.w	r3, #1
 8001d5a:	e01b      	b.n	8001d94 <obqGetEmptyBufferTimeoutS+0x54>
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 8001d5c:	9b01      	ldr	r3, [sp, #4]
 8001d5e:	9900      	ldr	r1, [sp, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fcf5 	bl	8001750 <osalThreadEnqueueTimeoutS.lto_priv.0>
 8001d66:	9003      	str	r0, [sp, #12]
    if (msg < MSG_OK) {
 8001d68:	9b03      	ldr	r3, [sp, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	da01      	bge.n	8001d72 <obqGetEmptyBufferTimeoutS+0x32>
      return msg;
 8001d6e:	9b03      	ldr	r3, [sp, #12]
 8001d70:	e010      	b.n	8001d94 <obqGetEmptyBufferTimeoutS+0x54>
  while (obqIsFullI(obqp)) {
 8001d72:	9b01      	ldr	r3, [sp, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0e9      	beq.n	8001d4e <obqGetEmptyBufferTimeoutS+0xe>
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001d7a:	9b01      	ldr	r3, [sp, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	1d1a      	adds	r2, r3, #4
 8001d80:	9b01      	ldr	r3, [sp, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001d84:	9b01      	ldr	r3, [sp, #4]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	9b01      	ldr	r3, [sp, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c

  return MSG_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	b005      	add	sp, #20
 8001d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d9c:	0000      	movs	r0, r0
	...

08001da0 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 8001da0:	b500      	push	{lr}
 8001da2:	b083      	sub	sp, #12
 8001da4:	9001      	str	r0, [sp, #4]
 8001da6:	9100      	str	r1, [sp, #0]

  osalDbgCheckClassS();
 8001da8:	f005 fc42 	bl	8007630 <chDbgCheckClassS>
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 8001dac:	9b00      	ldr	r3, [sp, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10a      	bne.n	8001dd2 <obqPostFullBufferS+0x32>
 8001dbc:	9b01      	ldr	r3, [sp, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	3b04      	subs	r3, #4
 8001dc2:	9a00      	ldr	r2, [sp, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	bf8c      	ite	hi
 8001dc8:	2301      	movhi	r3, #1
 8001dca:	2300      	movls	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <obqPostFullBufferS+0x38>
 8001dd2:	4815      	ldr	r0, [pc, #84]	; (8001e28 <obqPostFullBufferS+0x88>)
 8001dd4:	f005 faec 	bl	80073b0 <chSysHalt>
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)(void *)obqp->bwrptr) = size;
 8001dd8:	9b01      	ldr	r3, [sp, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	9a00      	ldr	r2, [sp, #0]
 8001dde:	601a      	str	r2, [r3, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001de0:	9b01      	ldr	r3, [sp, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	9b01      	ldr	r3, [sp, #4]
 8001de8:	60da      	str	r2, [r3, #12]
  obqp->bwrptr += obqp->bsize;
 8001dea:	9b01      	ldr	r3, [sp, #4]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	9b01      	ldr	r3, [sp, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	441a      	add	r2, r3
 8001df4:	9b01      	ldr	r3, [sp, #4]
 8001df6:	611a      	str	r2, [r3, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8001df8:	9b01      	ldr	r3, [sp, #4]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	9b01      	ldr	r3, [sp, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d303      	bcc.n	8001e0c <obqPostFullBufferS+0x6c>
    obqp->bwrptr = obqp->buffers;
 8001e04:	9b01      	ldr	r3, [sp, #4]
 8001e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e08:	9b01      	ldr	r3, [sp, #4]
 8001e0a:	611a      	str	r2, [r3, #16]
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8001e0c:	9b01      	ldr	r3, [sp, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001e12:	9b01      	ldr	r3, [sp, #4]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <obqPostFullBufferS+0x82>
    obqp->notify(obqp);
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	9801      	ldr	r0, [sp, #4]
 8001e20:	4798      	blx	r3
  }
}
 8001e22:	b003      	add	sp, #12
 8001e24:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e28:	0800a65c 	.word	0x0800a65c
 8001e2c:	00000000 	.word	0x00000000

08001e30 <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    sysinterval_t timeout) {
 8001e30:	b500      	push	{lr}
 8001e32:	b087      	sub	sp, #28
 8001e34:	9003      	str	r0, [sp, #12]
 8001e36:	460b      	mov	r3, r1
 8001e38:	9201      	str	r2, [sp, #4]
 8001e3a:	f88d 300b 	strb.w	r3, [sp, #11]
  msg_t msg;

  osalSysLock();
 8001e3e:	f7ff fc67 	bl	8001710 <osalSysLock.lto_priv.0>

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 8001e42:	9b03      	ldr	r3, [sp, #12]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10b      	bne.n	8001e62 <obqPutTimeout+0x32>
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001e4a:	9901      	ldr	r1, [sp, #4]
 8001e4c:	9803      	ldr	r0, [sp, #12]
 8001e4e:	f7ff ff77 	bl	8001d40 <obqGetEmptyBufferTimeoutS>
 8001e52:	9005      	str	r0, [sp, #20]
    if (msg != MSG_OK) {
 8001e54:	9b05      	ldr	r3, [sp, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <obqPutTimeout+0x32>
      osalSysUnlock();
 8001e5a:	f7ff fc61 	bl	8001720 <osalSysUnlock.lto_priv.0>
      return msg;
 8001e5e:	9b05      	ldr	r3, [sp, #20]
 8001e60:	e019      	b.n	8001e96 <obqPutTimeout+0x66>
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 8001e62:	9b03      	ldr	r3, [sp, #12]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001e6a:	701a      	strb	r2, [r3, #0]
  obqp->ptr++;
 8001e6c:	9b03      	ldr	r3, [sp, #12]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	9b03      	ldr	r3, [sp, #12]
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001e76:	9b03      	ldr	r3, [sp, #12]
 8001e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e7a:	9b03      	ldr	r3, [sp, #12]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d306      	bcc.n	8001e90 <obqPutTimeout+0x60>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001e82:	9b03      	ldr	r3, [sp, #12]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	3b04      	subs	r3, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	9803      	ldr	r0, [sp, #12]
 8001e8c:	f7ff ff88 	bl	8001da0 <obqPostFullBufferS>
  }

  osalSysUnlock();
 8001e90:	f7ff fc46 	bl	8001720 <osalSysUnlock.lto_priv.0>
  return MSG_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	b007      	add	sp, #28
 8001e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e9e:	bf00      	nop

08001ea0 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 8001ea0:	b500      	push	{lr}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	9003      	str	r0, [sp, #12]
 8001ea6:	9102      	str	r1, [sp, #8]
 8001ea8:	9201      	str	r2, [sp, #4]
 8001eaa:	9300      	str	r3, [sp, #0]
  size_t w = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	9307      	str	r3, [sp, #28]

  osalDbgCheck(n > 0U);
 8001eb0:	9b01      	ldr	r3, [sp, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <obqWriteTimeout+0x26>
 8001ec0:	4836      	ldr	r0, [pc, #216]	; (8001f9c <obqWriteTimeout+0xfc>)
 8001ec2:	f005 fa75 	bl	80073b0 <chSysHalt>

  osalSysLock();
 8001ec6:	f7ff fc23 	bl	8001710 <osalSysLock.lto_priv.0>

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001eca:	9b03      	ldr	r3, [sp, #12]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <obqWriteTimeout+0x4a>
      msg_t msg;

      /* Getting an empty buffer using the specified timeout.*/
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001ed2:	9900      	ldr	r1, [sp, #0]
 8001ed4:	9803      	ldr	r0, [sp, #12]
 8001ed6:	f7ff ff33 	bl	8001d40 <obqGetEmptyBufferTimeoutS>
 8001eda:	9005      	str	r0, [sp, #20]

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001edc:	9b05      	ldr	r3, [sp, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <obqWriteTimeout+0x4a>
        osalSysUnlock();
 8001ee2:	f7ff fc1d 	bl	8001720 <osalSysUnlock.lto_priv.0>
        return w;
 8001ee6:	9b07      	ldr	r3, [sp, #28]
 8001ee8:	e054      	b.n	8001f94 <obqWriteTimeout+0xf4>
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8001eea:	9b03      	ldr	r3, [sp, #12]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	461a      	mov	r2, r3
 8001ef0:	9b03      	ldr	r3, [sp, #12]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	9306      	str	r3, [sp, #24]
    if (size > (n - w)) {
 8001ef8:	9a01      	ldr	r2, [sp, #4]
 8001efa:	9b07      	ldr	r3, [sp, #28]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	9a06      	ldr	r2, [sp, #24]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d903      	bls.n	8001f0c <obqWriteTimeout+0x6c>
      size = n - w;
 8001f04:	9a01      	ldr	r2, [sp, #4]
 8001f06:	9b07      	ldr	r3, [sp, #28]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	9306      	str	r3, [sp, #24]
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8001f0c:	9b06      	ldr	r3, [sp, #24]
 8001f0e:	2b40      	cmp	r3, #64	; 0x40
 8001f10:	d913      	bls.n	8001f3a <obqWriteTimeout+0x9a>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8001f12:	9b03      	ldr	r3, [sp, #12]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	9902      	ldr	r1, [sp, #8]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fae0 	bl	80014e0 <memcpy>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8001f20:	9b02      	ldr	r3, [sp, #8]
 8001f22:	3340      	adds	r3, #64	; 0x40
 8001f24:	9302      	str	r3, [sp, #8]
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8001f26:	9b03      	ldr	r3, [sp, #12]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001f2e:	9b03      	ldr	r3, [sp, #12]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8001f32:	9b07      	ldr	r3, [sp, #28]
 8001f34:	3340      	adds	r3, #64	; 0x40
 8001f36:	9307      	str	r3, [sp, #28]
 8001f38:	e014      	b.n	8001f64 <obqWriteTimeout+0xc4>
    }
    else {
      memcpy(obqp->ptr, bp, size);
 8001f3a:	9b03      	ldr	r3, [sp, #12]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	9a06      	ldr	r2, [sp, #24]
 8001f40:	9902      	ldr	r1, [sp, #8]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff facc 	bl	80014e0 <memcpy>
      bp        += size;
 8001f48:	9a02      	ldr	r2, [sp, #8]
 8001f4a:	9b06      	ldr	r3, [sp, #24]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	9302      	str	r3, [sp, #8]
      obqp->ptr += size;
 8001f50:	9b03      	ldr	r3, [sp, #12]
 8001f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f54:	9b06      	ldr	r3, [sp, #24]
 8001f56:	441a      	add	r2, r3
 8001f58:	9b03      	ldr	r3, [sp, #12]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
      w         += size;
 8001f5c:	9a07      	ldr	r2, [sp, #28]
 8001f5e:	9b06      	ldr	r3, [sp, #24]
 8001f60:	4413      	add	r3, r2
 8001f62:	9307      	str	r3, [sp, #28]
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001f64:	9b03      	ldr	r3, [sp, #12]
 8001f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f68:	9b03      	ldr	r3, [sp, #12]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d306      	bcc.n	8001f7e <obqWriteTimeout+0xde>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001f70:	9b03      	ldr	r3, [sp, #12]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	3b04      	subs	r3, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	9803      	ldr	r0, [sp, #12]
 8001f7a:	f7ff ff11 	bl	8001da0 <obqPostFullBufferS>
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
 8001f7e:	f7ff fbcf 	bl	8001720 <osalSysUnlock.lto_priv.0>
    if (w >= n) {
 8001f82:	9a07      	ldr	r2, [sp, #28]
 8001f84:	9b01      	ldr	r3, [sp, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d301      	bcc.n	8001f8e <obqWriteTimeout+0xee>
      return w;
 8001f8a:	9b07      	ldr	r3, [sp, #28]
 8001f8c:	e002      	b.n	8001f94 <obqWriteTimeout+0xf4>
    }
    osalSysLock();
 8001f8e:	f7ff fbbf 	bl	8001710 <osalSysLock.lto_priv.0>
 8001f92:	e79a      	b.n	8001eca <obqWriteTimeout+0x2a>
  }
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	b009      	add	sp, #36	; 0x24
 8001f98:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f9c:	0800a670 	.word	0x0800a670

08001fa0 <obqTryFlushI>:
 * @retval false        if no new filled buffer has been posted to the queue.
 * @retval true         if a new filled buffer has been posted to the queue.
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 8001fa0:	b500      	push	{lr}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
 8001fa6:	f005 fb23 	bl	80075f0 <chDbgCheckClassI>

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001faa:	9b01      	ldr	r3, [sp, #4]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	9b01      	ldr	r3, [sp, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d105      	bne.n	8001fc2 <obqTryFlushI+0x22>
 8001fb6:	9b01      	ldr	r3, [sp, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <obqTryFlushI+0x22>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <obqTryFlushI+0x24>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d02d      	beq.n	800202a <obqTryFlushI+0x8a>
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d029      	beq.n	800202a <obqTryFlushI+0x8a>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8001fd6:	9b01      	ldr	r3, [sp, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	461a      	mov	r2, r3
 8001fdc:	9b01      	ldr	r3, [sp, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	9303      	str	r3, [sp, #12]

    if (size > 0U) {
 8001fe6:	9b03      	ldr	r3, [sp, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01e      	beq.n	800202a <obqTryFlushI+0x8a>

      /* Writing size field in the buffer.*/
      *((size_t *)(void *)obqp->bwrptr) = size;
 8001fec:	9b01      	ldr	r3, [sp, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	9a03      	ldr	r2, [sp, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001ff4:	9b01      	ldr	r3, [sp, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	1e5a      	subs	r2, r3, #1
 8001ffa:	9b01      	ldr	r3, [sp, #4]
 8001ffc:	60da      	str	r2, [r3, #12]
      obqp->bwrptr += obqp->bsize;
 8001ffe:	9b01      	ldr	r3, [sp, #4]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	9b01      	ldr	r3, [sp, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	441a      	add	r2, r3
 8002008:	9b01      	ldr	r3, [sp, #4]
 800200a:	611a      	str	r2, [r3, #16]
      if (obqp->bwrptr >= obqp->btop) {
 800200c:	9b01      	ldr	r3, [sp, #4]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	9b01      	ldr	r3, [sp, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	429a      	cmp	r2, r3
 8002016:	d303      	bcc.n	8002020 <obqTryFlushI+0x80>
        obqp->bwrptr = obqp->buffers;
 8002018:	9b01      	ldr	r3, [sp, #4]
 800201a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800201c:	9b01      	ldr	r3, [sp, #4]
 800201e:	611a      	str	r2, [r3, #16]
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8002020:	9b01      	ldr	r3, [sp, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	629a      	str	r2, [r3, #40]	; 0x28

      return true;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <obqTryFlushI+0x8c>
    }
  }
  return false;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	b005      	add	sp, #20
 8002030:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002040 <chSysLock.lto_priv.1>:
static inline void chSysLock(void) {
 8002040:	b500      	push	{lr}
 8002042:	b083      	sub	sp, #12
 8002044:	2330      	movs	r3, #48	; 0x30
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 800204e:	f005 f9c7 	bl	80073e0 <__dbg_check_lock>
}
 8002052:	b003      	add	sp, #12
 8002054:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002060 <chSysUnlock.lto_priv.1>:
static inline void chSysUnlock(void) {
 8002060:	b500      	push	{lr}
 8002062:	b083      	sub	sp, #12
  __dbg_check_unlock();
 8002064:	f005 f9e4 	bl	8007430 <__dbg_check_unlock>
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	f383 8811 	msr	BASEPRI, r3
}
 8002072:	b003      	add	sp, #12
 8002074:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002080 <osalSysLock.lto_priv.1>:
static inline void osalSysLock(void) {
 8002080:	b508      	push	{r3, lr}
  chSysLock();
 8002082:	f7ff ffdd 	bl	8002040 <chSysLock.lto_priv.1>
}
 8002086:	bd08      	pop	{r3, pc}
	...

08002090 <osalSysUnlock.lto_priv.1>:
static inline void osalSysUnlock(void) {
 8002090:	b508      	push	{r3, lr}
  chSysUnlock();
 8002092:	f7ff ffe5 	bl	8002060 <chSysUnlock.lto_priv.1>
}
 8002096:	bd08      	pop	{r3, pc}
	...

080020a0 <osalThreadQueueObjectInit.lto_priv.1>:
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 80020a0:	b500      	push	{lr}
 80020a2:	b083      	sub	sp, #12
 80020a4:	9001      	str	r0, [sp, #4]
  chThdQueueObjectInit(tqp);
 80020a6:	9801      	ldr	r0, [sp, #4]
 80020a8:	f006 faca 	bl	8008640 <chThdQueueObjectInit>
}
 80020ac:	b003      	add	sp, #12
 80020ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b2:	bf00      	nop
	...

080020c0 <osalThreadEnqueueTimeoutS.lto_priv.1>:
                                              sysinterval_t timeout) {
 80020c0:	b500      	push	{lr}
 80020c2:	b083      	sub	sp, #12
 80020c4:	9001      	str	r0, [sp, #4]
 80020c6:	9100      	str	r1, [sp, #0]
  return chThdEnqueueTimeoutS(tqp, timeout);
 80020c8:	9900      	ldr	r1, [sp, #0]
 80020ca:	9801      	ldr	r0, [sp, #4]
 80020cc:	f006 fad0 	bl	8008670 <chThdEnqueueTimeoutS>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	b003      	add	sp, #12
 80020d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80020da:	bf00      	nop
 80020dc:	0000      	movs	r0, r0
	...

080020e0 <osalThreadDequeueNextI.lto_priv.1>:
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80020e0:	b500      	push	{lr}
 80020e2:	b083      	sub	sp, #12
 80020e4:	9001      	str	r0, [sp, #4]
 80020e6:	9100      	str	r1, [sp, #0]
  chThdDequeueNextI(tqp, msg);
 80020e8:	9900      	ldr	r1, [sp, #0]
 80020ea:	9801      	ldr	r0, [sp, #4]
 80020ec:	f006 fae0 	bl	80086b0 <chThdDequeueNextI>
}
 80020f0:	b003      	add	sp, #12
 80020f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80020f6:	bf00      	nop
	...

08002100 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8002100:	b500      	push	{lr}
 8002102:	b087      	sub	sp, #28
 8002104:	9003      	str	r0, [sp, #12]
 8002106:	9102      	str	r1, [sp, #8]
 8002108:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 800210a:	9b01      	ldr	r3, [sp, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <iq_read+0x20>
 800211a:	482d      	ldr	r0, [pc, #180]	; (80021d0 <iq_read+0xd0>)
 800211c:	f005 f948 	bl	80073b0 <chSysHalt>

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 8002120:	9b03      	ldr	r3, [sp, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	9a01      	ldr	r2, [sp, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d902      	bls.n	8002130 <iq_read+0x30>
    n = iqGetFullI(iqp);
 800212a:	9b03      	ldr	r3, [sp, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002130:	9b03      	ldr	r3, [sp, #12]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	9b03      	ldr	r3, [sp, #12]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 800213c:	9a01      	ldr	r2, [sp, #4]
 800213e:	9b05      	ldr	r3, [sp, #20]
 8002140:	429a      	cmp	r2, r3
 8002142:	d20d      	bcs.n	8002160 <iq_read+0x60>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002144:	9b03      	ldr	r3, [sp, #12]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	9a01      	ldr	r2, [sp, #4]
 800214a:	4619      	mov	r1, r3
 800214c:	9802      	ldr	r0, [sp, #8]
 800214e:	f7ff f9c7 	bl	80014e0 <memcpy>
    iqp->q_rdptr += n;
 8002152:	9b03      	ldr	r3, [sp, #12]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	9b01      	ldr	r3, [sp, #4]
 8002158:	441a      	add	r2, r3
 800215a:	9b03      	ldr	r3, [sp, #12]
 800215c:	619a      	str	r2, [r3, #24]
 800215e:	e02b      	b.n	80021b8 <iq_read+0xb8>
  }
  else if (n > s1) {
 8002160:	9a01      	ldr	r2, [sp, #4]
 8002162:	9b05      	ldr	r3, [sp, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	d91c      	bls.n	80021a2 <iq_read+0xa2>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002168:	9b03      	ldr	r3, [sp, #12]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	9a05      	ldr	r2, [sp, #20]
 800216e:	4619      	mov	r1, r3
 8002170:	9802      	ldr	r0, [sp, #8]
 8002172:	f7ff f9b5 	bl	80014e0 <memcpy>
    bp += s1;
 8002176:	9a02      	ldr	r2, [sp, #8]
 8002178:	9b05      	ldr	r3, [sp, #20]
 800217a:	4413      	add	r3, r2
 800217c:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 800217e:	9a01      	ldr	r2, [sp, #4]
 8002180:	9b05      	ldr	r3, [sp, #20]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8002186:	9b03      	ldr	r3, [sp, #12]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	9a04      	ldr	r2, [sp, #16]
 800218c:	4619      	mov	r1, r3
 800218e:	9802      	ldr	r0, [sp, #8]
 8002190:	f7ff f9a6 	bl	80014e0 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002194:	9b03      	ldr	r3, [sp, #12]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	9b04      	ldr	r3, [sp, #16]
 800219a:	441a      	add	r2, r3
 800219c:	9b03      	ldr	r3, [sp, #12]
 800219e:	619a      	str	r2, [r3, #24]
 80021a0:	e00a      	b.n	80021b8 <iq_read+0xb8>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80021a2:	9b03      	ldr	r3, [sp, #12]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	9a01      	ldr	r2, [sp, #4]
 80021a8:	4619      	mov	r1, r3
 80021aa:	9802      	ldr	r0, [sp, #8]
 80021ac:	f7ff f998 	bl	80014e0 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80021b0:	9b03      	ldr	r3, [sp, #12]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	9b03      	ldr	r3, [sp, #12]
 80021b6:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 80021b8:	9b03      	ldr	r3, [sp, #12]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	9b01      	ldr	r3, [sp, #4]
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	9b03      	ldr	r3, [sp, #12]
 80021c2:	609a      	str	r2, [r3, #8]
  return n;
 80021c4:	9b01      	ldr	r3, [sp, #4]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	b007      	add	sp, #28
 80021ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ce:	bf00      	nop
 80021d0:	0800a680 	.word	0x0800a680
	...

080021e0 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 80021e0:	b500      	push	{lr}
 80021e2:	b087      	sub	sp, #28
 80021e4:	9003      	str	r0, [sp, #12]
 80021e6:	9102      	str	r1, [sp, #8]
 80021e8:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 80021ea:	9b01      	ldr	r3, [sp, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <oq_write+0x20>
 80021fa:	482d      	ldr	r0, [pc, #180]	; (80022b0 <oq_write+0xd0>)
 80021fc:	f005 f8d8 	bl	80073b0 <chSysHalt>

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 8002200:	9b03      	ldr	r3, [sp, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	9a01      	ldr	r2, [sp, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d902      	bls.n	8002210 <oq_write+0x30>
    n = oqGetEmptyI(oqp);
 800220a:	9b03      	ldr	r3, [sp, #12]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002210:	9b03      	ldr	r3, [sp, #12]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	9b03      	ldr	r3, [sp, #12]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 800221c:	9a01      	ldr	r2, [sp, #4]
 800221e:	9b05      	ldr	r3, [sp, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	d20d      	bcs.n	8002240 <oq_write+0x60>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002224:	9b03      	ldr	r3, [sp, #12]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	9a01      	ldr	r2, [sp, #4]
 800222a:	9902      	ldr	r1, [sp, #8]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff f957 	bl	80014e0 <memcpy>
    oqp->q_wrptr += n;
 8002232:	9b03      	ldr	r3, [sp, #12]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	9b01      	ldr	r3, [sp, #4]
 8002238:	441a      	add	r2, r3
 800223a:	9b03      	ldr	r3, [sp, #12]
 800223c:	615a      	str	r2, [r3, #20]
 800223e:	e02b      	b.n	8002298 <oq_write+0xb8>
  }
  else if (n > s1) {
 8002240:	9a01      	ldr	r2, [sp, #4]
 8002242:	9b05      	ldr	r3, [sp, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	d91c      	bls.n	8002282 <oq_write+0xa2>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002248:	9b03      	ldr	r3, [sp, #12]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	9a05      	ldr	r2, [sp, #20]
 800224e:	9902      	ldr	r1, [sp, #8]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff f945 	bl	80014e0 <memcpy>
    bp += s1;
 8002256:	9a02      	ldr	r2, [sp, #8]
 8002258:	9b05      	ldr	r3, [sp, #20]
 800225a:	4413      	add	r3, r2
 800225c:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 800225e:	9a01      	ldr	r2, [sp, #4]
 8002260:	9b05      	ldr	r3, [sp, #20]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002266:	9b03      	ldr	r3, [sp, #12]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	9a04      	ldr	r2, [sp, #16]
 800226c:	9902      	ldr	r1, [sp, #8]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f936 	bl	80014e0 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002274:	9b03      	ldr	r3, [sp, #12]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	9b04      	ldr	r3, [sp, #16]
 800227a:	441a      	add	r2, r3
 800227c:	9b03      	ldr	r3, [sp, #12]
 800227e:	615a      	str	r2, [r3, #20]
 8002280:	e00a      	b.n	8002298 <oq_write+0xb8>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002282:	9b03      	ldr	r3, [sp, #12]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	9a01      	ldr	r2, [sp, #4]
 8002288:	9902      	ldr	r1, [sp, #8]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f928 	bl	80014e0 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002290:	9b03      	ldr	r3, [sp, #12]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	9b03      	ldr	r3, [sp, #12]
 8002296:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 8002298:	9b03      	ldr	r3, [sp, #12]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	9b01      	ldr	r3, [sp, #4]
 800229e:	1ad2      	subs	r2, r2, r3
 80022a0:	9b03      	ldr	r3, [sp, #12]
 80022a2:	609a      	str	r2, [r3, #8]
  return n;
 80022a4:	9b01      	ldr	r3, [sp, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	b007      	add	sp, #28
 80022aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80022ae:	bf00      	nop
 80022b0:	0800a688 	.word	0x0800a688
	...

080022c0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 80022c0:	b500      	push	{lr}
 80022c2:	b085      	sub	sp, #20
 80022c4:	9003      	str	r0, [sp, #12]
 80022c6:	9102      	str	r1, [sp, #8]
 80022c8:	9201      	str	r2, [sp, #4]
 80022ca:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 80022cc:	9b03      	ldr	r3, [sp, #12]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fee6 	bl	80020a0 <osalThreadQueueObjectInit.lto_priv.1>
  iqp->q_counter = 0;
 80022d4:	9b03      	ldr	r3, [sp, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 80022da:	9b03      	ldr	r3, [sp, #12]
 80022dc:	9a02      	ldr	r2, [sp, #8]
 80022de:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 80022e0:	9b03      	ldr	r3, [sp, #12]
 80022e2:	9a02      	ldr	r2, [sp, #8]
 80022e4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 80022e6:	9b03      	ldr	r3, [sp, #12]
 80022e8:	9a02      	ldr	r2, [sp, #8]
 80022ea:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 80022ec:	9a02      	ldr	r2, [sp, #8]
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	441a      	add	r2, r3
 80022f2:	9b03      	ldr	r3, [sp, #12]
 80022f4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 80022f6:	9b03      	ldr	r3, [sp, #12]
 80022f8:	9a00      	ldr	r2, [sp, #0]
 80022fa:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 80022fc:	9b03      	ldr	r3, [sp, #12]
 80022fe:	9a06      	ldr	r2, [sp, #24]
 8002300:	621a      	str	r2, [r3, #32]
}
 8002302:	b005      	add	sp, #20
 8002304:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002310 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8002310:	b500      	push	{lr}
 8002312:	b083      	sub	sp, #12
 8002314:	9001      	str	r0, [sp, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
 800231c:	f005 f968 	bl	80075f0 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8002320:	9b01      	ldr	r3, [sp, #4]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	9b01      	ldr	r3, [sp, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	429a      	cmp	r2, r3
 800232a:	d105      	bne.n	8002338 <iqPutI+0x28>
 800232c:	9b01      	ldr	r3, [sp, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <iqPutI+0x28>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <iqPutI+0x2a>
 8002338:	2300      	movs	r3, #0
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f083 0301 	eor.w	r3, r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01d      	beq.n	8002386 <iqPutI+0x76>
    iqp->q_counter++;
 800234a:	9b01      	ldr	r3, [sp, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	9b01      	ldr	r3, [sp, #4]
 8002352:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	1c59      	adds	r1, r3, #1
 800235a:	9a01      	ldr	r2, [sp, #4]
 800235c:	6151      	str	r1, [r2, #20]
 800235e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002362:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8002364:	9b01      	ldr	r3, [sp, #4]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	9b01      	ldr	r3, [sp, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d303      	bcc.n	8002378 <iqPutI+0x68>
      iqp->q_wrptr = iqp->q_buffer;
 8002370:	9b01      	ldr	r3, [sp, #4]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	9b01      	ldr	r3, [sp, #4]
 8002376:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8002378:	9b01      	ldr	r3, [sp, #4]
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff feaf 	bl	80020e0 <osalThreadDequeueNextI.lto_priv.1>

    return MSG_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e001      	b.n	800238a <iqPutI+0x7a>
  }

  return MSG_TIMEOUT;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800238a:	4618      	mov	r0, r3
 800238c:	b003      	add	sp, #12
 800238e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002392:	bf00      	nop
	...

080023a0 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80023a0:	b500      	push	{lr}
 80023a2:	b085      	sub	sp, #20
 80023a4:	9001      	str	r0, [sp, #4]
 80023a6:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 80023a8:	f7ff fe6a 	bl	8002080 <osalSysLock.lto_priv.1>
 80023ac:	e00c      	b.n	80023c8 <iqGetTimeout+0x28>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	9900      	ldr	r1, [sp, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fe84 	bl	80020c0 <osalThreadEnqueueTimeoutS.lto_priv.1>
 80023b8:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
 80023ba:	9b02      	ldr	r3, [sp, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	da03      	bge.n	80023c8 <iqGetTimeout+0x28>
      osalSysUnlock();
 80023c0:	f7ff fe66 	bl	8002090 <osalSysUnlock.lto_priv.1>
      return msg;
 80023c4:	9b02      	ldr	r3, [sp, #8]
 80023c6:	e026      	b.n	8002416 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
 80023c8:	9b01      	ldr	r3, [sp, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ee      	beq.n	80023ae <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80023d0:	9b01      	ldr	r3, [sp, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	9b01      	ldr	r3, [sp, #4]
 80023d8:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 80023da:	9b01      	ldr	r3, [sp, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	1c59      	adds	r1, r3, #1
 80023e0:	9a01      	ldr	r2, [sp, #4]
 80023e2:	6191      	str	r1, [r2, #24]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
 80023ea:	9b01      	ldr	r3, [sp, #4]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	9b01      	ldr	r3, [sp, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d303      	bcc.n	80023fe <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	9b01      	ldr	r3, [sp, #4]
 80023fc:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 80023fe:	9b01      	ldr	r3, [sp, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 8002406:	9b01      	ldr	r3, [sp, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	9801      	ldr	r0, [sp, #4]
 800240c:	4798      	blx	r3
  }

  osalSysUnlock();
 800240e:	f7ff fe3f 	bl	8002090 <osalSysUnlock.lto_priv.1>

  return (msg_t)b;
 8002412:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	b005      	add	sp, #20
 800241a:	f85d fb04 	ldr.w	pc, [sp], #4
 800241e:	bf00      	nop

08002420 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8002420:	b500      	push	{lr}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	9003      	str	r0, [sp, #12]
 8002426:	9102      	str	r1, [sp, #8]
 8002428:	9201      	str	r2, [sp, #4]
 800242a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 800242c:	9b03      	ldr	r3, [sp, #12]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8002432:	9b01      	ldr	r3, [sp, #4]
 8002434:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
 8002436:	9b01      	ldr	r3, [sp, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <iqReadTimeout+0x2c>
 8002446:	481b      	ldr	r0, [pc, #108]	; (80024b4 <iqReadTimeout+0x94>)
 8002448:	f004 ffb2 	bl	80073b0 <chSysHalt>

  osalSysLock();
 800244c:	f7ff fe18 	bl	8002080 <osalSysLock.lto_priv.1>
 8002450:	e024      	b.n	800249c <iqReadTimeout+0x7c>

  while (n > 0U) {
    size_t done;

    done = iq_read(iqp, bp, n);
 8002452:	9a01      	ldr	r2, [sp, #4]
 8002454:	9902      	ldr	r1, [sp, #8]
 8002456:	9803      	ldr	r0, [sp, #12]
 8002458:	f7ff fe52 	bl	8002100 <iq_read>
 800245c:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 800245e:	9b05      	ldr	r3, [sp, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <iqReadTimeout+0x58>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8002464:	9b03      	ldr	r3, [sp, #12]
 8002466:	9900      	ldr	r1, [sp, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fe29 	bl	80020c0 <osalThreadEnqueueTimeoutS.lto_priv.1>
 800246e:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8002470:	9b04      	ldr	r3, [sp, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d115      	bne.n	80024a2 <iqReadTimeout+0x82>
 8002476:	e011      	b.n	800249c <iqReadTimeout+0x7c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8002478:	9b07      	ldr	r3, [sp, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <iqReadTimeout+0x64>
        nfy(iqp);
 800247e:	9b07      	ldr	r3, [sp, #28]
 8002480:	9803      	ldr	r0, [sp, #12]
 8002482:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8002484:	f7ff fe04 	bl	8002090 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8002488:	9a01      	ldr	r2, [sp, #4]
 800248a:	9b05      	ldr	r3, [sp, #20]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	9301      	str	r3, [sp, #4]
      bp += done;
 8002490:	9a02      	ldr	r2, [sp, #8]
 8002492:	9b05      	ldr	r3, [sp, #20]
 8002494:	4413      	add	r3, r2
 8002496:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8002498:	f7ff fdf2 	bl	8002080 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 800249c:	9b01      	ldr	r3, [sp, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1d7      	bne.n	8002452 <iqReadTimeout+0x32>
    }
  }

  osalSysUnlock();
 80024a2:	f7ff fdf5 	bl	8002090 <osalSysUnlock.lto_priv.1>
  return max - n;
 80024a6:	9a06      	ldr	r2, [sp, #24]
 80024a8:	9b01      	ldr	r3, [sp, #4]
 80024aa:	1ad3      	subs	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	b009      	add	sp, #36	; 0x24
 80024b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80024b4:	0800a694 	.word	0x0800a694
	...

080024c0 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 80024c0:	b500      	push	{lr}
 80024c2:	b085      	sub	sp, #20
 80024c4:	9003      	str	r0, [sp, #12]
 80024c6:	9102      	str	r1, [sp, #8]
 80024c8:	9201      	str	r2, [sp, #4]
 80024ca:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 80024cc:	9b03      	ldr	r3, [sp, #12]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fde6 	bl	80020a0 <osalThreadQueueObjectInit.lto_priv.1>
  oqp->q_counter = size;
 80024d4:	9b03      	ldr	r3, [sp, #12]
 80024d6:	9a01      	ldr	r2, [sp, #4]
 80024d8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 80024da:	9b03      	ldr	r3, [sp, #12]
 80024dc:	9a02      	ldr	r2, [sp, #8]
 80024de:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 80024e0:	9b03      	ldr	r3, [sp, #12]
 80024e2:	9a02      	ldr	r2, [sp, #8]
 80024e4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 80024e6:	9b03      	ldr	r3, [sp, #12]
 80024e8:	9a02      	ldr	r2, [sp, #8]
 80024ea:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 80024ec:	9a02      	ldr	r2, [sp, #8]
 80024ee:	9b01      	ldr	r3, [sp, #4]
 80024f0:	441a      	add	r2, r3
 80024f2:	9b03      	ldr	r3, [sp, #12]
 80024f4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 80024f6:	9b03      	ldr	r3, [sp, #12]
 80024f8:	9a00      	ldr	r2, [sp, #0]
 80024fa:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 80024fc:	9b03      	ldr	r3, [sp, #12]
 80024fe:	9a06      	ldr	r2, [sp, #24]
 8002500:	621a      	str	r2, [r3, #32]
}
 8002502:	b005      	add	sp, #20
 8002504:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002510 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002510:	b500      	push	{lr}
 8002512:	b087      	sub	sp, #28
 8002514:	9003      	str	r0, [sp, #12]
 8002516:	460b      	mov	r3, r1
 8002518:	9201      	str	r2, [sp, #4]
 800251a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
 800251e:	f7ff fdaf 	bl	8002080 <osalSysLock.lto_priv.1>
 8002522:	e00c      	b.n	800253e <oqPutTimeout+0x2e>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8002524:	9b03      	ldr	r3, [sp, #12]
 8002526:	9901      	ldr	r1, [sp, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fdc9 	bl	80020c0 <osalThreadEnqueueTimeoutS.lto_priv.1>
 800252e:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
 8002530:	9b05      	ldr	r3, [sp, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	da03      	bge.n	800253e <oqPutTimeout+0x2e>
      osalSysUnlock();
 8002536:	f7ff fdab 	bl	8002090 <osalSysUnlock.lto_priv.1>
      return msg;
 800253a:	9b05      	ldr	r3, [sp, #20]
 800253c:	e025      	b.n	800258a <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
 800253e:	9b03      	ldr	r3, [sp, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ee      	beq.n	8002524 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8002546:	9b03      	ldr	r3, [sp, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	9b03      	ldr	r3, [sp, #12]
 800254e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8002550:	9b03      	ldr	r3, [sp, #12]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	1c59      	adds	r1, r3, #1
 8002556:	9a03      	ldr	r2, [sp, #12]
 8002558:	6151      	str	r1, [r2, #20]
 800255a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800255e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002560:	9b03      	ldr	r3, [sp, #12]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	9b03      	ldr	r3, [sp, #12]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	d303      	bcc.n	8002574 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 800256c:	9b03      	ldr	r3, [sp, #12]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	9b03      	ldr	r3, [sp, #12]
 8002572:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8002574:	9b03      	ldr	r3, [sp, #12]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
 800257c:	9b03      	ldr	r3, [sp, #12]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	9803      	ldr	r0, [sp, #12]
 8002582:	4798      	blx	r3
  }

  osalSysUnlock();
 8002584:	f7ff fd84 	bl	8002090 <osalSysUnlock.lto_priv.1>

  return MSG_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	b007      	add	sp, #28
 800258e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002592:	bf00      	nop
	...

080025a0 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 80025a0:	b500      	push	{lr}
 80025a2:	b085      	sub	sp, #20
 80025a4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
 80025a6:	f005 f823 	bl	80075f0 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 80025aa:	9b01      	ldr	r3, [sp, #4]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	9b01      	ldr	r3, [sp, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d105      	bne.n	80025c2 <oqGetI+0x22>
 80025b6:	9b01      	ldr	r3, [sp, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <oqGetI+0x22>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <oqGetI+0x24>
 80025c2:	2300      	movs	r3, #0
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f083 0301 	eor.w	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01e      	beq.n	8002612 <oqGetI+0x72>
    uint8_t b;

    oqp->q_counter++;
 80025d4:	9b01      	ldr	r3, [sp, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 80025de:	9b01      	ldr	r3, [sp, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	1c59      	adds	r1, r3, #1
 80025e4:	9a01      	ldr	r2, [sp, #4]
 80025e6:	6191      	str	r1, [r2, #24]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 80025ee:	9b01      	ldr	r3, [sp, #4]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	9b01      	ldr	r3, [sp, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d303      	bcc.n	8002602 <oqGetI+0x62>
      oqp->q_rdptr = oqp->q_buffer;
 80025fa:	9b01      	ldr	r3, [sp, #4]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8002602:	9b01      	ldr	r3, [sp, #4]
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fd6a 	bl	80020e0 <osalThreadDequeueNextI.lto_priv.1>

    return (msg_t)b;
 800260c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002610:	e001      	b.n	8002616 <oqGetI+0x76>
  }

  return MSG_TIMEOUT;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002616:	4618      	mov	r0, r3
 8002618:	b005      	add	sp, #20
 800261a:	f85d fb04 	ldr.w	pc, [sp], #4
 800261e:	bf00      	nop

08002620 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002620:	b500      	push	{lr}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	9003      	str	r0, [sp, #12]
 8002626:	9102      	str	r1, [sp, #8]
 8002628:	9201      	str	r2, [sp, #4]
 800262a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8002632:	9b01      	ldr	r3, [sp, #4]
 8002634:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
 8002636:	9b01      	ldr	r3, [sp, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <oqWriteTimeout+0x2c>
 8002646:	481b      	ldr	r0, [pc, #108]	; (80026b4 <oqWriteTimeout+0x94>)
 8002648:	f004 feb2 	bl	80073b0 <chSysHalt>

  osalSysLock();
 800264c:	f7ff fd18 	bl	8002080 <osalSysLock.lto_priv.1>
 8002650:	e024      	b.n	800269c <oqWriteTimeout+0x7c>

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
 8002652:	9a01      	ldr	r2, [sp, #4]
 8002654:	9902      	ldr	r1, [sp, #8]
 8002656:	9803      	ldr	r0, [sp, #12]
 8002658:	f7ff fdc2 	bl	80021e0 <oq_write>
 800265c:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 800265e:	9b05      	ldr	r3, [sp, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <oqWriteTimeout+0x58>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8002664:	9b03      	ldr	r3, [sp, #12]
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fd29 	bl	80020c0 <osalThreadEnqueueTimeoutS.lto_priv.1>
 800266e:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8002670:	9b04      	ldr	r3, [sp, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d115      	bne.n	80026a2 <oqWriteTimeout+0x82>
 8002676:	e011      	b.n	800269c <oqWriteTimeout+0x7c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002678:	9b07      	ldr	r3, [sp, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <oqWriteTimeout+0x64>
        nfy(oqp);
 800267e:	9b07      	ldr	r3, [sp, #28]
 8002680:	9803      	ldr	r0, [sp, #12]
 8002682:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8002684:	f7ff fd04 	bl	8002090 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8002688:	9a01      	ldr	r2, [sp, #4]
 800268a:	9b05      	ldr	r3, [sp, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	9301      	str	r3, [sp, #4]
      bp += done;
 8002690:	9a02      	ldr	r2, [sp, #8]
 8002692:	9b05      	ldr	r3, [sp, #20]
 8002694:	4413      	add	r3, r2
 8002696:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8002698:	f7ff fcf2 	bl	8002080 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 800269c:	9b01      	ldr	r3, [sp, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1d7      	bne.n	8002652 <oqWriteTimeout+0x32>
    }
  }

  osalSysUnlock();
 80026a2:	f7ff fcf5 	bl	8002090 <osalSysUnlock.lto_priv.1>
  return max - n;
 80026a6:	9a06      	ldr	r2, [sp, #24]
 80026a8:	9b01      	ldr	r3, [sp, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	b009      	add	sp, #36	; 0x24
 80026b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80026b4:	0800a6a4 	.word	0x0800a6a4
	...

080026c0 <chSysLock.lto_priv.2>:
static inline void chSysLock(void) {
 80026c0:	b500      	push	{lr}
 80026c2:	b083      	sub	sp, #12
 80026c4:	2330      	movs	r3, #48	; 0x30
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	9b01      	ldr	r3, [sp, #4]
 80026ca:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 80026ce:	f004 fe87 	bl	80073e0 <__dbg_check_lock>
}
 80026d2:	b003      	add	sp, #12
 80026d4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080026e0 <chSysUnlock.lto_priv.2>:
static inline void chSysUnlock(void) {
 80026e0:	b500      	push	{lr}
 80026e2:	b083      	sub	sp, #12
  __dbg_check_unlock();
 80026e4:	f004 fea4 	bl	8007430 <__dbg_check_unlock>
 80026e8:	2300      	movs	r3, #0
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	9b01      	ldr	r3, [sp, #4]
 80026ee:	f383 8811 	msr	BASEPRI, r3
}
 80026f2:	b003      	add	sp, #12
 80026f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002700 <osalSysLock.lto_priv.2>:
static inline void osalSysLock(void) {
 8002700:	b508      	push	{r3, lr}
  chSysLock();
 8002702:	f7ff ffdd 	bl	80026c0 <chSysLock.lto_priv.2>
}
 8002706:	bd08      	pop	{r3, pc}
	...

08002710 <osalSysUnlock.lto_priv.2>:
static inline void osalSysUnlock(void) {
 8002710:	b508      	push	{r3, lr}
  chSysUnlock();
 8002712:	f7ff ffe5 	bl	80026e0 <chSysUnlock.lto_priv.2>
}
 8002716:	bd08      	pop	{r3, pc}
	...

08002720 <osalMutexObjectInit>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8002720:	b500      	push	{lr}
 8002722:	b083      	sub	sp, #12
 8002724:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8002726:	9801      	ldr	r0, [sp, #4]
 8002728:	f006 f912 	bl	8008950 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 800272c:	b003      	add	sp, #12
 800272e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002732:	bf00      	nop
	...

08002740 <osalMutexLock>:
 *
 * @param[in,out] mp    pointer to the @p mutex_t object
 *
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {
 8002740:	b500      	push	{lr}
 8002742:	b083      	sub	sp, #12
 8002744:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8002746:	9801      	ldr	r0, [sp, #4]
 8002748:	f006 f922 	bl	8008990 <chMtxLock>
#elif CH_CFG_USE_SEMAPHORES
  chSemWait((semaphore_t *)mp);
#else
  *mp = 1;
#endif
}
 800274c:	b003      	add	sp, #12
 800274e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002752:	bf00      	nop
	...

08002760 <osalMutexUnlock>:
 *
 * @param[in,out] mp    pointer to the @p mutex_t object
 *
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {
 8002760:	b500      	push	{lr}
 8002762:	b083      	sub	sp, #12
 8002764:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8002766:	9801      	ldr	r0, [sp, #4]
 8002768:	f006 f99a 	bl	8008aa0 <chMtxUnlock>
#elif CH_CFG_USE_SEMAPHORES
  chSemSignal((semaphore_t *)mp);
#else
  *mp = 0;
#endif
}
 800276c:	b003      	add	sp, #12
 800276e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002772:	bf00      	nop
	...

08002780 <i2cInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void i2cInit(void) {
 8002780:	b508      	push	{r3, lr}

  i2c_lld_init();
 8002782:	f003 f9c5 	bl	8005b10 <i2c_lld_init>
}
 8002786:	bd08      	pop	{r3, pc}
	...

08002790 <i2cObjectInit>:
 *
 * @param[out] i2cp     pointer to the @p I2CDriver object
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {
 8002790:	b500      	push	{lr}
 8002792:	b083      	sub	sp, #12
 8002794:	9001      	str	r0, [sp, #4]

  i2cp->state  = I2C_STOP;
 8002796:	9b01      	ldr	r3, [sp, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
  i2cp->config = NULL;
 800279c:	9b01      	ldr	r3, [sp, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	605a      	str	r2, [r3, #4]

#if I2C_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&i2cp->mutex);
 80027a2:	9b01      	ldr	r3, [sp, #4]
 80027a4:	330c      	adds	r3, #12
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ffba 	bl	8002720 <osalMutexObjectInit>
#endif

#if defined(I2C_DRIVER_EXT_INIT_HOOK)
  I2C_DRIVER_EXT_INIT_HOOK(i2cp);
#endif
}
 80027ac:	b003      	add	sp, #12
 80027ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80027b2:	bf00      	nop
	...

080027c0 <i2cStart>:
 * @param[in] config    pointer to the @p I2CConfig object
 * @return              The operation status.
 *
 * @api
 */
msg_t i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 80027c0:	b500      	push	{lr}
 80027c2:	b085      	sub	sp, #20
 80027c4:	9001      	str	r0, [sp, #4]
 80027c6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((i2cp != NULL) && (config != NULL));
 80027c8:	9b01      	ldr	r3, [sp, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d107      	bne.n	80027e8 <i2cStart+0x28>
 80027d8:	9b00      	ldr	r3, [sp, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <i2cStart+0x2e>
 80027e8:	480e      	ldr	r0, [pc, #56]	; (8002824 <i2cStart+0x64>)
 80027ea:	f004 fde1 	bl	80073b0 <chSysHalt>

  osalSysLock();
 80027ee:	f7ff ff87 	bl	8002700 <osalSysLock.lto_priv.2>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  i2cp->config = config;
 80027f2:	9b01      	ldr	r3, [sp, #4]
 80027f4:	9a00      	ldr	r2, [sp, #0]
 80027f6:	605a      	str	r2, [r3, #4]

#if defined(I2C_LLD_ENHANCED_API)
  msg = i2c_lld_start(i2cp);
#else
  i2c_lld_start(i2cp);
 80027f8:	9801      	ldr	r0, [sp, #4]
 80027fa:	f003 f9b1 	bl	8005b60 <i2c_lld_start>
  msg = HAL_RET_SUCCESS;
 80027fe:	2300      	movs	r3, #0
 8002800:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 8002802:	9b03      	ldr	r3, [sp, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <i2cStart+0x50>
    i2cp->state = I2C_READY;
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e002      	b.n	8002816 <i2cStart+0x56>
  }
  else {
    i2cp->state = I2C_STOP;
 8002810:	9b01      	ldr	r3, [sp, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
 8002816:	f7ff ff7b 	bl	8002710 <osalSysUnlock.lto_priv.2>

  return msg;
 800281a:	9b03      	ldr	r3, [sp, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	b005      	add	sp, #20
 8002820:	f85d fb04 	ldr.w	pc, [sp], #4
 8002824:	0800a6b4 	.word	0x0800a6b4
	...

08002830 <i2cStop>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cStop(I2CDriver *i2cp) {
 8002830:	b500      	push	{lr}
 8002832:	b083      	sub	sp, #12
 8002834:	9001      	str	r0, [sp, #4]

  osalDbgCheck(i2cp != NULL);
 8002836:	9b01      	ldr	r3, [sp, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <i2cStop+0x1c>
 8002846:	4809      	ldr	r0, [pc, #36]	; (800286c <i2cStop+0x3c>)
 8002848:	f004 fdb2 	bl	80073b0 <chSysHalt>

  osalSysLock();
 800284c:	f7ff ff58 	bl	8002700 <osalSysLock.lto_priv.2>

  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  i2c_lld_stop(i2cp);
 8002850:	9801      	ldr	r0, [sp, #4]
 8002852:	f003 fa4d 	bl	8005cf0 <i2c_lld_stop>
  i2cp->config = NULL;
 8002856:	9b01      	ldr	r3, [sp, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	605a      	str	r2, [r3, #4]
  i2cp->state  = I2C_STOP;
 800285c:	9b01      	ldr	r3, [sp, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]

  osalSysUnlock();
 8002862:	f7ff ff55 	bl	8002710 <osalSysUnlock.lto_priv.2>
}
 8002866:	b003      	add	sp, #12
 8002868:	f85d fb04 	ldr.w	pc, [sp], #4
 800286c:	0800a6c0 	.word	0x0800a6c0

08002870 <i2cGetErrors>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @return              The errors mask.
 *
 * @api
 */
i2cflags_t i2cGetErrors(I2CDriver *i2cp) {
 8002870:	b500      	push	{lr}
 8002872:	b083      	sub	sp, #12
 8002874:	9001      	str	r0, [sp, #4]

  osalDbgCheck(i2cp != NULL);
 8002876:	9b01      	ldr	r3, [sp, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <i2cGetErrors+0x1c>
 8002886:	4804      	ldr	r0, [pc, #16]	; (8002898 <i2cGetErrors+0x28>)
 8002888:	f004 fd92 	bl	80073b0 <chSysHalt>

  return i2c_lld_get_errors(i2cp);
 800288c:	9b01      	ldr	r3, [sp, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
}
 8002890:	4618      	mov	r0, r3
 8002892:	b003      	add	sp, #12
 8002894:	f85d fb04 	ldr.w	pc, [sp], #4
 8002898:	0800a6c8 	.word	0x0800a6c8
 800289c:	00000000 	.word	0x00000000

080028a0 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               sysinterval_t timeout) {
 80028a0:	b500      	push	{lr}
 80028a2:	b08b      	sub	sp, #44	; 0x2c
 80028a4:	9007      	str	r0, [sp, #28]
 80028a6:	9205      	str	r2, [sp, #20]
 80028a8:	9304      	str	r3, [sp, #16]
 80028aa:	460b      	mov	r3, r1
 80028ac:	f8ad 301a 	strh.w	r3, [sp, #26]
  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) &&
 80028b0:	9b07      	ldr	r3, [sp, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <i2cMasterTransmitTimeout+0x30>
 80028c0:	9b04      	ldr	r3, [sp, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <i2cMasterTransmitTimeout+0x34>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <i2cMasterTransmitTimeout+0x36>
 80028d4:	2300      	movs	r3, #0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <i2cMasterTransmitTimeout+0x4a>
 80028da:	9b05      	ldr	r3, [sp, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <i2cMasterTransmitTimeout+0x4e>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <i2cMasterTransmitTimeout+0x50>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d121      	bne.n	8002938 <i2cMasterTransmitTimeout+0x98>
 80028f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d016      	beq.n	8002932 <i2cMasterTransmitTimeout+0x92>
 8002904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d107      	bne.n	8002924 <i2cMasterTransmitTimeout+0x84>
 8002914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <i2cMasterTransmitTimeout+0x88>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <i2cMasterTransmitTimeout+0x8a>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <i2cMasterTransmitTimeout+0x92>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <i2cMasterTransmitTimeout+0x94>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <i2cMasterTransmitTimeout+0x9c>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <i2cMasterTransmitTimeout+0x9e>
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <i2cMasterTransmitTimeout+0xb2>
 8002942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <i2cMasterTransmitTimeout+0xb8>
 8002952:	4815      	ldr	r0, [pc, #84]	; (80029a8 <i2cMasterTransmitTimeout+0x108>)
 8002954:	f004 fd2c 	bl	80073b0 <chSysHalt>
               ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
 8002958:	f7ff fed2 	bl	8002700 <osalSysLock.lto_priv.2>
  i2cp->errors = I2C_NO_ERROR;
 800295c:	9b07      	ldr	r3, [sp, #28]
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8002962:	9b07      	ldr	r3, [sp, #28]
 8002964:	2203      	movs	r2, #3
 8002966:	701a      	strb	r2, [r3, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002968:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800296c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800296e:	9302      	str	r3, [sp, #8]
 8002970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	9b04      	ldr	r3, [sp, #16]
 800297a:	9a05      	ldr	r2, [sp, #20]
 800297c:	9807      	ldr	r0, [sp, #28]
 800297e:	f003 f9ff 	bl	8005d80 <i2c_lld_master_transmit_timeout>
 8002982:	9009      	str	r0, [sp, #36]	; 0x24
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8002984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298a:	d103      	bne.n	8002994 <i2cMasterTransmitTimeout+0xf4>
    i2cp->state = I2C_LOCKED;
 800298c:	9b07      	ldr	r3, [sp, #28]
 800298e:	2205      	movs	r2, #5
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e002      	b.n	800299a <i2cMasterTransmitTimeout+0xfa>
  }
  else {
    i2cp->state = I2C_READY;
 8002994:	9b07      	ldr	r3, [sp, #28]
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
  }
  osalSysUnlock();
 800299a:	f7ff feb9 	bl	8002710 <osalSysUnlock.lto_priv.2>
  return rdymsg;
 800299e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	b00b      	add	sp, #44	; 0x2c
 80029a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80029a8:	0800a6d8 	.word	0x0800a6d8
 80029ac:	00000000 	.word	0x00000000

080029b0 <i2cAcquireBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cAcquireBus(I2CDriver *i2cp) {
 80029b0:	b500      	push	{lr}
 80029b2:	b083      	sub	sp, #12
 80029b4:	9001      	str	r0, [sp, #4]

  osalDbgCheck(i2cp != NULL);
 80029b6:	9b01      	ldr	r3, [sp, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <i2cAcquireBus+0x1c>
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <i2cAcquireBus+0x2c>)
 80029c8:	f004 fcf2 	bl	80073b0 <chSysHalt>

  osalMutexLock(&i2cp->mutex);
 80029cc:	9b01      	ldr	r3, [sp, #4]
 80029ce:	330c      	adds	r3, #12
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff feb5 	bl	8002740 <osalMutexLock>
}
 80029d6:	b003      	add	sp, #12
 80029d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80029dc:	0800a6f4 	.word	0x0800a6f4

080029e0 <i2cReleaseBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cReleaseBus(I2CDriver *i2cp) {
 80029e0:	b500      	push	{lr}
 80029e2:	b083      	sub	sp, #12
 80029e4:	9001      	str	r0, [sp, #4]

  osalDbgCheck(i2cp != NULL);
 80029e6:	9b01      	ldr	r3, [sp, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <i2cReleaseBus+0x1c>
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <i2cReleaseBus+0x2c>)
 80029f8:	f004 fcda 	bl	80073b0 <chSysHalt>

  osalMutexUnlock(&i2cp->mutex);
 80029fc:	9b01      	ldr	r3, [sp, #4]
 80029fe:	330c      	adds	r3, #12
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fead 	bl	8002760 <osalMutexUnlock>
}
 8002a06:	b003      	add	sp, #12
 8002a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a0c:	0800a704 	.word	0x0800a704

08002a10 <chSysLock.lto_priv.3>:
static inline void chSysLock(void) {
 8002a10:	b500      	push	{lr}
 8002a12:	b083      	sub	sp, #12
 8002a14:	2330      	movs	r3, #48	; 0x30
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	9b01      	ldr	r3, [sp, #4]
 8002a1a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 8002a1e:	f004 fcdf 	bl	80073e0 <__dbg_check_lock>
}
 8002a22:	b003      	add	sp, #12
 8002a24:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002a30 <chSysUnlock.lto_priv.3>:
static inline void chSysUnlock(void) {
 8002a30:	b500      	push	{lr}
 8002a32:	b083      	sub	sp, #12
  __dbg_check_unlock();
 8002a34:	f004 fcfc 	bl	8007430 <__dbg_check_unlock>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	9b01      	ldr	r3, [sp, #4]
 8002a3e:	f383 8811 	msr	BASEPRI, r3
}
 8002a42:	b003      	add	sp, #12
 8002a44:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002a50 <osalSysLock.lto_priv.3>:
static inline void osalSysLock(void) {
 8002a50:	b508      	push	{r3, lr}
  chSysLock();
 8002a52:	f7ff ffdd 	bl	8002a10 <chSysLock.lto_priv.3>
}
 8002a56:	bd08      	pop	{r3, pc}
	...

08002a60 <osalSysUnlock.lto_priv.3>:
static inline void osalSysUnlock(void) {
 8002a60:	b508      	push	{r3, lr}
  chSysUnlock();
 8002a62:	f7ff ffe5 	bl	8002a30 <chSysUnlock.lto_priv.3>
}
 8002a66:	bd08      	pop	{r3, pc}
	...

08002a70 <pwmInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void pwmInit(void) {
 8002a70:	b508      	push	{r3, lr}

  pwm_lld_init();
 8002a72:	f003 fb1d 	bl	80060b0 <pwm_lld_init>
}
 8002a76:	bd08      	pop	{r3, pc}
	...

08002a80 <pwmObjectInit>:
 *
 * @param[out] pwmp     pointer to a @p PWMDriver object
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {
 8002a80:	b082      	sub	sp, #8
 8002a82:	9001      	str	r0, [sp, #4]

  pwmp->state    = PWM_STOP;
 8002a84:	9b01      	ldr	r3, [sp, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
  pwmp->config   = NULL;
 8002a8a:	9b01      	ldr	r3, [sp, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	605a      	str	r2, [r3, #4]
  pwmp->enabled  = 0;
 8002a90:	9b01      	ldr	r3, [sp, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  pwmp->channels = 0;
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	741a      	strb	r2, [r3, #16]
#if defined(PWM_DRIVER_EXT_INIT_HOOK)
  PWM_DRIVER_EXT_INIT_HOOK(pwmp);
#endif
}
 8002a9c:	b002      	add	sp, #8
 8002a9e:	4770      	bx	lr

08002aa0 <pwmStart>:
 * @param[in] config    pointer to a @p PWMConfig object
 * @return              The operation status.
 *
 * @api
 */
msg_t pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
 8002aa0:	b500      	push	{lr}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	9001      	str	r0, [sp, #4]
 8002aa6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((pwmp != NULL) && (config != NULL));
 8002aa8:	9b01      	ldr	r3, [sp, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <pwmStart+0x28>
 8002ab8:	9b00      	ldr	r3, [sp, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <pwmStart+0x2e>
 8002ac8:	4812      	ldr	r0, [pc, #72]	; (8002b14 <pwmStart+0x74>)
 8002aca:	f004 fc71 	bl	80073b0 <chSysHalt>

  osalSysLock();
 8002ace:	f7ff ffbf 	bl	8002a50 <osalSysLock.lto_priv.3>
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");

  pwmp->config = config;
 8002ad2:	9b01      	ldr	r3, [sp, #4]
 8002ad4:	9a00      	ldr	r2, [sp, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
  pwmp->period = config->period;
 8002ad8:	9b00      	ldr	r3, [sp, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	9b01      	ldr	r3, [sp, #4]
 8002ade:	609a      	str	r2, [r3, #8]
  pwmp->enabled = 0U;
 8002ae0:	9b01      	ldr	r3, [sp, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]

#if defined(PWM_LLD_ENHANCED_API)
  msg = pwm_lld_start(pwmp);
#else
  pwm_lld_start(pwmp);
 8002ae6:	9801      	ldr	r0, [sp, #4]
 8002ae8:	f003 fb1a 	bl	8006120 <pwm_lld_start>
  msg = HAL_RET_SUCCESS;
 8002aec:	2300      	movs	r3, #0
 8002aee:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 8002af0:	9b03      	ldr	r3, [sp, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <pwmStart+0x5e>
    pwmp->state = PWM_READY;
 8002af6:	9b01      	ldr	r3, [sp, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e002      	b.n	8002b04 <pwmStart+0x64>
  }
  else {
    pwmp->state = PWM_STOP;
 8002afe:	9b01      	ldr	r3, [sp, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
 8002b04:	f7ff ffac 	bl	8002a60 <osalSysUnlock.lto_priv.3>

  return msg;
 8002b08:	9b03      	ldr	r3, [sp, #12]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	b005      	add	sp, #20
 8002b0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b12:	bf00      	nop
 8002b14:	0800a714 	.word	0x0800a714
	...

08002b20 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
 8002b20:	b500      	push	{lr}
 8002b22:	b085      	sub	sp, #20
 8002b24:	9003      	str	r0, [sp, #12]
 8002b26:	460b      	mov	r3, r1
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 8002b2e:	9b03      	ldr	r3, [sp, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <pwmEnableChannel+0x34>
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	7c1b      	ldrb	r3, [r3, #16]
 8002b42:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	bf2c      	ite	cs
 8002b4a:	2301      	movcs	r3, #1
 8002b4c:	2300      	movcc	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <pwmEnableChannel+0x3a>
 8002b54:	480d      	ldr	r0, [pc, #52]	; (8002b8c <pwmEnableChannel+0x6c>)
 8002b56:	f004 fc2b 	bl	80073b0 <chSysHalt>

  osalSysLock();
 8002b5a:	f7ff ff79 	bl	8002a50 <osalSysLock.lto_priv.3>

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8002b5e:	9b03      	ldr	r3, [sp, #12]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	9b03      	ldr	r3, [sp, #12]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002b76:	9a01      	ldr	r2, [sp, #4]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	9803      	ldr	r0, [sp, #12]
 8002b7c:	f003 fc38 	bl	80063f0 <pwm_lld_enable_channel>

  osalSysUnlock();
 8002b80:	f7ff ff6e 	bl	8002a60 <osalSysUnlock.lto_priv.3>
}
 8002b84:	b005      	add	sp, #20
 8002b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b8a:	bf00      	nop
 8002b8c:	0800a720 	.word	0x0800a720

08002b90 <chSysLock.lto_priv.4>:
static inline void chSysLock(void) {
 8002b90:	b500      	push	{lr}
 8002b92:	b083      	sub	sp, #12
 8002b94:	2330      	movs	r3, #48	; 0x30
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	9b01      	ldr	r3, [sp, #4]
 8002b9a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 8002b9e:	f004 fc1f 	bl	80073e0 <__dbg_check_lock>
}
 8002ba2:	b003      	add	sp, #12
 8002ba4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002bb0 <chSysUnlock.lto_priv.4>:
static inline void chSysUnlock(void) {
 8002bb0:	b500      	push	{lr}
 8002bb2:	b083      	sub	sp, #12
  __dbg_check_unlock();
 8002bb4:	f004 fc3c 	bl	8007430 <__dbg_check_unlock>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	9b01      	ldr	r3, [sp, #4]
 8002bbe:	f383 8811 	msr	BASEPRI, r3
}
 8002bc2:	b003      	add	sp, #12
 8002bc4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002bd0 <osalSysLock.lto_priv.4>:
static inline void osalSysLock(void) {
 8002bd0:	b508      	push	{r3, lr}
  chSysLock();
 8002bd2:	f7ff ffdd 	bl	8002b90 <chSysLock.lto_priv.4>
}
 8002bd6:	bd08      	pop	{r3, pc}
	...

08002be0 <osalSysUnlock.lto_priv.4>:
static inline void osalSysUnlock(void) {
 8002be0:	b508      	push	{r3, lr}
  chSysUnlock();
 8002be2:	f7ff ffe5 	bl	8002bb0 <chSysUnlock.lto_priv.4>
}
 8002be6:	bd08      	pop	{r3, pc}
	...

08002bf0 <osalEventObjectInit.lto_priv.0>:
static inline void osalEventObjectInit(event_source_t *esp) {
 8002bf0:	b500      	push	{lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	9001      	str	r0, [sp, #4]
  chEvtObjectInit(esp);
 8002bf6:	9801      	ldr	r0, [sp, #4]
 8002bf8:	f005 ffb2 	bl	8008b60 <chEvtObjectInit>
}
 8002bfc:	b003      	add	sp, #12
 8002bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c02:	bf00      	nop
	...

08002c10 <osalEventBroadcastFlagsI.lto_priv.1>:
                                            eventflags_t flags) {
 8002c10:	b500      	push	{lr}
 8002c12:	b083      	sub	sp, #12
 8002c14:	9001      	str	r0, [sp, #4]
 8002c16:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8002c18:	9900      	ldr	r1, [sp, #0]
 8002c1a:	9801      	ldr	r0, [sp, #4]
 8002c1c:	f005 fff8 	bl	8008c10 <chEvtBroadcastFlagsI>
}
 8002c20:	b003      	add	sp, #12
 8002c22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c26:	bf00      	nop
	...

08002c30 <_write.lto_priv.0>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8002c30:	b500      	push	{lr}
 8002c32:	b085      	sub	sp, #20
 8002c34:	9003      	str	r0, [sp, #12]
 8002c36:	9102      	str	r1, [sp, #8]
 8002c38:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002c3a:	9b03      	ldr	r3, [sp, #12]
 8002c3c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c44:	9a01      	ldr	r2, [sp, #4]
 8002c46:	9902      	ldr	r1, [sp, #8]
 8002c48:	f7ff fcea 	bl	8002620 <oqWriteTimeout>
 8002c4c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	b005      	add	sp, #20
 8002c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c56:	bf00      	nop
	...

08002c60 <_read.lto_priv.0>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8002c60:	b500      	push	{lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	9003      	str	r0, [sp, #12]
 8002c66:	9102      	str	r1, [sp, #8]
 8002c68:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002c6a:	9b03      	ldr	r3, [sp, #12]
 8002c6c:	f103 000c 	add.w	r0, r3, #12
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c74:	9a01      	ldr	r2, [sp, #4]
 8002c76:	9902      	ldr	r1, [sp, #8]
 8002c78:	f7ff fbd2 	bl	8002420 <iqReadTimeout>
 8002c7c:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	b005      	add	sp, #20
 8002c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c86:	bf00      	nop
	...

08002c90 <_put.lto_priv.0>:

static msg_t _put(void *ip, uint8_t b) {
 8002c90:	b500      	push	{lr}
 8002c92:	b083      	sub	sp, #12
 8002c94:	9001      	str	r0, [sp, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002c9c:	9b01      	ldr	r3, [sp, #4]
 8002c9e:	3330      	adds	r3, #48	; 0x30
 8002ca0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fc31 	bl	8002510 <oqPutTimeout>
 8002cae:	4603      	mov	r3, r0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	b003      	add	sp, #12
 8002cb4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002cc0 <_get.lto_priv.0>:

static msg_t _get(void *ip) {
 8002cc0:	b500      	push	{lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002cc6:	9b01      	ldr	r3, [sp, #4]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fb66 	bl	80023a0 <iqGetTimeout>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	b003      	add	sp, #12
 8002cda:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cde:	bf00      	nop

08002ce0 <_putt.lto_priv.0>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8002ce0:	b500      	push	{lr}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	9003      	str	r0, [sp, #12]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002cee:	9b03      	ldr	r3, [sp, #12]
 8002cf0:	3330      	adds	r3, #48	; 0x30
 8002cf2:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8002cf6:	9a01      	ldr	r2, [sp, #4]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fc09 	bl	8002510 <oqPutTimeout>
 8002cfe:	4603      	mov	r3, r0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	b005      	add	sp, #20
 8002d04:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002d10 <_gett.lto_priv.0>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 8002d10:	b500      	push	{lr}
 8002d12:	b083      	sub	sp, #12
 8002d14:	9001      	str	r0, [sp, #4]
 8002d16:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002d18:	9b01      	ldr	r3, [sp, #4]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	9900      	ldr	r1, [sp, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fb3e 	bl	80023a0 <iqGetTimeout>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	b003      	add	sp, #12
 8002d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d2e:	bf00      	nop

08002d30 <_writet.lto_priv.0>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8002d30:	b500      	push	{lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	9003      	str	r0, [sp, #12]
 8002d36:	9102      	str	r1, [sp, #8]
 8002d38:	9201      	str	r2, [sp, #4]
 8002d3a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002d3c:	9b03      	ldr	r3, [sp, #12]
 8002d3e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002d42:	9b00      	ldr	r3, [sp, #0]
 8002d44:	9a01      	ldr	r2, [sp, #4]
 8002d46:	9902      	ldr	r1, [sp, #8]
 8002d48:	f7ff fc6a 	bl	8002620 <oqWriteTimeout>
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	b005      	add	sp, #20
 8002d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d56:	bf00      	nop
	...

08002d60 <_readt.lto_priv.0>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8002d60:	b500      	push	{lr}
 8002d62:	b085      	sub	sp, #20
 8002d64:	9003      	str	r0, [sp, #12]
 8002d66:	9102      	str	r1, [sp, #8]
 8002d68:	9201      	str	r2, [sp, #4]
 8002d6a:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002d6c:	9b03      	ldr	r3, [sp, #12]
 8002d6e:	f103 000c 	add.w	r0, r3, #12
 8002d72:	9b00      	ldr	r3, [sp, #0]
 8002d74:	9a01      	ldr	r2, [sp, #4]
 8002d76:	9902      	ldr	r1, [sp, #8]
 8002d78:	f7ff fb52 	bl	8002420 <iqReadTimeout>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	b005      	add	sp, #20
 8002d82:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d86:	bf00      	nop
	...

08002d90 <_ctl.lto_priv.0>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8002d90:	b500      	push	{lr}
 8002d92:	b087      	sub	sp, #28
 8002d94:	9003      	str	r0, [sp, #12]
 8002d96:	9102      	str	r1, [sp, #8]
 8002d98:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 8002d9a:	9b03      	ldr	r3, [sp, #12]
 8002d9c:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);
 8002d9e:	9b05      	ldr	r3, [sp, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <_ctl.lto_priv.0+0x24>
 8002dae:	480f      	ldr	r0, [pc, #60]	; (8002dec <_ctl.lto_priv.0+0x5c>)
 8002db0:	f004 fafe 	bl	80073b0 <chSysHalt>

  switch (operation) {
 8002db4:	9b02      	ldr	r3, [sp, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00f      	beq.n	8002dda <_ctl.lto_priv.0+0x4a>
 8002dba:	9b02      	ldr	r3, [sp, #8]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10f      	bne.n	8002de0 <_ctl.lto_priv.0+0x50>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 8002dc0:	9b01      	ldr	r3, [sp, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <_ctl.lto_priv.0+0x46>
 8002dd0:	4806      	ldr	r0, [pc, #24]	; (8002dec <_ctl.lto_priv.0+0x5c>)
 8002dd2:	f004 faed 	bl	80073b0 <chSysHalt>
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
#endif
  }
  return HAL_RET_SUCCESS;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e004      	b.n	8002de4 <_ctl.lto_priv.0+0x54>
    return HAL_RET_UNKNOWN_CTL;
 8002dda:	f06f 0313 	mvn.w	r3, #19
 8002dde:	e001      	b.n	8002de4 <_ctl.lto_priv.0+0x54>
    return HAL_RET_UNKNOWN_CTL;
 8002de0:	f06f 0313 	mvn.w	r3, #19
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	b007      	add	sp, #28
 8002de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dec:	0800a75c 	.word	0x0800a75c

08002df0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8002df0:	b508      	push	{r3, lr}

  sd_lld_init();
 8002df2:	f003 fc65 	bl	80066c0 <sd_lld_init>
}
 8002df6:	bd08      	pop	{r3, pc}
	...

08002e00 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002e00:	b500      	push	{lr}
 8002e02:	b087      	sub	sp, #28
 8002e04:	9005      	str	r0, [sp, #20]
 8002e06:	9104      	str	r1, [sp, #16]
 8002e08:	9203      	str	r2, [sp, #12]

  sdp->vmt = &vmt;
 8002e0a:	9b05      	ldr	r3, [sp, #20]
 8002e0c:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <sdObjectInit+0x58>)
 8002e0e:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 8002e10:	9b05      	ldr	r3, [sp, #20]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff feeb 	bl	8002bf0 <osalEventObjectInit.lto_priv.0>
  sdp->state = SD_STOP;
 8002e1a:	9b05      	ldr	r3, [sp, #20]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8002e20:	9b05      	ldr	r3, [sp, #20]
 8002e22:	f103 000c 	add.w	r0, r3, #12
 8002e26:	9b05      	ldr	r3, [sp, #20]
 8002e28:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002e2c:	9b05      	ldr	r3, [sp, #20]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	9b04      	ldr	r3, [sp, #16]
 8002e32:	2210      	movs	r2, #16
 8002e34:	f7ff fa44 	bl	80022c0 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8002e38:	9b05      	ldr	r3, [sp, #20]
 8002e3a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002e3e:	9b05      	ldr	r3, [sp, #20]
 8002e40:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8002e44:	9b05      	ldr	r3, [sp, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	9b03      	ldr	r3, [sp, #12]
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	f7ff fb38 	bl	80024c0 <oqObjectInit>
}
 8002e50:	b007      	add	sp, #28
 8002e52:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e56:	bf00      	nop
 8002e58:	0800a734 	.word	0x0800a734
 8002e5c:	00000000 	.word	0x00000000

08002e60 <sdStart>:
 *                      configuration is used.
 * @return              The operation status.
 *
 * @api
 */
msg_t sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8002e60:	b500      	push	{lr}
 8002e62:	b085      	sub	sp, #20
 8002e64:	9001      	str	r0, [sp, #4]
 8002e66:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck(sdp != NULL);
 8002e68:	9b01      	ldr	r3, [sp, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <sdStart+0x1e>
 8002e78:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <sdStart+0x50>)
 8002e7a:	f004 fa99 	bl	80073b0 <chSysHalt>

  osalSysLock();
 8002e7e:	f7ff fea7 	bl	8002bd0 <osalSysLock.lto_priv.4>
                "invalid state");

#if defined(SD_LLD_ENHANCED_API)
  msg = sd_lld_start(sdp, config);
#else
  sd_lld_start(sdp, config);
 8002e82:	9900      	ldr	r1, [sp, #0]
 8002e84:	9801      	ldr	r0, [sp, #4]
 8002e86:	f003 fc3b 	bl	8006700 <sd_lld_start>
  msg = HAL_RET_SUCCESS;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 8002e8e:	9b03      	ldr	r3, [sp, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <sdStart+0x3c>
    sdp->state = SD_READY;
 8002e94:	9b01      	ldr	r3, [sp, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	721a      	strb	r2, [r3, #8]
 8002e9a:	e002      	b.n	8002ea2 <sdStart+0x42>
  }
  else {
    sdp->state = SD_STOP;
 8002e9c:	9b01      	ldr	r3, [sp, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	721a      	strb	r2, [r3, #8]
  }

  osalSysUnlock();
 8002ea2:	f7ff fe9d 	bl	8002be0 <osalSysUnlock.lto_priv.4>

  return msg;
 8002ea6:	9b03      	ldr	r3, [sp, #12]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	b005      	add	sp, #20
 8002eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eb0:	0800a764 	.word	0x0800a764
	...

08002ec0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8002ec0:	b500      	push	{lr}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	9001      	str	r0, [sp, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
 8002ecc:	f004 fb90 	bl	80075f0 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <sdIncomingDataI+0x26>
 8002ee0:	4810      	ldr	r0, [pc, #64]	; (8002f24 <sdIncomingDataI+0x64>)
 8002ee2:	f004 fa65 	bl	80073b0 <chSysHalt>

  if (iqIsEmptyI(&sdp->iqueue))
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8002eee:	9b01      	ldr	r3, [sp, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fe8b 	bl	8002c10 <osalEventBroadcastFlagsI.lto_priv.1>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	330c      	adds	r3, #12
 8002efe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fa03 	bl	8002310 <iqPutI>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	da06      	bge.n	8002f1e <sdIncomingDataI+0x5e>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8002f10:	9b01      	ldr	r3, [sp, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fe79 	bl	8002c10 <osalEventBroadcastFlagsI.lto_priv.1>
}
 8002f1e:	b003      	add	sp, #12
 8002f20:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f24:	0800a76c 	.word	0x0800a76c
	...

08002f30 <chSysLock.lto_priv.5>:
static inline void chSysLock(void) {
 8002f30:	b500      	push	{lr}
 8002f32:	b083      	sub	sp, #12
 8002f34:	2330      	movs	r3, #48	; 0x30
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	9b01      	ldr	r3, [sp, #4]
 8002f3a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 8002f3e:	f004 fa4f 	bl	80073e0 <__dbg_check_lock>
}
 8002f42:	b003      	add	sp, #12
 8002f44:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002f50 <chSysUnlock.lto_priv.5>:
static inline void chSysUnlock(void) {
 8002f50:	b500      	push	{lr}
 8002f52:	b083      	sub	sp, #12
  __dbg_check_unlock();
 8002f54:	f004 fa6c 	bl	8007430 <__dbg_check_unlock>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	9b01      	ldr	r3, [sp, #4]
 8002f5e:	f383 8811 	msr	BASEPRI, r3
}
 8002f62:	b003      	add	sp, #12
 8002f64:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002f70 <chSysLockFromISR.lto_priv.0>:
 *          not be limited to disabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8002f70:	b500      	push	{lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	2330      	movs	r3, #48	; 0x30
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	9b01      	ldr	r3, [sp, #4]
 8002f7a:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  __stats_start_measure_crit_isr();
  __dbg_check_lock_from_isr();
 8002f7e:	f004 fa7f 	bl	8007480 <__dbg_check_lock_from_isr>
}
 8002f82:	b003      	add	sp, #12
 8002f84:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002f90 <chSysUnlockFromISR.lto_priv.0>:
 *          not be limited to enabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8002f90:	b500      	push	{lr}
 8002f92:	b083      	sub	sp, #12

  __dbg_check_unlock_from_isr();
 8002f94:	f004 fa9c 	bl	80074d0 <__dbg_check_unlock_from_isr>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	9b01      	ldr	r3, [sp, #4]
 8002f9e:	f383 8811 	msr	BASEPRI, r3
  __stats_stop_measure_crit_isr();
  port_unlock_from_isr();
}
 8002fa2:	b003      	add	sp, #12
 8002fa4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002fb0 <osalSysLock.lto_priv.5>:
static inline void osalSysLock(void) {
 8002fb0:	b508      	push	{r3, lr}
  chSysLock();
 8002fb2:	f7ff ffbd 	bl	8002f30 <chSysLock.lto_priv.5>
}
 8002fb6:	bd08      	pop	{r3, pc}
	...

08002fc0 <osalSysUnlock.lto_priv.5>:
static inline void osalSysUnlock(void) {
 8002fc0:	b508      	push	{r3, lr}
  chSysUnlock();
 8002fc2:	f7ff ffc5 	bl	8002f50 <chSysUnlock.lto_priv.5>
}
 8002fc6:	bd08      	pop	{r3, pc}
	...

08002fd0 <osalSysLockFromISR.lto_priv.0>:
static inline void osalSysLockFromISR(void) {
 8002fd0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8002fd2:	f7ff ffcd 	bl	8002f70 <chSysLockFromISR.lto_priv.0>
}
 8002fd6:	bd08      	pop	{r3, pc}
	...

08002fe0 <osalSysUnlockFromISR.lto_priv.0>:
static inline void osalSysUnlockFromISR(void) {
 8002fe0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8002fe2:	f7ff ffd5 	bl	8002f90 <chSysUnlockFromISR.lto_priv.0>
}
 8002fe6:	bd08      	pop	{r3, pc}
	...

08002ff0 <osalThreadDequeueAllI.lto_priv.2>:
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8002ff0:	b500      	push	{lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	9001      	str	r0, [sp, #4]
 8002ff6:	9100      	str	r1, [sp, #0]
  chThdDequeueAllI(tqp, msg);
 8002ff8:	9900      	ldr	r1, [sp, #0]
 8002ffa:	9801      	ldr	r0, [sp, #4]
 8002ffc:	f005 fb70 	bl	80086e0 <chThdDequeueAllI>
}
 8003000:	b003      	add	sp, #12
 8003002:	f85d fb04 	ldr.w	pc, [sp], #4
 8003006:	bf00      	nop
	...

08003010 <osalEventObjectInit.lto_priv.1>:
static inline void osalEventObjectInit(event_source_t *esp) {
 8003010:	b500      	push	{lr}
 8003012:	b083      	sub	sp, #12
 8003014:	9001      	str	r0, [sp, #4]
  chEvtObjectInit(esp);
 8003016:	9801      	ldr	r0, [sp, #4]
 8003018:	f005 fda2 	bl	8008b60 <chEvtObjectInit>
}
 800301c:	b003      	add	sp, #12
 800301e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003022:	bf00      	nop
	...

08003030 <osalEventBroadcastFlagsI.lto_priv.2>:
                                            eventflags_t flags) {
 8003030:	b500      	push	{lr}
 8003032:	b083      	sub	sp, #12
 8003034:	9001      	str	r0, [sp, #4]
 8003036:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8003038:	9900      	ldr	r1, [sp, #0]
 800303a:	9801      	ldr	r0, [sp, #4]
 800303c:	f005 fde8 	bl	8008c10 <chEvtBroadcastFlagsI>
}
 8003040:	b003      	add	sp, #12
 8003042:	f85d fb04 	ldr.w	pc, [sp], #4
 8003046:	bf00      	nop
	...

08003050 <sdu_start_receive>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8003050:	b500      	push	{lr}
 8003052:	b085      	sub	sp, #20
 8003054:	9001      	str	r0, [sp, #4]
  uint8_t *buf;

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8003056:	9b01      	ldr	r3, [sp, #4]
 8003058:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d103      	bne.n	800306c <sdu_start_receive+0x1c>
      (sdup->state != SDU_READY)) {
 8003064:	9b01      	ldr	r3, [sp, #4]
 8003066:	7a1b      	ldrb	r3, [r3, #8]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8003068:	2b02      	cmp	r3, #2
 800306a:	d001      	beq.n	8003070 <sdu_start_receive+0x20>
    return true;
 800306c:	2301      	movs	r3, #1
 800306e:	e02b      	b.n	80030c8 <sdu_start_receive+0x78>
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8003070:	9b01      	ldr	r3, [sp, #4]
 8003072:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	895a      	ldrh	r2, [r3, #10]
 800307a:	9b01      	ldr	r3, [sp, #4]
 800307c:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8003080:	795b      	ldrb	r3, [r3, #5]
 8003082:	4619      	mov	r1, r3
 8003084:	2301      	movs	r3, #1
 8003086:	408b      	lsls	r3, r1
 8003088:	b29b      	uxth	r3, r3
 800308a:	4013      	ands	r3, r2
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <sdu_start_receive+0x46>
    return true;
 8003092:	2301      	movs	r3, #1
 8003094:	e018      	b.n	80030c8 <sdu_start_receive+0x78>
  }

  /* Checking if there is a buffer ready for incoming data.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8003096:	9b01      	ldr	r3, [sp, #4]
 8003098:	330c      	adds	r3, #12
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fc08 	bl	80018b0 <ibqGetEmptyBufferI>
 80030a0:	9003      	str	r0, [sp, #12]
  if (buf == NULL) {
 80030a2:	9b03      	ldr	r3, [sp, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <sdu_start_receive+0x5c>
    return true;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e00d      	b.n	80030c8 <sdu_start_receive+0x78>
  }

  /* Buffer found, starting a new transaction.*/
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80030ac:	9b01      	ldr	r3, [sp, #4]
 80030ae:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	9b01      	ldr	r3, [sp, #4]
 80030b6:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80030ba:	7959      	ldrb	r1, [r3, #5]
 80030bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c0:	9a03      	ldr	r2, [sp, #12]
 80030c2:	f000 fefd 	bl	8003ec0 <usbStartReceiveI>
                   buf, SERIAL_USB_BUFFERS_SIZE);

  return false;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	b005      	add	sp, #20
 80030cc:	f85d fb04 	ldr.w	pc, [sp], #4

080030d0 <_write.lto_priv.1>:

/*
 * Interface implementation.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 80030d0:	b500      	push	{lr}
 80030d2:	b085      	sub	sp, #20
 80030d4:	9003      	str	r0, [sp, #12]
 80030d6:	9102      	str	r1, [sp, #8]
 80030d8:	9201      	str	r2, [sp, #4]

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 80030da:	9b03      	ldr	r3, [sp, #12]
 80030dc:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030e4:	9a01      	ldr	r2, [sp, #4]
 80030e6:	9902      	ldr	r1, [sp, #8]
 80030e8:	f7fe feda 	bl	8001ea0 <obqWriteTimeout>
 80030ec:	4603      	mov	r3, r0
                         n, TIME_INFINITE);
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	b005      	add	sp, #20
 80030f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80030f6:	bf00      	nop
	...

08003100 <_read.lto_priv.1>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8003100:	b500      	push	{lr}
 8003102:	b085      	sub	sp, #20
 8003104:	9003      	str	r0, [sp, #12]
 8003106:	9102      	str	r1, [sp, #8]
 8003108:	9201      	str	r2, [sp, #4]

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 800310a:	9b03      	ldr	r3, [sp, #12]
 800310c:	f103 000c 	add.w	r0, r3, #12
 8003110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003114:	9a01      	ldr	r2, [sp, #4]
 8003116:	9902      	ldr	r1, [sp, #8]
 8003118:	f7fe fcba 	bl	8001a90 <ibqReadTimeout>
 800311c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 800311e:	4618      	mov	r0, r3
 8003120:	b005      	add	sp, #20
 8003122:	f85d fb04 	ldr.w	pc, [sp], #4
 8003126:	bf00      	nop
	...

08003130 <_put.lto_priv.1>:

static msg_t _put(void *ip, uint8_t b) {
 8003130:	b500      	push	{lr}
 8003132:	b083      	sub	sp, #12
 8003134:	9001      	str	r0, [sp, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	f88d 3003 	strb.w	r3, [sp, #3]

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 800313c:	9b01      	ldr	r3, [sp, #4]
 800313e:	3344      	adds	r3, #68	; 0x44
 8003140:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe fe71 	bl	8001e30 <obqPutTimeout>
 800314e:	4603      	mov	r3, r0
}
 8003150:	4618      	mov	r0, r3
 8003152:	b003      	add	sp, #12
 8003154:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003160 <_get.lto_priv.1>:

static msg_t _get(void *ip) {
 8003160:	b500      	push	{lr}
 8003162:	b083      	sub	sp, #12
 8003164:	9001      	str	r0, [sp, #4]

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8003166:	9b01      	ldr	r3, [sp, #4]
 8003168:	330c      	adds	r3, #12
 800316a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fc5e 	bl	8001a30 <ibqGetTimeout>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	b003      	add	sp, #12
 800317a:	f85d fb04 	ldr.w	pc, [sp], #4
 800317e:	bf00      	nop

08003180 <_putt.lto_priv.1>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8003180:	b500      	push	{lr}
 8003182:	b085      	sub	sp, #20
 8003184:	9003      	str	r0, [sp, #12]
 8003186:	460b      	mov	r3, r1
 8003188:	9201      	str	r2, [sp, #4]
 800318a:	f88d 300b 	strb.w	r3, [sp, #11]

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 800318e:	9b03      	ldr	r3, [sp, #12]
 8003190:	3344      	adds	r3, #68	; 0x44
 8003192:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8003196:	9a01      	ldr	r2, [sp, #4]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe fe49 	bl	8001e30 <obqPutTimeout>
 800319e:	4603      	mov	r3, r0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	b005      	add	sp, #20
 80031a4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080031b0 <_gett.lto_priv.1>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 80031b0:	b500      	push	{lr}
 80031b2:	b083      	sub	sp, #12
 80031b4:	9001      	str	r0, [sp, #4]
 80031b6:	9100      	str	r1, [sp, #0]

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 80031b8:	9b01      	ldr	r3, [sp, #4]
 80031ba:	330c      	adds	r3, #12
 80031bc:	9900      	ldr	r1, [sp, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe fc36 	bl	8001a30 <ibqGetTimeout>
 80031c4:	4603      	mov	r3, r0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	b003      	add	sp, #12
 80031ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80031ce:	bf00      	nop

080031d0 <_writet.lto_priv.1>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 80031d0:	b500      	push	{lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	9003      	str	r0, [sp, #12]
 80031d6:	9102      	str	r1, [sp, #8]
 80031d8:	9201      	str	r2, [sp, #4]
 80031da:	9300      	str	r3, [sp, #0]

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 80031dc:	9b03      	ldr	r3, [sp, #12]
 80031de:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80031e2:	9b00      	ldr	r3, [sp, #0]
 80031e4:	9a01      	ldr	r2, [sp, #4]
 80031e6:	9902      	ldr	r1, [sp, #8]
 80031e8:	f7fe fe5a 	bl	8001ea0 <obqWriteTimeout>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	b005      	add	sp, #20
 80031f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80031f6:	bf00      	nop
	...

08003200 <_readt.lto_priv.1>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8003200:	b500      	push	{lr}
 8003202:	b085      	sub	sp, #20
 8003204:	9003      	str	r0, [sp, #12]
 8003206:	9102      	str	r1, [sp, #8]
 8003208:	9201      	str	r2, [sp, #4]
 800320a:	9300      	str	r3, [sp, #0]

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 800320c:	9b03      	ldr	r3, [sp, #12]
 800320e:	f103 000c 	add.w	r0, r3, #12
 8003212:	9b00      	ldr	r3, [sp, #0]
 8003214:	9a01      	ldr	r2, [sp, #4]
 8003216:	9902      	ldr	r1, [sp, #8]
 8003218:	f7fe fc3a 	bl	8001a90 <ibqReadTimeout>
 800321c:	4603      	mov	r3, r0
}
 800321e:	4618      	mov	r0, r3
 8003220:	b005      	add	sp, #20
 8003222:	f85d fb04 	ldr.w	pc, [sp], #4
 8003226:	bf00      	nop
	...

08003230 <_ctl.lto_priv.1>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8003230:	b500      	push	{lr}
 8003232:	b087      	sub	sp, #28
 8003234:	9003      	str	r0, [sp, #12]
 8003236:	9102      	str	r1, [sp, #8]
 8003238:	9201      	str	r2, [sp, #4]
  SerialUSBDriver *sdup = (SerialUSBDriver *)ip;
 800323a:	9b03      	ldr	r3, [sp, #12]
 800323c:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdup != NULL);
 800323e:	9b05      	ldr	r3, [sp, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <_ctl.lto_priv.1+0x24>
 800324e:	480c      	ldr	r0, [pc, #48]	; (8003280 <_ctl.lto_priv.1+0x50>)
 8003250:	f004 f8ae 	bl	80073b0 <chSysHalt>

  switch (operation) {
 8003254:	9b02      	ldr	r3, [sp, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <_ctl.lto_priv.1+0x46>
 800325a:	9b02      	ldr	r3, [sp, #8]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10a      	bne.n	8003276 <_ctl.lto_priv.1+0x46>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 8003260:	9b01      	ldr	r3, [sp, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <_ctl.lto_priv.1+0x46>
 8003270:	4803      	ldr	r0, [pc, #12]	; (8003280 <_ctl.lto_priv.1+0x50>)
 8003272:	f004 f89d 	bl	80073b0 <chSysHalt>
    return sdu_lld_control(sdup, operation, arg);
#else
    break;
#endif
  }
  return MSG_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	b007      	add	sp, #28
 800327c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003280:	0800a7a4 	.word	0x0800a7a4
	...

08003290 <ibnotify>:
/**
 * @brief   Notification of empty buffer released into the input buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void ibnotify(io_buffers_queue_t *bqp) {
 8003290:	b500      	push	{lr}
 8003292:	b085      	sub	sp, #20
 8003294:	9001      	str	r0, [sp, #4]
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8003296:	9b01      	ldr	r3, [sp, #4]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	9303      	str	r3, [sp, #12]
  (void) sdu_start_receive(sdup);
 800329c:	9803      	ldr	r0, [sp, #12]
 800329e:	f7ff fed7 	bl	8003050 <sdu_start_receive>
}
 80032a2:	b005      	add	sp, #20
 80032a4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080032b0 <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 80032b0:	b500      	push	{lr}
 80032b2:	b087      	sub	sp, #28
 80032b4:	9001      	str	r0, [sp, #4]
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 80032b6:	9b01      	ldr	r3, [sp, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	9305      	str	r3, [sp, #20]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80032bc:	9b05      	ldr	r3, [sp, #20]
 80032be:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d129      	bne.n	800331e <obnotify+0x6e>
      (sdup->state != SDU_READY)) {
 80032ca:	9b05      	ldr	r3, [sp, #20]
 80032cc:	7a1b      	ldrb	r3, [r3, #8]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d125      	bne.n	800331e <obnotify+0x6e>
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80032d2:	9b05      	ldr	r3, [sp, #20]
 80032d4:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	891a      	ldrh	r2, [r3, #8]
 80032dc:	9b05      	ldr	r3, [sp, #20]
 80032de:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80032e2:	791b      	ldrb	r3, [r3, #4]
 80032e4:	4619      	mov	r1, r3
 80032e6:	2301      	movs	r3, #1
 80032e8:	408b      	lsls	r3, r1
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	4013      	ands	r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d115      	bne.n	8003320 <obnotify+0x70>
    /* Getting a full buffer, a buffer is available for sure because this
       callback is invoked when one has been inserted.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80032f4:	9b05      	ldr	r3, [sp, #20]
 80032f6:	3344      	adds	r3, #68	; 0x44
 80032f8:	aa03      	add	r2, sp, #12
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe fcc7 	bl	8001c90 <obqGetFullBufferI>
 8003302:	9004      	str	r0, [sp, #16]
    osalDbgAssert(buf != NULL, "buffer not found");
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8003304:	9b05      	ldr	r3, [sp, #20]
 8003306:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	9b05      	ldr	r3, [sp, #20]
 800330e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8003312:	7919      	ldrb	r1, [r3, #4]
 8003314:	9b03      	ldr	r3, [sp, #12]
 8003316:	9a04      	ldr	r2, [sp, #16]
 8003318:	f000 fe1a 	bl	8003f50 <usbStartTransmitI>
 800331c:	e000      	b.n	8003320 <obnotify+0x70>
    return;
 800331e:	bf00      	nop
  }
}
 8003320:	b007      	add	sp, #28
 8003322:	f85d fb04 	ldr.w	pc, [sp], #4
 8003326:	bf00      	nop
	...

08003330 <sduInit>:
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
	...

08003340 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8003340:	b500      	push	{lr}
 8003342:	b087      	sub	sp, #28
 8003344:	9005      	str	r0, [sp, #20]

  sdup->vmt = &vmt;
 8003346:	9b05      	ldr	r3, [sp, #20]
 8003348:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <sduObjectInit+0x68>)
 800334a:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdup->event);
 800334c:	9b05      	ldr	r3, [sp, #20]
 800334e:	3304      	adds	r3, #4
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fe5d 	bl	8003010 <osalEventObjectInit.lto_priv.1>
  sdup->state = SDU_STOP;
 8003356:	9b05      	ldr	r3, [sp, #20]
 8003358:	2201      	movs	r2, #1
 800335a:	721a      	strb	r2, [r3, #8]
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 800335c:	9b05      	ldr	r3, [sp, #20]
 800335e:	f103 000c 	add.w	r0, r3, #12
 8003362:	9b05      	ldr	r3, [sp, #20]
 8003364:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003368:	9b05      	ldr	r3, [sp, #20]
 800336a:	9302      	str	r3, [sp, #8]
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <sduObjectInit+0x6c>)
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	2302      	movs	r3, #2
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003378:	2101      	movs	r1, #1
 800337a:	f7fe fa19 	bl	80017b0 <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, true, sdup->ob,
 800337e:	9b05      	ldr	r3, [sp, #20]
 8003380:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8003384:	9b05      	ldr	r3, [sp, #20]
 8003386:	f503 7221 	add.w	r2, r3, #644	; 0x284
 800338a:	9b05      	ldr	r3, [sp, #20]
 800338c:	9302      	str	r3, [sp, #8]
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <sduObjectInit+0x70>)
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2302      	movs	r3, #2
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339a:	2101      	movs	r1, #1
 800339c:	f7fe fbf8 	bl	8001b90 <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 80033a0:	b007      	add	sp, #28
 80033a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033a6:	bf00      	nop
 80033a8:	0800a77c 	.word	0x0800a77c
 80033ac:	08003291 	.word	0x08003291
 80033b0:	080032b1 	.word	0x080032b1
	...

080033c0 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 * @return              The operation status.
 *
 * @api
 */
msg_t sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
 80033c0:	b500      	push	{lr}
 80033c2:	b085      	sub	sp, #20
 80033c4:	9001      	str	r0, [sp, #4]
 80033c6:	9100      	str	r1, [sp, #0]
  USBDriver *usbp = config->usbp;
 80033c8:	9b00      	ldr	r3, [sp, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	9303      	str	r3, [sp, #12]

  osalDbgCheck(sdup != NULL);
 80033ce:	9b01      	ldr	r3, [sp, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <sduStart+0x24>
 80033de:	4818      	ldr	r0, [pc, #96]	; (8003440 <sduStart+0x80>)
 80033e0:	f003 ffe6 	bl	80073b0 <chSysHalt>

  osalSysLock();
 80033e4:	f7ff fde4 	bl	8002fb0 <osalSysLock.lto_priv.5>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");

  usbp->in_params[config->bulk_in - 1U]   = sdup;
 80033e8:	9b00      	ldr	r3, [sp, #0]
 80033ea:	791b      	ldrb	r3, [r3, #4]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	9a03      	ldr	r2, [sp, #12]
 80033f0:	330a      	adds	r3, #10
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	9a01      	ldr	r2, [sp, #4]
 80033f8:	605a      	str	r2, [r3, #4]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80033fa:	9b00      	ldr	r3, [sp, #0]
 80033fc:	795b      	ldrb	r3, [r3, #5]
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	9b03      	ldr	r3, [sp, #12]
 8003402:	3212      	adds	r2, #18
 8003404:	9901      	ldr	r1, [sp, #4]
 8003406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 800340a:	9b00      	ldr	r3, [sp, #0]
 800340c:	799b      	ldrb	r3, [r3, #6]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <sduStart+0x64>
    usbp->in_params[config->int_in - 1U]  = sdup;
 8003412:	9b00      	ldr	r3, [sp, #0]
 8003414:	799b      	ldrb	r3, [r3, #6]
 8003416:	3b01      	subs	r3, #1
 8003418:	9a03      	ldr	r2, [sp, #12]
 800341a:	330a      	adds	r3, #10
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	9a01      	ldr	r2, [sp, #4]
 8003422:	605a      	str	r2, [r3, #4]
  }
  sdup->config = config;
 8003424:	9b01      	ldr	r3, [sp, #4]
 8003426:	9a00      	ldr	r2, [sp, #0]
 8003428:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
  sdup->state = SDU_READY;
 800342c:	9b01      	ldr	r3, [sp, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	721a      	strb	r2, [r3, #8]

  osalSysUnlock();
 8003432:	f7ff fdc5 	bl	8002fc0 <osalSysUnlock.lto_priv.5>

  return HAL_RET_SUCCESS;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	b005      	add	sp, #20
 800343c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003440:	0800a7ac 	.word	0x0800a7ac
	...

08003450 <sduSuspendHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSuspendHookI(SerialUSBDriver *sdup) {
 8003450:	b500      	push	{lr}
 8003452:	b083      	sub	sp, #12
 8003454:	9001      	str	r0, [sp, #4]

  /* Avoiding events spam.*/
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8003456:	9b01      	ldr	r3, [sp, #4]
 8003458:	7d1b      	ldrb	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <sduSuspendHookI+0x18>
 800345e:	9b01      	ldr	r3, [sp, #4]
 8003460:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d11b      	bne.n	80034a0 <sduSuspendHookI+0x50>
    return;
  }
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
 8003468:	9b01      	ldr	r3, [sp, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fdde 	bl	8003030 <osalEventBroadcastFlagsI.lto_priv.2>
  bqSuspendI(&sdup->ibqueue);
 8003474:	9b01      	ldr	r3, [sp, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	751a      	strb	r2, [r3, #20]
 800347a:	9b01      	ldr	r3, [sp, #4]
 800347c:	330c      	adds	r3, #12
 800347e:	f06f 0101 	mvn.w	r1, #1
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fdb4 	bl	8002ff0 <osalThreadDequeueAllI.lto_priv.2>
  bqSuspendI(&sdup->obqueue);
 8003488:	9b01      	ldr	r3, [sp, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003490:	9b01      	ldr	r3, [sp, #4]
 8003492:	3344      	adds	r3, #68	; 0x44
 8003494:	f06f 0101 	mvn.w	r1, #1
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fda9 	bl	8002ff0 <osalThreadDequeueAllI.lto_priv.2>
 800349e:	e000      	b.n	80034a2 <sduSuspendHookI+0x52>
    return;
 80034a0:	bf00      	nop
}
 80034a2:	b003      	add	sp, #12
 80034a4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080034b0 <sduWakeupHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduWakeupHookI(SerialUSBDriver *sdup) {
 80034b0:	b500      	push	{lr}
 80034b2:	b083      	sub	sp, #12
 80034b4:	9001      	str	r0, [sp, #4]

  chnAddFlagsI(sdup, CHN_CONNECTED);
 80034b6:	9b01      	ldr	r3, [sp, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2101      	movs	r1, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fdb7 	bl	8003030 <osalEventBroadcastFlagsI.lto_priv.2>
  bqResumeX(&sdup->ibqueue);
 80034c2:	9b01      	ldr	r3, [sp, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	751a      	strb	r2, [r3, #20]
  bqResumeX(&sdup->obqueue);
 80034c8:	9b01      	ldr	r3, [sp, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80034d0:	b003      	add	sp, #12
 80034d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80034d6:	bf00      	nop
	...

080034e0 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 80034e0:	b500      	push	{lr}
 80034e2:	b083      	sub	sp, #12
 80034e4:	9001      	str	r0, [sp, #4]

  ibqResetI(&sdup->ibqueue);
 80034e6:	9b01      	ldr	r3, [sp, #4]
 80034e8:	330c      	adds	r3, #12
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe f9c0 	bl	8001870 <ibqResetI>
  bqResumeX(&sdup->ibqueue);
 80034f0:	9b01      	ldr	r3, [sp, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	751a      	strb	r2, [r3, #20]
  obqResetI(&sdup->obqueue);
 80034f6:	9b01      	ldr	r3, [sp, #4]
 80034f8:	3344      	adds	r3, #68	; 0x44
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fba8 	bl	8001c50 <obqResetI>
  bqResumeX(&sdup->obqueue);
 8003500:	9b01      	ldr	r3, [sp, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  chnAddFlagsI(sdup, CHN_CONNECTED);
 8003508:	9b01      	ldr	r3, [sp, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fd8e 	bl	8003030 <osalEventBroadcastFlagsI.lto_priv.2>
  (void) sdu_start_receive(sdup);
 8003514:	9801      	ldr	r0, [sp, #4]
 8003516:	f7ff fd9b 	bl	8003050 <sdu_start_receive>
}
 800351a:	b003      	add	sp, #12
 800351c:	f85d fb04 	ldr.w	pc, [sp], #4

08003520 <sduRequestsHook>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @return              The hook status.
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {
 8003520:	b082      	sub	sp, #8
 8003522:	9001      	str	r0, [sp, #4]

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8003524:	9b01      	ldr	r3, [sp, #4]
 8003526:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800352a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800352e:	2b20      	cmp	r3, #32
 8003530:	d12d      	bne.n	800358e <sduRequestsHook+0x6e>
    switch (usbp->setup[1]) {
 8003532:	9b01      	ldr	r3, [sp, #4]
 8003534:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8003538:	2b22      	cmp	r3, #34	; 0x22
 800353a:	d01b      	beq.n	8003574 <sduRequestsHook+0x54>
 800353c:	2b22      	cmp	r3, #34	; 0x22
 800353e:	dc24      	bgt.n	800358a <sduRequestsHook+0x6a>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d00c      	beq.n	800355e <sduRequestsHook+0x3e>
 8003544:	2b21      	cmp	r3, #33	; 0x21
 8003546:	d120      	bne.n	800358a <sduRequestsHook+0x6a>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8003548:	9b01      	ldr	r3, [sp, #4]
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <sduRequestsHook+0x78>)
 800354c:	669a      	str	r2, [r3, #104]	; 0x68
 800354e:	9b01      	ldr	r3, [sp, #4]
 8003550:	2207      	movs	r2, #7
 8003552:	66da      	str	r2, [r3, #108]	; 0x6c
 8003554:	9b01      	ldr	r3, [sp, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	671a      	str	r2, [r3, #112]	; 0x70
      return true;
 800355a:	2301      	movs	r3, #1
 800355c:	e018      	b.n	8003590 <sduRequestsHook+0x70>
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800355e:	9b01      	ldr	r3, [sp, #4]
 8003560:	4a0d      	ldr	r2, [pc, #52]	; (8003598 <sduRequestsHook+0x78>)
 8003562:	669a      	str	r2, [r3, #104]	; 0x68
 8003564:	9b01      	ldr	r3, [sp, #4]
 8003566:	2207      	movs	r2, #7
 8003568:	66da      	str	r2, [r3, #108]	; 0x6c
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	671a      	str	r2, [r3, #112]	; 0x70
      return true;
 8003570:	2301      	movs	r3, #1
 8003572:	e00d      	b.n	8003590 <sduRequestsHook+0x70>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003574:	9b01      	ldr	r3, [sp, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	669a      	str	r2, [r3, #104]	; 0x68
 800357a:	9b01      	ldr	r3, [sp, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003580:	9b01      	ldr	r3, [sp, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	671a      	str	r2, [r3, #112]	; 0x70
      return true;
 8003586:	2301      	movs	r3, #1
 8003588:	e002      	b.n	8003590 <sduRequestsHook+0x70>
    default:
      return false;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <sduRequestsHook+0x70>
    }
  }
  return false;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	b002      	add	sp, #8
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000800 	.word	0x20000800
 800359c:	00000000 	.word	0x00000000

080035a0 <sduSOFHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 80035a0:	b500      	push	{lr}
 80035a2:	b085      	sub	sp, #20
 80035a4:	9001      	str	r0, [sp, #4]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80035a6:	9b01      	ldr	r3, [sp, #4]
 80035a8:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d131      	bne.n	8003618 <sduSOFHookI+0x78>
      (sdup->state != SDU_READY)) {
 80035b4:	9b01      	ldr	r3, [sp, #4]
 80035b6:	7a1b      	ldrb	r3, [r3, #8]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d12d      	bne.n	8003618 <sduSOFHookI+0x78>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80035bc:	9b01      	ldr	r3, [sp, #4]
 80035be:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	891a      	ldrh	r2, [r3, #8]
 80035c6:	9b01      	ldr	r3, [sp, #4]
 80035c8:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80035cc:	791b      	ldrb	r3, [r3, #4]
 80035ce:	4619      	mov	r1, r3
 80035d0:	2301      	movs	r3, #1
 80035d2:	408b      	lsls	r3, r1
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	4013      	ands	r3, r2
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11e      	bne.n	800361c <sduSOFHookI+0x7c>
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 80035de:	9b01      	ldr	r3, [sp, #4]
 80035e0:	3344      	adds	r3, #68	; 0x44
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fcdc 	bl	8001fa0 <obqTryFlushI>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d017      	beq.n	800361e <sduSOFHookI+0x7e>
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80035ee:	9b01      	ldr	r3, [sp, #4]
 80035f0:	3344      	adds	r3, #68	; 0x44
 80035f2:	aa02      	add	r2, sp, #8
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fb4a 	bl	8001c90 <obqGetFullBufferI>
 80035fc:	9003      	str	r0, [sp, #12]

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80035fe:	9b01      	ldr	r3, [sp, #4]
 8003600:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	9b01      	ldr	r3, [sp, #4]
 8003608:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800360c:	7919      	ldrb	r1, [r3, #4]
 800360e:	9b02      	ldr	r3, [sp, #8]
 8003610:	9a03      	ldr	r2, [sp, #12]
 8003612:	f000 fc9d 	bl	8003f50 <usbStartTransmitI>
 8003616:	e002      	b.n	800361e <sduSOFHookI+0x7e>
    return;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <sduSOFHookI+0x7e>
    return;
 800361c:	bf00      	nop
  }
}
 800361e:	b005      	add	sp, #20
 8003620:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003630 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8003630:	b500      	push	{lr}
 8003632:	b087      	sub	sp, #28
 8003634:	9001      	str	r0, [sp, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800363c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003640:	3b01      	subs	r3, #1
 8003642:	9a01      	ldr	r2, [sp, #4]
 8003644:	330a      	adds	r3, #10
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	9305      	str	r3, [sp, #20]

  if (sdup == NULL) {
 800364e:	9b05      	ldr	r3, [sp, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d056      	beq.n	8003702 <sduDataTransmitted+0xd2>
    return;
  }

  osalSysLockFromISR();
 8003654:	f7ff fcbc 	bl	8002fd0 <osalSysLockFromISR.lto_priv.0>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);
 8003658:	9b05      	ldr	r3, [sp, #20]
 800365a:	3304      	adds	r3, #4
 800365c:	2108      	movs	r1, #8
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fce6 	bl	8003030 <osalEventBroadcastFlagsI.lto_priv.2>

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8003664:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003668:	9a01      	ldr	r2, [sp, #4]
 800366a:	3302      	adds	r3, #2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d004      	beq.n	8003684 <sduDataTransmitted+0x54>
    obqReleaseEmptyBufferI(&sdup->obqueue);
 800367a:	9b05      	ldr	r3, [sp, #20]
 800367c:	3344      	adds	r3, #68	; 0x44
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fb36 	bl	8001cf0 <obqReleaseEmptyBufferI>
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8003684:	9b05      	ldr	r3, [sp, #20]
 8003686:	3344      	adds	r3, #68	; 0x44
 8003688:	aa03      	add	r2, sp, #12
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe faff 	bl	8001c90 <obqGetFullBufferI>
 8003692:	9004      	str	r0, [sp, #16]

  if (buf != NULL) {
 8003694:	9b04      	ldr	r3, [sp, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <sduDataTransmitted+0x7a>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 800369a:	9b03      	ldr	r3, [sp, #12]
 800369c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80036a0:	9a04      	ldr	r2, [sp, #16]
 80036a2:	9801      	ldr	r0, [sp, #4]
 80036a4:	f000 fc54 	bl	8003f50 <usbStartTransmitI>
 80036a8:	e028      	b.n	80036fc <sduDataTransmitted+0xcc>
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80036aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80036ae:	9a01      	ldr	r2, [sp, #4]
 80036b0:	3302      	adds	r3, #2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01d      	beq.n	80036fc <sduDataTransmitted+0xcc>
           ((usbp->epc[ep]->in_state->txsize &
 80036c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80036c4:	9a01      	ldr	r2, [sp, #4]
 80036c6:	3302      	adds	r3, #2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	681a      	ldr	r2, [r3, #0]
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 80036d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80036d6:	9901      	ldr	r1, [sp, #4]
 80036d8:	3302      	adds	r3, #2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	8a1b      	ldrh	r3, [r3, #16]
 80036e2:	3b01      	subs	r3, #1
           ((usbp->epc[ep]->in_state->txsize &
 80036e4:	4013      	ands	r3, r2
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <sduDataTransmitted+0xcc>
    /* Transmit zero sized packet in case the last one has maximum allowed
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 80036ea:	9b01      	ldr	r3, [sp, #4]
 80036ec:	f103 0274 	add.w	r2, r3, #116	; 0x74
 80036f0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80036f4:	2300      	movs	r3, #0
 80036f6:	9801      	ldr	r0, [sp, #4]
 80036f8:	f000 fc2a 	bl	8003f50 <usbStartTransmitI>
  }
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
 80036fc:	f7ff fc70 	bl	8002fe0 <osalSysUnlockFromISR.lto_priv.0>
 8003700:	e000      	b.n	8003704 <sduDataTransmitted+0xd4>
    return;
 8003702:	bf00      	nop
}
 8003704:	b007      	add	sp, #28
 8003706:	f85d fb04 	ldr.w	pc, [sp], #4
 800370a:	bf00      	nop
 800370c:	0000      	movs	r0, r0
	...

08003710 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8003710:	b500      	push	{lr}
 8003712:	b085      	sub	sp, #20
 8003714:	9001      	str	r0, [sp, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	f88d 3003 	strb.w	r3, [sp, #3]
  size_t size;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800371c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003720:	1e5a      	subs	r2, r3, #1
 8003722:	9b01      	ldr	r3, [sp, #4]
 8003724:	3212      	adds	r2, #18
 8003726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372a:	9303      	str	r3, [sp, #12]

  if (sdup == NULL) {
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d025      	beq.n	800377e <sduDataReceived+0x6e>
    return;
  }

  osalSysLockFromISR();
 8003732:	f7ff fc4d 	bl	8002fd0 <osalSysLockFromISR.lto_priv.0>

  /* Checking for zero-size transactions.*/
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8003736:	9b03      	ldr	r3, [sp, #12]
 8003738:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	9b03      	ldr	r3, [sp, #12]
 8003740:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8003744:	795b      	ldrb	r3, [r3, #5]
 8003746:	3302      	adds	r3, #2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	9302      	str	r3, [sp, #8]
                                       sdup->config->bulk_out);
  if (size > (size_t)0) {
 8003754:	9b02      	ldr	r3, [sp, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <sduDataReceived+0x62>
    /* Signaling that data is available in the input queue.*/
    chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);
 800375a:	9b03      	ldr	r3, [sp, #12]
 800375c:	3304      	adds	r3, #4
 800375e:	2104      	movs	r1, #4
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fc65 	bl	8003030 <osalEventBroadcastFlagsI.lto_priv.2>

    /* Posting the filled buffer in the queue.*/
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	330c      	adds	r3, #12
 800376a:	9902      	ldr	r1, [sp, #8]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe f8bf 	bl	80018f0 <ibqPostFullBufferI>
  }

  /* The endpoint cannot be busy, we are in the context of the callback,
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  (void) sdu_start_receive(sdup);
 8003772:	9803      	ldr	r0, [sp, #12]
 8003774:	f7ff fc6c 	bl	8003050 <sdu_start_receive>

  osalSysUnlockFromISR();
 8003778:	f7ff fc32 	bl	8002fe0 <osalSysUnlockFromISR.lto_priv.0>
 800377c:	e000      	b.n	8003780 <sduDataReceived+0x70>
    return;
 800377e:	bf00      	nop
}
 8003780:	b005      	add	sp, #20
 8003782:	f85d fb04 	ldr.w	pc, [sp], #4
 8003786:	bf00      	nop
	...

08003790 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8003790:	b082      	sub	sp, #8
 8003792:	9001      	str	r0, [sp, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)usbp;
  (void)ep;
}
 800379a:	b002      	add	sp, #8
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop

080037a0 <chSysLock.lto_priv.6>:
static inline void chSysLock(void) {
 80037a0:	b500      	push	{lr}
 80037a2:	b083      	sub	sp, #12
 80037a4:	2330      	movs	r3, #48	; 0x30
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	9b01      	ldr	r3, [sp, #4]
 80037aa:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 80037ae:	f003 fe17 	bl	80073e0 <__dbg_check_lock>
}
 80037b2:	b003      	add	sp, #12
 80037b4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080037c0 <chSysUnlock.lto_priv.6>:
static inline void chSysUnlock(void) {
 80037c0:	b500      	push	{lr}
 80037c2:	b083      	sub	sp, #12
  __dbg_check_unlock();
 80037c4:	f003 fe34 	bl	8007430 <__dbg_check_unlock>
 80037c8:	2300      	movs	r3, #0
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	9b01      	ldr	r3, [sp, #4]
 80037ce:	f383 8811 	msr	BASEPRI, r3
}
 80037d2:	b003      	add	sp, #12
 80037d4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080037e0 <chSysLockFromISR.lto_priv.1>:
static inline void chSysLockFromISR(void) {
 80037e0:	b500      	push	{lr}
 80037e2:	b083      	sub	sp, #12
 80037e4:	2330      	movs	r3, #48	; 0x30
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	9b01      	ldr	r3, [sp, #4]
 80037ea:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock_from_isr();
 80037ee:	f003 fe47 	bl	8007480 <__dbg_check_lock_from_isr>
}
 80037f2:	b003      	add	sp, #12
 80037f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003800 <chSysUnlockFromISR.lto_priv.1>:
static inline void chSysUnlockFromISR(void) {
 8003800:	b500      	push	{lr}
 8003802:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
 8003804:	f003 fe64 	bl	80074d0 <__dbg_check_unlock_from_isr>
 8003808:	2300      	movs	r3, #0
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	9b01      	ldr	r3, [sp, #4]
 800380e:	f383 8811 	msr	BASEPRI, r3
}
 8003812:	b003      	add	sp, #12
 8003814:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003820 <osalSysLock.lto_priv.6>:
static inline void osalSysLock(void) {
 8003820:	b508      	push	{r3, lr}
  chSysLock();
 8003822:	f7ff ffbd 	bl	80037a0 <chSysLock.lto_priv.6>
}
 8003826:	bd08      	pop	{r3, pc}
	...

08003830 <osalSysUnlock.lto_priv.6>:
static inline void osalSysUnlock(void) {
 8003830:	b508      	push	{r3, lr}
  chSysUnlock();
 8003832:	f7ff ffc5 	bl	80037c0 <chSysUnlock.lto_priv.6>
}
 8003836:	bd08      	pop	{r3, pc}
	...

08003840 <osalSysLockFromISR.lto_priv.1>:
static inline void osalSysLockFromISR(void) {
 8003840:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8003842:	f7ff ffcd 	bl	80037e0 <chSysLockFromISR.lto_priv.1>
}
 8003846:	bd08      	pop	{r3, pc}
	...

08003850 <osalSysUnlockFromISR.lto_priv.1>:
static inline void osalSysUnlockFromISR(void) {
 8003850:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8003852:	f7ff ffd5 	bl	8003800 <chSysUnlockFromISR.lto_priv.1>
}
 8003856:	bd08      	pop	{r3, pc}
	...

08003860 <get_hword>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static uint16_t get_hword(uint8_t *p) {
 8003860:	b084      	sub	sp, #16
 8003862:	9001      	str	r0, [sp, #4]
  uint16_t hw;

  hw  = (uint16_t)*p++;
 8003864:	9b01      	ldr	r3, [sp, #4]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	9201      	str	r2, [sp, #4]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	f8ad 300e 	strh.w	r3, [sp, #14]
  hw |= (uint16_t)*p << 8U;
 8003870:	9b01      	ldr	r3, [sp, #4]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	b21a      	sxth	r2, r3
 8003878:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800387c:	4313      	orrs	r3, r2
 800387e:	b21b      	sxth	r3, r3
 8003880:	f8ad 300e 	strh.w	r3, [sp, #14]
  return hw;
 8003884:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
 8003888:	4618      	mov	r0, r3
 800388a:	b004      	add	sp, #16
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop

08003890 <set_address>:
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8003890:	b500      	push	{lr}
 8003892:	b083      	sub	sp, #12
 8003894:	9001      	str	r0, [sp, #4]

  usbp->address = usbp->setup[2];
 8003896:	9b01      	ldr	r3, [sp, #4]
 8003898:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800389c:	9b01      	ldr	r3, [sp, #4]
 800389e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  usb_lld_set_address(usbp);
 80038a2:	9801      	ldr	r0, [sp, #4]
 80038a4:	f003 faa4 	bl	8006df0 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80038a8:	9b01      	ldr	r3, [sp, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <set_address+0x2e>
 80038b2:	9b01      	ldr	r3, [sp, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2101      	movs	r1, #1
 80038ba:	9801      	ldr	r0, [sp, #4]
 80038bc:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 80038be:	9b01      	ldr	r3, [sp, #4]
 80038c0:	2203      	movs	r2, #3
 80038c2:	701a      	strb	r2, [r3, #0]
}
 80038c4:	b003      	add	sp, #12
 80038c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80038ca:	bf00      	nop
 80038cc:	0000      	movs	r0, r0
	...

080038d0 <default_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @return              The request handling exit code.
 * @retval false        Request not recognized by the handler or error.
 * @retval true         Request handled.
 */
static bool default_handler(USBDriver *usbp) {
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	9001      	str	r0, [sp, #4]
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80038d6:	9b01      	ldr	r3, [sp, #4]
 80038d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 80038e0:	9b01      	ldr	r3, [sp, #4]
 80038e2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80038e6:	021b      	lsls	r3, r3, #8
                                        USB_RTYPE_TYPE_MASK)) |
 80038e8:	4313      	orrs	r3, r2
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80038ea:	f640 4202 	movw	r2, #3074	; 0xc02
 80038ee:	4293      	cmp	r3, r2
 80038f0:	f000 8113 	beq.w	8003b1a <default_handler+0x24a>
 80038f4:	f640 4202 	movw	r2, #3074	; 0xc02
 80038f8:	4293      	cmp	r3, r2
 80038fa:	f200 81d7 	bhi.w	8003cac <default_handler+0x3dc>
 80038fe:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8003902:	f000 80c9 	beq.w	8003a98 <default_handler+0x1c8>
 8003906:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800390a:	f200 81cf 	bhi.w	8003cac <default_handler+0x3dc>
 800390e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003912:	f000 80b4 	beq.w	8003a7e <default_handler+0x1ae>
 8003916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391a:	f200 81c7 	bhi.w	8003cac <default_handler+0x3dc>
 800391e:	f240 6201 	movw	r2, #1537	; 0x601
 8003922:	4293      	cmp	r3, r2
 8003924:	f200 81c2 	bhi.w	8003cac <default_handler+0x3dc>
 8003928:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800392c:	f080 8081 	bcs.w	8003a32 <default_handler+0x162>
 8003930:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003934:	d072      	beq.n	8003a1c <default_handler+0x14c>
 8003936:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800393a:	f200 81b7 	bhi.w	8003cac <default_handler+0x3dc>
 800393e:	f240 3202 	movw	r2, #770	; 0x302
 8003942:	4293      	cmp	r3, r2
 8003944:	f000 817e 	beq.w	8003c44 <default_handler+0x374>
 8003948:	f240 3202 	movw	r2, #770	; 0x302
 800394c:	4293      	cmp	r3, r2
 800394e:	f200 81ad 	bhi.w	8003cac <default_handler+0x3dc>
 8003952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003956:	d046      	beq.n	80039e6 <default_handler+0x116>
 8003958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800395c:	f200 81a6 	bhi.w	8003cac <default_handler+0x3dc>
 8003960:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8003964:	f000 813a 	beq.w	8003bdc <default_handler+0x30c>
 8003968:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800396c:	f200 819e 	bhi.w	8003cac <default_handler+0x3dc>
 8003970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003974:	d01c      	beq.n	80039b0 <default_handler+0xe0>
 8003976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397a:	f200 8197 	bhi.w	8003cac <default_handler+0x3dc>
 800397e:	2b02      	cmp	r3, #2
 8003980:	f000 80d6 	beq.w	8003b30 <default_handler+0x260>
 8003984:	2b02      	cmp	r3, #2
 8003986:	f200 8191 	bhi.w	8003cac <default_handler+0x3dc>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <default_handler+0xc6>
 800398e:	2b01      	cmp	r3, #1
 8003990:	f000 80c3 	beq.w	8003b1a <default_handler+0x24a>
 8003994:	e18a      	b.n	8003cac <default_handler+0x3dc>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8003996:	9b01      	ldr	r3, [sp, #4]
 8003998:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800399c:	9b01      	ldr	r3, [sp, #4]
 800399e:	669a      	str	r2, [r3, #104]	; 0x68
 80039a0:	9b01      	ldr	r3, [sp, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	66da      	str	r2, [r3, #108]	; 0x6c
 80039a6:	9b01      	ldr	r3, [sp, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	671a      	str	r2, [r3, #112]	; 0x70
    return true;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e17e      	b.n	8003cae <default_handler+0x3de>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80039b0:	9b01      	ldr	r3, [sp, #4]
 80039b2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d113      	bne.n	80039e2 <default_handler+0x112>
      usbp->status &= ~2U;
 80039ba:	9b01      	ldr	r3, [sp, #4]
 80039bc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80039c0:	f023 0302 	bic.w	r3, r3, #2
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	9b01      	ldr	r3, [sp, #4]
 80039c8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80039cc:	9b01      	ldr	r3, [sp, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	669a      	str	r2, [r3, #104]	; 0x68
 80039d2:	9b01      	ldr	r3, [sp, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80039d8:	9b01      	ldr	r3, [sp, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	671a      	str	r2, [r3, #112]	; 0x70
      return true;
 80039de:	2301      	movs	r3, #1
 80039e0:	e165      	b.n	8003cae <default_handler+0x3de>
    }
    return false;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e163      	b.n	8003cae <default_handler+0x3de>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80039e6:	9b01      	ldr	r3, [sp, #4]
 80039e8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d113      	bne.n	8003a18 <default_handler+0x148>
      usbp->status |= 2U;
 80039f0:	9b01      	ldr	r3, [sp, #4]
 80039f2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80039f6:	f043 0302 	orr.w	r3, r3, #2
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	9b01      	ldr	r3, [sp, #4]
 80039fe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003a02:	9b01      	ldr	r3, [sp, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	669a      	str	r2, [r3, #104]	; 0x68
 8003a08:	9b01      	ldr	r3, [sp, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a0e:	9b01      	ldr	r3, [sp, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	671a      	str	r2, [r3, #112]	; 0x70
      return true;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e14a      	b.n	8003cae <default_handler+0x3de>
    }
    return false;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e148      	b.n	8003cae <default_handler+0x3de>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8003a1c:	9b01      	ldr	r3, [sp, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	669a      	str	r2, [r3, #104]	; 0x68
 8003a22:	9b01      	ldr	r3, [sp, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a28:	9b01      	ldr	r3, [sp, #4]
 8003a2a:	4aa2      	ldr	r2, [pc, #648]	; (8003cb4 <default_handler+0x3e4>)
 8003a2c:	671a      	str	r2, [r3, #112]	; 0x70
#endif
    return true;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e13d      	b.n	8003cae <default_handler+0x3de>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8003a32:	9b01      	ldr	r3, [sp, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	685c      	ldr	r4, [r3, #4]
 8003a38:	9b01      	ldr	r3, [sp, #4]
 8003a3a:	f893 5077 	ldrb.w	r5, [r3, #119]	; 0x77
 8003a3e:	9b01      	ldr	r3, [sp, #4]
 8003a40:	f893 6076 	ldrb.w	r6, [r3, #118]	; 0x76
 8003a44:	9b01      	ldr	r3, [sp, #4]
 8003a46:	3378      	adds	r3, #120	; 0x78
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff09 	bl	8003860 <get_hword>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4632      	mov	r2, r6
 8003a52:	4629      	mov	r1, r5
 8003a54:	9801      	ldr	r0, [sp, #4]
 8003a56:	47a0      	blx	r4
 8003a58:	9003      	str	r0, [sp, #12]
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8003a5a:	9b03      	ldr	r3, [sp, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <default_handler+0x194>
      return false;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e124      	b.n	8003cae <default_handler+0x3de>
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8003a64:	9b03      	ldr	r3, [sp, #12]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	9b01      	ldr	r3, [sp, #4]
 8003a6a:	669a      	str	r2, [r3, #104]	; 0x68
 8003a6c:	9b03      	ldr	r3, [sp, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a74:	9b01      	ldr	r3, [sp, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	671a      	str	r2, [r3, #112]	; 0x70
    /*lint -restore*/
    return true;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e117      	b.n	8003cae <default_handler+0x3de>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8003a7e:	9b01      	ldr	r3, [sp, #4]
 8003a80:	f103 027f 	add.w	r2, r3, #127	; 0x7f
 8003a84:	9b01      	ldr	r3, [sp, #4]
 8003a86:	669a      	str	r2, [r3, #104]	; 0x68
 8003a88:	9b01      	ldr	r3, [sp, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a8e:	9b01      	ldr	r3, [sp, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	671a      	str	r2, [r3, #112]	; 0x70
    return true;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e10a      	b.n	8003cae <default_handler+0x3de>
    if (usbp->configuration != usbp->setup[2])
#endif
    {
      /* If the USB device is already active then we have to perform the clear
         procedure on the current configuration.*/
      if (usbp->state == USB_ACTIVE) {
 8003a98:	9b01      	ldr	r3, [sp, #4]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d118      	bne.n	8003ad2 <default_handler+0x202>
        /* Current configuration cleared.*/
        osalSysLockFromISR ();
 8003aa0:	f7ff fece 	bl	8003840 <osalSysLockFromISR.lto_priv.1>
        usbDisableEndpointsI(usbp);
 8003aa4:	9801      	ldr	r0, [sp, #4]
 8003aa6:	f000 f9d3 	bl	8003e50 <usbDisableEndpointsI>
        osalSysUnlockFromISR ();
 8003aaa:	f7ff fed1 	bl	8003850 <osalSysUnlockFromISR.lto_priv.1>
        usbp->configuration = 0U;
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	701a      	strb	r2, [r3, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <default_handler+0x202>
 8003ac6:	9b01      	ldr	r3, [sp, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2103      	movs	r1, #3
 8003ace:	9801      	ldr	r0, [sp, #4]
 8003ad0:	4798      	blx	r3
      }
      if (usbp->setup[2] != 0U) {
 8003ad2:	9b01      	ldr	r3, [sp, #4]
 8003ad4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <default_handler+0x234>
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
 8003adc:	9b01      	ldr	r3, [sp, #4]
 8003ade:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8003ae2:	9b01      	ldr	r3, [sp, #4]
 8003ae4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 8003ae8:	9b01      	ldr	r3, [sp, #4]
 8003aea:	2204      	movs	r2, #4
 8003aec:	701a      	strb	r2, [r3, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8003aee:	9b01      	ldr	r3, [sp, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <default_handler+0x234>
 8003af8:	9b01      	ldr	r3, [sp, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2102      	movs	r1, #2
 8003b00:	9801      	ldr	r0, [sp, #4]
 8003b02:	4798      	blx	r3
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8003b04:	9b01      	ldr	r3, [sp, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	669a      	str	r2, [r3, #104]	; 0x68
 8003b0a:	9b01      	ldr	r3, [sp, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b10:	9b01      	ldr	r3, [sp, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	671a      	str	r2, [r3, #112]	; 0x70
    return true;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0c9      	b.n	8003cae <default_handler+0x3de>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8003b1a:	9b01      	ldr	r3, [sp, #4]
 8003b1c:	4a66      	ldr	r2, [pc, #408]	; (8003cb8 <default_handler+0x3e8>)
 8003b1e:	669a      	str	r2, [r3, #104]	; 0x68
 8003b20:	9b01      	ldr	r3, [sp, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b26:	9b01      	ldr	r3, [sp, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	671a      	str	r2, [r3, #112]	; 0x70
    /*lint -restore*/
    return true;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0be      	b.n	8003cae <default_handler+0x3de>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8003b30:	9b01      	ldr	r3, [sp, #4]
 8003b32:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da27      	bge.n	8003b8c <default_handler+0x2bc>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 8003b3c:	9b01      	ldr	r3, [sp, #4]
 8003b3e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	4619      	mov	r1, r3
 8003b4a:	9801      	ldr	r0, [sp, #4]
 8003b4c:	f003 fa40 	bl	8006fd0 <usb_lld_get_status_in>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d002      	beq.n	8003b5c <default_handler+0x28c>
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d00b      	beq.n	8003b72 <default_handler+0x2a2>
 8003b5a:	e015      	b.n	8003b88 <default_handler+0x2b8>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8003b5c:	9b01      	ldr	r3, [sp, #4]
 8003b5e:	4a57      	ldr	r2, [pc, #348]	; (8003cbc <default_handler+0x3ec>)
 8003b60:	669a      	str	r2, [r3, #104]	; 0x68
 8003b62:	9b01      	ldr	r3, [sp, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b68:	9b01      	ldr	r3, [sp, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	671a      	str	r2, [r3, #112]	; 0x70
        /*lint -restore*/
        return true;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e09d      	b.n	8003cae <default_handler+0x3de>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8003b72:	9b01      	ldr	r3, [sp, #4]
 8003b74:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <default_handler+0x3f0>)
 8003b76:	669a      	str	r2, [r3, #104]	; 0x68
 8003b78:	9b01      	ldr	r3, [sp, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b7e:	9b01      	ldr	r3, [sp, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	671a      	str	r2, [r3, #112]	; 0x70
        /*lint -restore*/
        return true;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e092      	b.n	8003cae <default_handler+0x3de>
      case EP_STATUS_DISABLED:
      default:
        return false;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e090      	b.n	8003cae <default_handler+0x3de>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 8003b8c:	9b01      	ldr	r3, [sp, #4]
 8003b8e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	9801      	ldr	r0, [sp, #4]
 8003b9c:	f003 f9f8 	bl	8006f90 <usb_lld_get_status_out>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d002      	beq.n	8003bac <default_handler+0x2dc>
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d00b      	beq.n	8003bc2 <default_handler+0x2f2>
 8003baa:	e015      	b.n	8003bd8 <default_handler+0x308>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8003bac:	9b01      	ldr	r3, [sp, #4]
 8003bae:	4a43      	ldr	r2, [pc, #268]	; (8003cbc <default_handler+0x3ec>)
 8003bb0:	669a      	str	r2, [r3, #104]	; 0x68
 8003bb2:	9b01      	ldr	r3, [sp, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	66da      	str	r2, [r3, #108]	; 0x6c
 8003bb8:	9b01      	ldr	r3, [sp, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	671a      	str	r2, [r3, #112]	; 0x70
        /*lint -restore*/
        return true;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e075      	b.n	8003cae <default_handler+0x3de>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8003bc2:	9b01      	ldr	r3, [sp, #4]
 8003bc4:	4a3e      	ldr	r2, [pc, #248]	; (8003cc0 <default_handler+0x3f0>)
 8003bc6:	669a      	str	r2, [r3, #104]	; 0x68
 8003bc8:	9b01      	ldr	r3, [sp, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	66da      	str	r2, [r3, #108]	; 0x6c
 8003bce:	9b01      	ldr	r3, [sp, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	671a      	str	r2, [r3, #112]	; 0x70
        /*lint -restore*/
        return true;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e06a      	b.n	8003cae <default_handler+0x3de>
      case EP_STATUS_DISABLED:
      default:
        return false;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e068      	b.n	8003cae <default_handler+0x3de>
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8003bdc:	9b01      	ldr	r3, [sp, #4]
 8003bde:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <default_handler+0x31a>
      return false;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e061      	b.n	8003cae <default_handler+0x3de>
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8003bea:	9b01      	ldr	r3, [sp, #4]
 8003bec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01a      	beq.n	8003c2e <default_handler+0x35e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8003bf8:	9b01      	ldr	r3, [sp, #4]
 8003bfa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	da0a      	bge.n	8003c1a <default_handler+0x34a>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8003c04:	9b01      	ldr	r3, [sp, #4]
 8003c06:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	4619      	mov	r1, r3
 8003c12:	9801      	ldr	r0, [sp, #4]
 8003c14:	f003 fb2c 	bl	8007270 <usb_lld_clear_in>
 8003c18:	e009      	b.n	8003c2e <default_handler+0x35e>
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 8003c1a:	9b01      	ldr	r3, [sp, #4]
 8003c1c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	4619      	mov	r1, r3
 8003c28:	9801      	ldr	r0, [sp, #4]
 8003c2a:	f003 faf9 	bl	8007220 <usb_lld_clear_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8003c2e:	9b01      	ldr	r3, [sp, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	669a      	str	r2, [r3, #104]	; 0x68
 8003c34:	9b01      	ldr	r3, [sp, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c3a:	9b01      	ldr	r3, [sp, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	671a      	str	r2, [r3, #112]	; 0x70
    return true;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e034      	b.n	8003cae <default_handler+0x3de>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8003c44:	9b01      	ldr	r3, [sp, #4]
 8003c46:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <default_handler+0x382>
      return false;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e02d      	b.n	8003cae <default_handler+0x3de>
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8003c52:	9b01      	ldr	r3, [sp, #4]
 8003c54:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01a      	beq.n	8003c96 <default_handler+0x3c6>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8003c60:	9b01      	ldr	r3, [sp, #4]
 8003c62:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	da0a      	bge.n	8003c82 <default_handler+0x3b2>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8003c6c:	9b01      	ldr	r3, [sp, #4]
 8003c6e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4619      	mov	r1, r3
 8003c7a:	9801      	ldr	r0, [sp, #4]
 8003c7c:	f003 fab0 	bl	80071e0 <usb_lld_stall_in>
 8003c80:	e009      	b.n	8003c96 <default_handler+0x3c6>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 8003c82:	9b01      	ldr	r3, [sp, #4]
 8003c84:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	4619      	mov	r1, r3
 8003c90:	9801      	ldr	r0, [sp, #4]
 8003c92:	f003 fa85 	bl	80071a0 <usb_lld_stall_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8003c96:	9b01      	ldr	r3, [sp, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	669a      	str	r2, [r3, #104]	; 0x68
 8003c9c:	9b01      	ldr	r3, [sp, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ca2:	9b01      	ldr	r3, [sp, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	671a      	str	r2, [r3, #112]	; 0x70
    return true;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <default_handler+0x3de>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_INTERFACE << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_SET_INTERFACE << 8):
    /* All the above requests are not handled here, if you need them then
       use the hook mechanism and provide handling.*/
  default:
    return false;
 8003cac:	2300      	movs	r3, #0
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	08003891 	.word	0x08003891
 8003cb8:	0800a7b8 	.word	0x0800a7b8
 8003cbc:	0800a7c0 	.word	0x0800a7c0
 8003cc0:	0800a7bc 	.word	0x0800a7bc
	...

08003cd0 <usbInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void usbInit(void) {
 8003cd0:	b508      	push	{r3, lr}

  usb_lld_init();
 8003cd2:	f003 f815 	bl	8006d00 <usb_lld_init>
}
 8003cd6:	bd08      	pop	{r3, pc}
	...

08003ce0 <usbObjectInit>:
 *
 * @param[out] usbp     pointer to the @p USBDriver object
 *
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	9001      	str	r0, [sp, #4]
  unsigned i;

  usbp->state        = USB_STOP;
 8003ce4:	9b01      	ldr	r3, [sp, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
  usbp->config       = NULL;
 8003cea:	9b01      	ldr	r3, [sp, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	605a      	str	r2, [r3, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9303      	str	r3, [sp, #12]
 8003cf4:	e00f      	b.n	8003d16 <usbObjectInit+0x36>
    usbp->in_params[i]  = NULL;
 8003cf6:	9a01      	ldr	r2, [sp, #4]
 8003cf8:	9b03      	ldr	r3, [sp, #12]
 8003cfa:	330a      	adds	r3, #10
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	2200      	movs	r2, #0
 8003d02:	605a      	str	r2, [r3, #4]
    usbp->out_params[i] = NULL;
 8003d04:	9b01      	ldr	r3, [sp, #4]
 8003d06:	9a03      	ldr	r2, [sp, #12]
 8003d08:	3212      	adds	r2, #18
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003d10:	9b03      	ldr	r3, [sp, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	9303      	str	r3, [sp, #12]
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	2b06      	cmp	r3, #6
 8003d1a:	d9ec      	bls.n	8003cf6 <usbObjectInit+0x16>
  }
  usbp->transmitting = 0;
 8003d1c:	9b01      	ldr	r3, [sp, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	811a      	strh	r2, [r3, #8]
  usbp->receiving    = 0;
 8003d22:	9b01      	ldr	r3, [sp, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	815a      	strh	r2, [r3, #10]
}
 8003d28:	b004      	add	sp, #16
 8003d2a:	4770      	bx	lr
 8003d2c:	0000      	movs	r0, r0
	...

08003d30 <usbStart>:
 * @param[in] config    pointer to the @p USBConfig object
 * @return              The operation status.
 *
 * @api
 */
msg_t usbStart(USBDriver *usbp, const USBConfig *config) {
 8003d30:	b500      	push	{lr}
 8003d32:	b085      	sub	sp, #20
 8003d34:	9001      	str	r0, [sp, #4]
 8003d36:	9100      	str	r1, [sp, #0]
  msg_t msg;
  unsigned i;

  osalDbgCheck((usbp != NULL) && (config != NULL));
 8003d38:	9b01      	ldr	r3, [sp, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <usbStart+0x28>
 8003d48:	9b00      	ldr	r3, [sp, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	2300      	movne	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <usbStart+0x2e>
 8003d58:	4816      	ldr	r0, [pc, #88]	; (8003db4 <usbStart+0x84>)
 8003d5a:	f003 fb29 	bl	80073b0 <chSysHalt>

  osalSysLock();
 8003d5e:	f7ff fd5f 	bl	8003820 <osalSysLock.lto_priv.6>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");

  usbp->config = config;
 8003d62:	9b01      	ldr	r3, [sp, #4]
 8003d64:	9a00      	ldr	r2, [sp, #0]
 8003d66:	605a      	str	r2, [r3, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003d68:	2300      	movs	r3, #0
 8003d6a:	9303      	str	r3, [sp, #12]
 8003d6c:	e009      	b.n	8003d82 <usbStart+0x52>
    usbp->epc[i] = NULL;
 8003d6e:	9a01      	ldr	r2, [sp, #4]
 8003d70:	9b03      	ldr	r3, [sp, #12]
 8003d72:	3302      	adds	r3, #2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	2200      	movs	r2, #0
 8003d7a:	605a      	str	r2, [r3, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003d7c:	9b03      	ldr	r3, [sp, #12]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	9303      	str	r3, [sp, #12]
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	2b07      	cmp	r3, #7
 8003d86:	d9f2      	bls.n	8003d6e <usbStart+0x3e>
  }

#if defined(USB_LLD_ENHANCED_API)
  msg = usb_lld_start(usbp);
#else
  usb_lld_start(usbp);
 8003d88:	9801      	ldr	r0, [sp, #4]
 8003d8a:	f002 ffc1 	bl	8006d10 <usb_lld_start>
  msg = HAL_RET_SUCCESS;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9302      	str	r3, [sp, #8]
#endif
  if (msg == HAL_RET_SUCCESS) {
 8003d92:	9b02      	ldr	r3, [sp, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <usbStart+0x70>
    usbp->state = USB_READY;
 8003d98:	9b01      	ldr	r3, [sp, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	e002      	b.n	8003da6 <usbStart+0x76>
  }
  else {
    usbp->state = USB_STOP;
 8003da0:	9b01      	ldr	r3, [sp, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
 8003da6:	f7ff fd43 	bl	8003830 <osalSysUnlock.lto_priv.6>

  return msg;
 8003daa:	9b02      	ldr	r3, [sp, #8]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	b005      	add	sp, #20
 8003db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003db4:	0800a7c4 	.word	0x0800a7c4
	...

08003dc0 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8003dc0:	b500      	push	{lr}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	9003      	str	r0, [sp, #12]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	9201      	str	r2, [sp, #4]
 8003dca:	f88d 300b 	strb.w	r3, [sp, #11]

  osalDbgCheckClassI();
 8003dce:	f003 fc0f 	bl	80075f0 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 8003dd2:	9b03      	ldr	r3, [sp, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d107      	bne.n	8003df2 <usbInitEndpointI+0x32>
 8003de2:	9b01      	ldr	r3, [sp, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <usbInitEndpointI+0x38>
 8003df2:	4815      	ldr	r0, [pc, #84]	; (8003e48 <usbInitEndpointI+0x88>)
 8003df4:	f003 fadc 	bl	80073b0 <chSysHalt>
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;
 8003df8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003dfc:	9a03      	ldr	r2, [sp, #12]
 8003dfe:	3302      	adds	r3, #2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	9a01      	ldr	r2, [sp, #4]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 8003e08:	9b01      	ldr	r3, [sp, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d006      	beq.n	8003e1e <usbInitEndpointI+0x5e>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8003e10:	9b01      	ldr	r3, [sp, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	2210      	movs	r2, #16
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f006 fb6b 	bl	800a4f4 <memset>
  }
  if (epcp->out_state != NULL) {
 8003e1e:	9b01      	ldr	r3, [sp, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <usbInitEndpointI+0x74>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8003e26:	9b01      	ldr	r3, [sp, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f006 fb60 	bl	800a4f4 <memset>
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8003e34:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	9803      	ldr	r0, [sp, #12]
 8003e3c:	f002 ffe8 	bl	8006e10 <usb_lld_init_endpoint>
}
 8003e40:	b005      	add	sp, #20
 8003e42:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e46:	bf00      	nop
 8003e48:	0800a7d0 	.word	0x0800a7d0
 8003e4c:	00000000 	.word	0x00000000

08003e50 <usbDisableEndpointsI>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @iclass
 */
void usbDisableEndpointsI(USBDriver *usbp) {
 8003e50:	b500      	push	{lr}
 8003e52:	b085      	sub	sp, #20
 8003e54:	9001      	str	r0, [sp, #4]
  unsigned i;

  osalDbgCheckClassI();
 8003e56:	f003 fbcb 	bl	80075f0 <chDbgCheckClassI>
  osalDbgCheck(usbp != NULL);
 8003e5a:	9b01      	ldr	r3, [sp, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <usbDisableEndpointsI+0x20>
 8003e6a:	4813      	ldr	r0, [pc, #76]	; (8003eb8 <usbDisableEndpointsI+0x68>)
 8003e6c:	f003 faa0 	bl	80073b0 <chSysHalt>
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
 8003e70:	9b01      	ldr	r3, [sp, #4]
 8003e72:	891b      	ldrh	r3, [r3, #8]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	9b01      	ldr	r3, [sp, #4]
 8003e7c:	811a      	strh	r2, [r3, #8]
  usbp->receiving    &= 1U;
 8003e7e:	9b01      	ldr	r3, [sp, #4]
 8003e80:	895b      	ldrh	r3, [r3, #10]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	9b01      	ldr	r3, [sp, #4]
 8003e8a:	815a      	strh	r2, [r3, #10]

  for (i = 1; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	9303      	str	r3, [sp, #12]
 8003e90:	e009      	b.n	8003ea6 <usbDisableEndpointsI+0x56>
      if (usbp->epc[i]->out_state != NULL) {
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
    }
#endif
    usbp->epc[i] = NULL;
 8003e92:	9a01      	ldr	r2, [sp, #4]
 8003e94:	9b03      	ldr	r3, [sp, #12]
 8003e96:	3302      	adds	r3, #2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]
  for (i = 1; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	9303      	str	r3, [sp, #12]
 8003ea6:	9b03      	ldr	r3, [sp, #12]
 8003ea8:	2b07      	cmp	r3, #7
 8003eaa:	d9f2      	bls.n	8003e92 <usbDisableEndpointsI+0x42>
  }

  /* Low level endpoints deactivation.*/
  usb_lld_disable_endpoints(usbp);
 8003eac:	9801      	ldr	r0, [sp, #4]
 8003eae:	f003 f847 	bl	8006f40 <usb_lld_disable_endpoints>
}
 8003eb2:	b005      	add	sp, #20
 8003eb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003eb8:	0800a7e4 	.word	0x0800a7e4
 8003ebc:	00000000 	.word	0x00000000

08003ec0 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 8003ec0:	b500      	push	{lr}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	9003      	str	r0, [sp, #12]
 8003ec6:	9201      	str	r2, [sp, #4]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	f88d 300b 	strb.w	r3, [sp, #11]
  USBOutEndpointState *osp;

  osalDbgCheckClassI();
 8003ed0:	f003 fb8e 	bl	80075f0 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8003ed4:	9b03      	ldr	r3, [sp, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf0c      	ite	eq
 8003eda:	2301      	moveq	r3, #1
 8003edc:	2300      	movne	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d108      	bne.n	8003ef6 <usbStartReceiveI+0x36>
 8003ee4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003ee8:	2b07      	cmp	r3, #7
 8003eea:	bf8c      	ite	hi
 8003eec:	2301      	movhi	r3, #1
 8003eee:	2300      	movls	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <usbStartReceiveI+0x3c>
 8003ef6:	4815      	ldr	r0, [pc, #84]	; (8003f4c <usbStartReceiveI+0x8c>)
 8003ef8:	f003 fa5a 	bl	80073b0 <chSysHalt>
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003efc:	9b03      	ldr	r3, [sp, #12]
 8003efe:	895a      	ldrh	r2, [r3, #10]
 8003f00:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003f04:	2101      	movs	r1, #1
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	815a      	strh	r2, [r3, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8003f14:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003f18:	9a03      	ldr	r2, [sp, #12]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  osp->rxbuf  = buf;
 8003f26:	9b05      	ldr	r3, [sp, #20]
 8003f28:	9a01      	ldr	r2, [sp, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
  osp->rxsize = n;
 8003f2c:	9b05      	ldr	r3, [sp, #20]
 8003f2e:	9a00      	ldr	r2, [sp, #0]
 8003f30:	601a      	str	r2, [r3, #0]
  osp->rxcnt  = 0;
 8003f32:	9b05      	ldr	r3, [sp, #20]
 8003f34:	2200      	movs	r2, #0
 8003f36:	605a      	str	r2, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8003f38:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	9803      	ldr	r0, [sp, #12]
 8003f40:	f003 f896 	bl	8007070 <usb_lld_start_out>
}
 8003f44:	b007      	add	sp, #28
 8003f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f4a:	bf00      	nop
 8003f4c:	0800a7fc 	.word	0x0800a7fc

08003f50 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8003f50:	b500      	push	{lr}
 8003f52:	b087      	sub	sp, #28
 8003f54:	9003      	str	r0, [sp, #12]
 8003f56:	9201      	str	r2, [sp, #4]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	f88d 300b 	strb.w	r3, [sp, #11]
  USBInEndpointState *isp;

  osalDbgCheckClassI();
 8003f60:	f003 fb46 	bl	80075f0 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8003f64:	9b03      	ldr	r3, [sp, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d108      	bne.n	8003f86 <usbStartTransmitI+0x36>
 8003f74:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003f78:	2b07      	cmp	r3, #7
 8003f7a:	bf8c      	ite	hi
 8003f7c:	2301      	movhi	r3, #1
 8003f7e:	2300      	movls	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <usbStartTransmitI+0x3c>
 8003f86:	4815      	ldr	r0, [pc, #84]	; (8003fdc <usbStartTransmitI+0x8c>)
 8003f88:	f003 fa12 	bl	80073b0 <chSysHalt>
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8003f8c:	9b03      	ldr	r3, [sp, #12]
 8003f8e:	891a      	ldrh	r2, [r3, #8]
 8003f90:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	9b03      	ldr	r3, [sp, #12]
 8003fa2:	811a      	strh	r2, [r3, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8003fa4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003fa8:	9a03      	ldr	r2, [sp, #12]
 8003faa:	3302      	adds	r3, #2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  isp->txbuf  = buf;
 8003fb6:	9b05      	ldr	r3, [sp, #20]
 8003fb8:	9a01      	ldr	r2, [sp, #4]
 8003fba:	609a      	str	r2, [r3, #8]
  isp->txsize = n;
 8003fbc:	9b05      	ldr	r3, [sp, #20]
 8003fbe:	9a00      	ldr	r2, [sp, #0]
 8003fc0:	601a      	str	r2, [r3, #0]
  isp->txcnt  = 0;
 8003fc2:	9b05      	ldr	r3, [sp, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	605a      	str	r2, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8003fc8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	9803      	ldr	r0, [sp, #12]
 8003fd0:	f003 f896 	bl	8007100 <usb_lld_start_in>
}
 8003fd4:	b007      	add	sp, #28
 8003fd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fda:	bf00      	nop
 8003fdc:	0800a810 	.word	0x0800a810

08003fe0 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8003fe0:	b500      	push	{lr}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	9001      	str	r0, [sp, #4]
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8003fe6:	9b01      	ldr	r3, [sp, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	701a      	strb	r2, [r3, #0]

  /* Resetting internal state.*/
  usbp->status        = 0;
 8003fec:	9b01      	ldr	r3, [sp, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
  usbp->address       = 0;
 8003ff4:	9b01      	ldr	r3, [sp, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  usbp->configuration = 0;
 8003ffc:	9b01      	ldr	r3, [sp, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  usbp->transmitting  = 0;
 8004004:	9b01      	ldr	r3, [sp, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	811a      	strh	r2, [r3, #8]
  usbp->receiving     = 0;
 800400a:	9b01      	ldr	r3, [sp, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	815a      	strh	r2, [r3, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8004010:	2300      	movs	r3, #0
 8004012:	9303      	str	r3, [sp, #12]
 8004014:	e009      	b.n	800402a <_usb_reset+0x4a>
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 8004016:	9a01      	ldr	r2, [sp, #4]
 8004018:	9b03      	ldr	r3, [sp, #12]
 800401a:	3302      	adds	r3, #2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	2b07      	cmp	r3, #7
 800402e:	d9f2      	bls.n	8004016 <_usb_reset+0x36>
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_STP_WAITING;
 8004030:	9b01      	ldr	r3, [sp, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8004038:	9801      	ldr	r0, [sp, #4]
 800403a:	f002 fea9 	bl	8006d90 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800403e:	9b01      	ldr	r3, [sp, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <_usb_reset+0x74>
 8004048:	9b01      	ldr	r3, [sp, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2100      	movs	r1, #0
 8004050:	9801      	ldr	r0, [sp, #4]
 8004052:	4798      	blx	r3
}
 8004054:	b005      	add	sp, #20
 8004056:	f85d fb04 	ldr.w	pc, [sp], #4
 800405a:	bf00      	nop
 800405c:	0000      	movs	r0, r0
	...

08004060 <_usb_suspend>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {
 8004060:	b500      	push	{lr}
 8004062:	b083      	sub	sp, #12
 8004064:	9001      	str	r0, [sp, #4]

  /* It could happen that multiple suspend events are triggered.*/
  if (usbp->state != USB_SUSPENDED) {
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b05      	cmp	r3, #5
 800406c:	d018      	beq.n	80040a0 <_usb_suspend+0x40>

    /* State transition, saving the current state.*/
    usbp->saved_state = usbp->state;
 800406e:	9b01      	ldr	r3, [sp, #4]
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	9b01      	ldr	r3, [sp, #4]
 8004074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    usbp->state       = USB_SUSPENDED;
 8004078:	9b01      	ldr	r3, [sp, #4]
 800407a:	2205      	movs	r2, #5
 800407c:	701a      	strb	r2, [r3, #0]

    /* Notification of suspend event.*/
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800407e:	9b01      	ldr	r3, [sp, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <_usb_suspend+0x34>
 8004088:	9b01      	ldr	r3, [sp, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2104      	movs	r1, #4
 8004090:	9801      	ldr	r0, [sp, #4]
 8004092:	4798      	blx	r3

    /* Terminating all pending transactions.*/
    usbp->transmitting  = 0;
 8004094:	9b01      	ldr	r3, [sp, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	811a      	strh	r2, [r3, #8]
    usbp->receiving     = 0;
 800409a:	9b01      	ldr	r3, [sp, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	815a      	strh	r2, [r3, #10]
        }
      }
    }
  #endif
  }
}
 80040a0:	b003      	add	sp, #12
 80040a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80040a6:	bf00      	nop
	...

080040b0 <_usb_wakeup>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {
 80040b0:	b500      	push	{lr}
 80040b2:	b083      	sub	sp, #12
 80040b4:	9001      	str	r0, [sp, #4]

  /* It could happen that multiple waakeup events are triggered.*/
  if (usbp->state == USB_SUSPENDED) {
 80040b6:	9b01      	ldr	r3, [sp, #4]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	d10f      	bne.n	80040de <_usb_wakeup+0x2e>

    /* State transition, returning to the previous state.*/
    usbp->state = usbp->saved_state;
 80040be:	9b01      	ldr	r3, [sp, #4]
 80040c0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80040c4:	9b01      	ldr	r3, [sp, #4]
 80040c6:	701a      	strb	r2, [r3, #0]

    /* Notification of suspend event.*/
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80040c8:	9b01      	ldr	r3, [sp, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <_usb_wakeup+0x2e>
 80040d2:	9b01      	ldr	r3, [sp, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2105      	movs	r1, #5
 80040da:	9801      	ldr	r0, [sp, #4]
 80040dc:	4798      	blx	r3
  }
}
 80040de:	b003      	add	sp, #12
 80040e0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080040f0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80040f0:	b500      	push	{lr}
 80040f2:	b085      	sub	sp, #20
 80040f4:	9001      	str	r0, [sp, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	f88d 3003 	strb.w	r3, [sp, #3]
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80040fc:	9b01      	ldr	r3, [sp, #4]
 80040fe:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <_usb_ep0setup+0x1e>
    /* This is unexpected could require handling with a warning event.*/
    /* CHTODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  }

  /* Reading the setup data into the driver buffer.*/
  usbReadSetup(usbp, ep, usbp->setup);
 800410e:	9b01      	ldr	r3, [sp, #4]
 8004110:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8004114:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004118:	4619      	mov	r1, r3
 800411a:	9801      	ldr	r0, [sp, #4]
 800411c:	f002 ff78 	bl	8007010 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8004120:	9b01      	ldr	r3, [sp, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <_usb_ep0setup+0x50>
      !(usbp->config->requests_hook_cb(usbp))) {
 800412a:	9b01      	ldr	r3, [sp, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	9801      	ldr	r0, [sp, #4]
 8004132:	4798      	blx	r3
 8004134:	4603      	mov	r3, r0
 8004136:	f083 0301 	eor.w	r3, r3, #1
 800413a:	b2db      	uxtb	r3, r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800413c:	2b00      	cmp	r3, #0
 800413e:	d027      	beq.n	8004190 <_usb_ep0setup+0xa0>
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8004140:	9b01      	ldr	r3, [sp, #4]
 8004142:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800414a:	2b00      	cmp	r3, #0
 800414c:	d108      	bne.n	8004160 <_usb_ep0setup+0x70>
        !default_handler(usbp)) {
 800414e:	9801      	ldr	r0, [sp, #4]
 8004150:	f7ff fbbe 	bl	80038d0 <default_handler>
 8004154:	4603      	mov	r3, r0
 8004156:	f083 0301 	eor.w	r3, r3, #1
 800415a:	b2db      	uxtb	r3, r3
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <_usb_ep0setup+0xa0>
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 8004160:	2100      	movs	r1, #0
 8004162:	9801      	ldr	r0, [sp, #4]
 8004164:	f003 f83c 	bl	80071e0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 8004168:	2100      	movs	r1, #0
 800416a:	9801      	ldr	r0, [sp, #4]
 800416c:	f003 f818 	bl	80071a0 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8004170:	9b01      	ldr	r3, [sp, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <_usb_ep0setup+0x96>
 800417a:	9b01      	ldr	r3, [sp, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2106      	movs	r1, #6
 8004182:	9801      	ldr	r0, [sp, #4]
 8004184:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8004186:	9b01      	ldr	r3, [sp, #4]
 8004188:	2206      	movs	r2, #6
 800418a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800418e:	e05b      	b.n	8004248 <_usb_ep0setup+0x158>
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8004190:	9b01      	ldr	r3, [sp, #4]
 8004192:	337a      	adds	r3, #122	; 0x7a
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fb63 	bl	8003860 <get_hword>
 800419a:	4603      	mov	r3, r0
 800419c:	9303      	str	r3, [sp, #12]
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800419e:	9b01      	ldr	r3, [sp, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a2:	9a03      	ldr	r2, [sp, #12]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d202      	bcs.n	80041ae <_usb_ep0setup+0xbe>
    usbp->ep0n = max;
 80041a8:	9b01      	ldr	r3, [sp, #4]
 80041aa:	9a03      	ldr	r2, [sp, #12]
 80041ac:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80041ae:	9b01      	ldr	r3, [sp, #4]
 80041b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041b4:	b25b      	sxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da23      	bge.n	8004202 <_usb_ep0setup+0x112>
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 80041ba:	9b01      	ldr	r3, [sp, #4]
 80041bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d010      	beq.n	80041e4 <_usb_ep0setup+0xf4>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_IN_TX;
 80041c2:	9b01      	ldr	r3, [sp, #4]
 80041c4:	2209      	movs	r2, #9
 80041c6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      osalSysLockFromISR();
 80041ca:	f7ff fb39 	bl	8003840 <osalSysLockFromISR.lto_priv.1>
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80041ce:	9b01      	ldr	r3, [sp, #4]
 80041d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041d2:	9b01      	ldr	r3, [sp, #4]
 80041d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d6:	2100      	movs	r1, #0
 80041d8:	9801      	ldr	r0, [sp, #4]
 80041da:	f7ff feb9 	bl	8003f50 <usbStartTransmitI>
      osalSysUnlockFromISR();
 80041de:	f7ff fb37 	bl	8003850 <osalSysUnlockFromISR.lto_priv.1>
 80041e2:	e031      	b.n	8004248 <_usb_ep0setup+0x158>
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80041e4:	9b01      	ldr	r3, [sp, #4]
 80041e6:	2214      	movs	r2, #20
 80041e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
 80041ec:	f7ff fb28 	bl	8003840 <osalSysLockFromISR.lto_priv.1>
      usbStartReceiveI(usbp, 0, NULL, 0);
 80041f0:	2300      	movs	r3, #0
 80041f2:	2200      	movs	r2, #0
 80041f4:	2100      	movs	r1, #0
 80041f6:	9801      	ldr	r0, [sp, #4]
 80041f8:	f7ff fe62 	bl	8003ec0 <usbStartReceiveI>
      osalSysUnlockFromISR();
 80041fc:	f7ff fb28 	bl	8003850 <osalSysUnlockFromISR.lto_priv.1>
 8004200:	e022      	b.n	8004248 <_usb_ep0setup+0x158>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8004202:	9b01      	ldr	r3, [sp, #4]
 8004204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d010      	beq.n	800422c <_usb_ep0setup+0x13c>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_OUT_RX;
 800420a:	9b01      	ldr	r3, [sp, #4]
 800420c:	2215      	movs	r2, #21
 800420e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      osalSysLockFromISR();
 8004212:	f7ff fb15 	bl	8003840 <osalSysLockFromISR.lto_priv.1>
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800421a:	9b01      	ldr	r3, [sp, #4]
 800421c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421e:	2100      	movs	r1, #0
 8004220:	9801      	ldr	r0, [sp, #4]
 8004222:	f7ff fe4d 	bl	8003ec0 <usbStartReceiveI>
      osalSysUnlockFromISR();
 8004226:	f7ff fb13 	bl	8003850 <osalSysUnlockFromISR.lto_priv.1>
 800422a:	e00d      	b.n	8004248 <_usb_ep0setup+0x158>
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 800422c:	9b01      	ldr	r3, [sp, #4]
 800422e:	220b      	movs	r2, #11
 8004230:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
 8004234:	f7ff fb04 	bl	8003840 <osalSysLockFromISR.lto_priv.1>
      usbStartTransmitI(usbp, 0, NULL, 0);
 8004238:	2300      	movs	r3, #0
 800423a:	2200      	movs	r2, #0
 800423c:	2100      	movs	r1, #0
 800423e:	9801      	ldr	r0, [sp, #4]
 8004240:	f7ff fe86 	bl	8003f50 <usbStartTransmitI>
      osalSysUnlockFromISR();
 8004244:	f7ff fb04 	bl	8003850 <osalSysUnlockFromISR.lto_priv.1>
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 8004248:	b005      	add	sp, #20
 800424a:	f85d fb04 	ldr.w	pc, [sp], #4
 800424e:	bf00      	nop

08004250 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8004250:	b500      	push	{lr}
 8004252:	b085      	sub	sp, #20
 8004254:	9001      	str	r0, [sp, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	f88d 3003 	strb.w	r3, [sp, #3]
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800425c:	9b01      	ldr	r3, [sp, #4]
 800425e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004262:	2b15      	cmp	r3, #21
 8004264:	f200 808a 	bhi.w	800437c <_usb_ep0in+0x12c>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <_usb_ep0in+0x20>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	0800434f 	.word	0x0800434f
 8004274:	0800437d 	.word	0x0800437d
 8004278:	0800437d 	.word	0x0800437d
 800427c:	0800437d 	.word	0x0800437d
 8004280:	0800437d 	.word	0x0800437d
 8004284:	0800437d 	.word	0x0800437d
 8004288:	0800434f 	.word	0x0800434f
 800428c:	0800437d 	.word	0x0800437d
 8004290:	0800437d 	.word	0x0800437d
 8004294:	080042c9 	.word	0x080042c9
 8004298:	08004317 	.word	0x08004317
 800429c:	08004335 	.word	0x08004335
 80042a0:	0800437d 	.word	0x0800437d
 80042a4:	0800437d 	.word	0x0800437d
 80042a8:	0800437d 	.word	0x0800437d
 80042ac:	0800437d 	.word	0x0800437d
 80042b0:	0800437d 	.word	0x0800437d
 80042b4:	0800437d 	.word	0x0800437d
 80042b8:	0800437d 	.word	0x0800437d
 80042bc:	0800437d 	.word	0x0800437d
 80042c0:	0800434f 	.word	0x0800434f
 80042c4:	0800434f 	.word	0x0800434f
  case USB_EP0_IN_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 80042c8:	9b01      	ldr	r3, [sp, #4]
 80042ca:	337a      	adds	r3, #122	; 0x7a
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fac7 	bl	8003860 <get_hword>
 80042d2:	4603      	mov	r3, r0
 80042d4:	9303      	str	r3, [sp, #12]
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 80042d6:	9b01      	ldr	r3, [sp, #4]
 80042d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042da:	9a03      	ldr	r2, [sp, #12]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d91a      	bls.n	8004316 <_usb_ep0in+0xc6>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 80042e0:	9b01      	ldr	r3, [sp, #4]
 80042e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e4:	9a01      	ldr	r2, [sp, #4]
 80042e6:	68d2      	ldr	r2, [r2, #12]
 80042e8:	8a12      	ldrh	r2, [r2, #16]
 80042ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80042ee:	fb02 f201 	mul.w	r2, r2, r1
 80042f2:	1a9b      	subs	r3, r3, r2
    if ((usbp->ep0n < max) &&
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10e      	bne.n	8004316 <_usb_ep0in+0xc6>
      osalSysLockFromISR();
 80042f8:	f7ff faa2 	bl	8003840 <osalSysLockFromISR.lto_priv.1>
      usbStartTransmitI(usbp, 0, NULL, 0);
 80042fc:	2300      	movs	r3, #0
 80042fe:	2200      	movs	r2, #0
 8004300:	2100      	movs	r1, #0
 8004302:	9801      	ldr	r0, [sp, #4]
 8004304:	f7ff fe24 	bl	8003f50 <usbStartTransmitI>
      osalSysUnlockFromISR();
 8004308:	f7ff faa2 	bl	8003850 <osalSysUnlockFromISR.lto_priv.1>
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 800430c:	9b01      	ldr	r3, [sp, #4]
 800430e:	220a      	movs	r2, #10
 8004310:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004314:	e032      	b.n	800437c <_usb_ep0in+0x12c>
      return;
    }
    /* Falls through.*/
  case USB_EP0_IN_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8004316:	9b01      	ldr	r3, [sp, #4]
 8004318:	2214      	movs	r2, #20
 800431a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 800431e:	f7ff fa8f 	bl	8003840 <osalSysLockFromISR.lto_priv.1>
    usbStartReceiveI(usbp, 0, NULL, 0);
 8004322:	2300      	movs	r3, #0
 8004324:	2200      	movs	r2, #0
 8004326:	2100      	movs	r1, #0
 8004328:	9801      	ldr	r0, [sp, #4]
 800432a:	f7ff fdc9 	bl	8003ec0 <usbStartReceiveI>
    osalSysUnlockFromISR();
 800432e:	f7ff fa8f 	bl	8003850 <osalSysUnlockFromISR.lto_priv.1>
 8004332:	e023      	b.n	800437c <_usb_ep0in+0x12c>
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_IN_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8004334:	9b01      	ldr	r3, [sp, #4]
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <_usb_ep0in+0xf4>
      usbp->ep0endcb(usbp);
 800433c:	9b01      	ldr	r3, [sp, #4]
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	9801      	ldr	r0, [sp, #4]
 8004342:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8004344:	9b01      	ldr	r3, [sp, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800434c:	e016      	b.n	800437c <_usb_ep0in+0x12c>
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800434e:	2100      	movs	r1, #0
 8004350:	9801      	ldr	r0, [sp, #4]
 8004352:	f002 ff45 	bl	80071e0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8004356:	2100      	movs	r1, #0
 8004358:	9801      	ldr	r0, [sp, #4]
 800435a:	f002 ff21 	bl	80071a0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800435e:	9b01      	ldr	r3, [sp, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <_usb_ep0in+0x124>
 8004368:	9b01      	ldr	r3, [sp, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2106      	movs	r1, #6
 8004370:	9801      	ldr	r0, [sp, #4]
 8004372:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8004374:	9b01      	ldr	r3, [sp, #4]
 8004376:	2206      	movs	r2, #6
 8004378:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800437c:	b005      	add	sp, #20
 800437e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004382:	bf00      	nop
	...

08004390 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8004390:	b500      	push	{lr}
 8004392:	b083      	sub	sp, #12
 8004394:	9001      	str	r0, [sp, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)ep;
  switch (usbp->ep0state) {
 800439c:	9b01      	ldr	r3, [sp, #4]
 800439e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80043a2:	2b15      	cmp	r3, #21
 80043a4:	d867      	bhi.n	8004476 <_usb_ep0out+0xe6>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <_usb_ep0out+0x1c>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	08004449 	.word	0x08004449
 80043b0:	08004477 	.word	0x08004477
 80043b4:	08004477 	.word	0x08004477
 80043b8:	08004477 	.word	0x08004477
 80043bc:	08004477 	.word	0x08004477
 80043c0:	08004477 	.word	0x08004477
 80043c4:	08004449 	.word	0x08004449
 80043c8:	08004477 	.word	0x08004477
 80043cc:	08004477 	.word	0x08004477
 80043d0:	08004449 	.word	0x08004449
 80043d4:	08004449 	.word	0x08004449
 80043d8:	08004449 	.word	0x08004449
 80043dc:	08004477 	.word	0x08004477
 80043e0:	08004477 	.word	0x08004477
 80043e4:	08004477 	.word	0x08004477
 80043e8:	08004477 	.word	0x08004477
 80043ec:	08004477 	.word	0x08004477
 80043f0:	08004477 	.word	0x08004477
 80043f4:	08004477 	.word	0x08004477
 80043f8:	08004477 	.word	0x08004477
 80043fc:	08004423 	.word	0x08004423
 8004400:	08004405 	.word	0x08004405
  case USB_EP0_OUT_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8004404:	9b01      	ldr	r3, [sp, #4]
 8004406:	220b      	movs	r2, #11
 8004408:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 800440c:	f7ff fa18 	bl	8003840 <osalSysLockFromISR.lto_priv.1>
    usbStartTransmitI(usbp, 0, NULL, 0);
 8004410:	2300      	movs	r3, #0
 8004412:	2200      	movs	r2, #0
 8004414:	2100      	movs	r1, #0
 8004416:	9801      	ldr	r0, [sp, #4]
 8004418:	f7ff fd9a 	bl	8003f50 <usbStartTransmitI>
    osalSysUnlockFromISR();
 800441c:	f7ff fa18 	bl	8003850 <osalSysUnlockFromISR.lto_priv.1>
 8004420:	e029      	b.n	8004476 <_usb_ep0out+0xe6>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8004422:	9b01      	ldr	r3, [sp, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d123      	bne.n	8004476 <_usb_ep0out+0xe6>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <_usb_ep0out+0xae>
      usbp->ep0endcb(usbp);
 8004436:	9b01      	ldr	r3, [sp, #4]
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	9801      	ldr	r0, [sp, #4]
 800443c:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 800443e:	9b01      	ldr	r3, [sp, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004446:	e016      	b.n	8004476 <_usb_ep0out+0xe6>
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8004448:	2100      	movs	r1, #0
 800444a:	9801      	ldr	r0, [sp, #4]
 800444c:	f002 fec8 	bl	80071e0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8004450:	2100      	movs	r1, #0
 8004452:	9801      	ldr	r0, [sp, #4]
 8004454:	f002 fea4 	bl	80071a0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8004458:	9b01      	ldr	r3, [sp, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <_usb_ep0out+0xde>
 8004462:	9b01      	ldr	r3, [sp, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2106      	movs	r1, #6
 800446a:	9801      	ldr	r0, [sp, #4]
 800446c:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800446e:	9b01      	ldr	r3, [sp, #4]
 8004470:	2206      	movs	r2, #6
 8004472:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8004476:	b003      	add	sp, #12
 8004478:	f85d fb04 	ldr.w	pc, [sp], #4
 800447c:	0000      	movs	r0, r0
	...

08004480 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8004480:	b088      	sub	sp, #32
 8004482:	9003      	str	r0, [sp, #12]
 8004484:	9102      	str	r1, [sp, #8]
 8004486:	9201      	str	r2, [sp, #4]
 8004488:	9300      	str	r3, [sp, #0]
  int i;
  char *q;
  long l, ll;

  l = num;
 800448a:	9b02      	ldr	r3, [sp, #8]
 800448c:	9305      	str	r3, [sp, #20]
  if (divisor == 0) {
 800448e:	9b00      	ldr	r3, [sp, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <long_to_string_with_divisor+0x1a>
    ll = num;
 8004494:	9b02      	ldr	r3, [sp, #8]
 8004496:	9304      	str	r3, [sp, #16]
 8004498:	e001      	b.n	800449e <long_to_string_with_divisor+0x1e>
  } else {
    ll = divisor;
 800449a:	9b00      	ldr	r3, [sp, #0]
 800449c:	9304      	str	r3, [sp, #16]
  }

  q = p + MAX_FILLER;
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	330b      	adds	r3, #11
 80044a2:	9306      	str	r3, [sp, #24]
  do {
    i = (int)(l % radix);
 80044a4:	9b05      	ldr	r3, [sp, #20]
 80044a6:	9a01      	ldr	r2, [sp, #4]
 80044a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80044ac:	9901      	ldr	r1, [sp, #4]
 80044ae:	fb01 f202 	mul.w	r2, r1, r2
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	9307      	str	r3, [sp, #28]
    i += '0';
 80044b6:	9b07      	ldr	r3, [sp, #28]
 80044b8:	3330      	adds	r3, #48	; 0x30
 80044ba:	9307      	str	r3, [sp, #28]
    if (i > '9') {
 80044bc:	9b07      	ldr	r3, [sp, #28]
 80044be:	2b39      	cmp	r3, #57	; 0x39
 80044c0:	dd02      	ble.n	80044c8 <long_to_string_with_divisor+0x48>
      i += 'A' - '0' - 10;
 80044c2:	9b07      	ldr	r3, [sp, #28]
 80044c4:	3307      	adds	r3, #7
 80044c6:	9307      	str	r3, [sp, #28]
    }
    *--q = i;
 80044c8:	9b06      	ldr	r3, [sp, #24]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	9306      	str	r3, [sp, #24]
 80044ce:	9b07      	ldr	r3, [sp, #28]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	9b06      	ldr	r3, [sp, #24]
 80044d4:	701a      	strb	r2, [r3, #0]
    l /= radix;
 80044d6:	9a05      	ldr	r2, [sp, #20]
 80044d8:	9b01      	ldr	r3, [sp, #4]
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	9305      	str	r3, [sp, #20]
  } while ((ll /= radix) != 0);
 80044e0:	9a04      	ldr	r2, [sp, #16]
 80044e2:	9b01      	ldr	r3, [sp, #4]
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	9304      	str	r3, [sp, #16]
 80044ea:	9b04      	ldr	r3, [sp, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1d9      	bne.n	80044a4 <long_to_string_with_divisor+0x24>

  i = (int)(p + MAX_FILLER - q);
 80044f0:	9b03      	ldr	r3, [sp, #12]
 80044f2:	f103 020b 	add.w	r2, r3, #11
 80044f6:	9b06      	ldr	r3, [sp, #24]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	9307      	str	r3, [sp, #28]
  do
    *p++ = *q++;
 80044fc:	9a06      	ldr	r2, [sp, #24]
 80044fe:	1c53      	adds	r3, r2, #1
 8004500:	9306      	str	r3, [sp, #24]
 8004502:	9b03      	ldr	r3, [sp, #12]
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	9103      	str	r1, [sp, #12]
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	701a      	strb	r2, [r3, #0]
  while (--i);
 800450c:	9b07      	ldr	r3, [sp, #28]
 800450e:	3b01      	subs	r3, #1
 8004510:	9307      	str	r3, [sp, #28]
 8004512:	9b07      	ldr	r3, [sp, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f1      	bne.n	80044fc <long_to_string_with_divisor+0x7c>

  return p;
 8004518:	9b03      	ldr	r3, [sp, #12]
}
 800451a:	4618      	mov	r0, r3
 800451c:	b008      	add	sp, #32
 800451e:	4770      	bx	lr

08004520 <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8004520:	b500      	push	{lr}
 8004522:	b085      	sub	sp, #20
 8004524:	9003      	str	r0, [sp, #12]
 8004526:	9102      	str	r1, [sp, #8]
 8004528:	9201      	str	r2, [sp, #4]

  return long_to_string_with_divisor(p, num, radix, 0);
 800452a:	2300      	movs	r3, #0
 800452c:	9a01      	ldr	r2, [sp, #4]
 800452e:	9902      	ldr	r1, [sp, #8]
 8004530:	9803      	ldr	r0, [sp, #12]
 8004532:	f7ff ffa5 	bl	8004480 <long_to_string_with_divisor>
 8004536:	4603      	mov	r3, r0
}
 8004538:	4618      	mov	r0, r3
 800453a:	b005      	add	sp, #20
 800453c:	f85d fb04 	ldr.w	pc, [sp], #4

08004540 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8004540:	b500      	push	{lr}
 8004542:	b091      	sub	sp, #68	; 0x44
 8004544:	9003      	str	r0, [sp, #12]
 8004546:	9102      	str	r1, [sp, #8]
 8004548:	9201      	str	r2, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	9309      	str	r3, [sp, #36]	; 0x24
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800454e:	9b02      	ldr	r3, [sp, #8]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	9202      	str	r2, [sp, #8]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    if (c == 0) {
 800455a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <chvprintf+0x26>
      return n;
 8004562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004564:	e249      	b.n	80049fa <chvprintf+0x4ba>
    }
    
    if (c != '%') {
 8004566:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800456a:	2b25      	cmp	r3, #37	; 0x25
 800456c:	d00b      	beq.n	8004586 <chvprintf+0x46>
      streamPut(chp, (uint8_t)c);
 800456e:	9b03      	ldr	r3, [sp, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8004578:	4611      	mov	r1, r2
 800457a:	9803      	ldr	r0, [sp, #12]
 800457c:	4798      	blx	r3
      n++;
 800457e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004580:	3301      	adds	r3, #1
 8004582:	9309      	str	r3, [sp, #36]	; 0x24
 8004584:	e7e3      	b.n	800454e <chvprintf+0xe>
      continue;
    }
    
    p = tmpbuf;
 8004586:	ab04      	add	r3, sp, #16
 8004588:	930f      	str	r3, [sp, #60]	; 0x3c
    s = tmpbuf;
 800458a:	ab04      	add	r3, sp, #16
 800458c:	930e      	str	r3, [sp, #56]	; 0x38

    /* Alignment mode.*/
    left_align = false;
 800458e:	2300      	movs	r3, #0
 8004590:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    if (*fmt == '-') {
 8004594:	9b02      	ldr	r3, [sp, #8]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b2d      	cmp	r3, #45	; 0x2d
 800459a:	d105      	bne.n	80045a8 <chvprintf+0x68>
      fmt++;
 800459c:	9b02      	ldr	r3, [sp, #8]
 800459e:	3301      	adds	r3, #1
 80045a0:	9302      	str	r3, [sp, #8]
      left_align = true;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    }

    /* Sign mode.*/
    do_sign = false;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    if (*fmt == '+') {
 80045ae:	9b02      	ldr	r3, [sp, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b2b      	cmp	r3, #43	; 0x2b
 80045b4:	d105      	bne.n	80045c2 <chvprintf+0x82>
      fmt++;
 80045b6:	9b02      	ldr	r3, [sp, #8]
 80045b8:	3301      	adds	r3, #1
 80045ba:	9302      	str	r3, [sp, #8]
      do_sign = true;
 80045bc:	2301      	movs	r3, #1
 80045be:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    }

    /* Filler mode.*/
    filler = ' ';
 80045c2:	2320      	movs	r3, #32
 80045c4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    if (*fmt == '0') {
 80045c8:	9b02      	ldr	r3, [sp, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d105      	bne.n	80045dc <chvprintf+0x9c>
      fmt++;
 80045d0:	9b02      	ldr	r3, [sp, #8]
 80045d2:	3301      	adds	r3, #1
 80045d4:	9302      	str	r3, [sp, #8]
      filler = '0';
 80045d6:	2330      	movs	r3, #48	; 0x30
 80045d8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
 80045dc:	9b02      	ldr	r3, [sp, #8]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b2a      	cmp	r3, #42	; 0x2a
 80045e2:	d10e      	bne.n	8004602 <chvprintf+0xc2>
      width = va_arg(ap, int);
 80045e4:	9b01      	ldr	r3, [sp, #4]
 80045e6:	1d1a      	adds	r2, r3, #4
 80045e8:	9201      	str	r2, [sp, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	930a      	str	r3, [sp, #40]	; 0x28
      ++fmt;
 80045ee:	9b02      	ldr	r3, [sp, #8]
 80045f0:	3301      	adds	r3, #1
 80045f2:	9302      	str	r3, [sp, #8]
      c = *fmt++;
 80045f4:	9b02      	ldr	r3, [sp, #8]
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	9202      	str	r2, [sp, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8004600:	e025      	b.n	800464e <chvprintf+0x10e>
    }
    else {
      width = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	930a      	str	r3, [sp, #40]	; 0x28
      while (true) {
        c = *fmt++;
 8004606:	9b02      	ldr	r3, [sp, #8]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	9202      	str	r2, [sp, #8]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
        if (c == 0) {
 8004612:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <chvprintf+0xde>
          return n;
 800461a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800461c:	e1ed      	b.n	80049fa <chvprintf+0x4ba>
        }
        if (c >= '0' && c <= '9') {
 800461e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004622:	2b2f      	cmp	r3, #47	; 0x2f
 8004624:	d913      	bls.n	800464e <chvprintf+0x10e>
 8004626:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800462a:	2b39      	cmp	r3, #57	; 0x39
 800462c:	d80f      	bhi.n	800464e <chvprintf+0x10e>
          c -= '0';
 800462e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004632:	3b30      	subs	r3, #48	; 0x30
 8004634:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
          width = width * 10 + c;
 8004638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	461a      	mov	r2, r3
 8004644:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004648:	4413      	add	r3, r2
 800464a:	930a      	str	r3, [sp, #40]	; 0x28
 800464c:	e7db      	b.n	8004606 <chvprintf+0xc6>
        }
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	930b      	str	r3, [sp, #44]	; 0x2c
    if (c == '.') {
 8004652:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004656:	2b2e      	cmp	r3, #46	; 0x2e
 8004658:	d13e      	bne.n	80046d8 <chvprintf+0x198>
      c = *fmt++;
 800465a:	9b02      	ldr	r3, [sp, #8]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	9202      	str	r2, [sp, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      if (c == 0) {
 8004666:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <chvprintf+0x132>
        return n;
 800466e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004670:	e1c3      	b.n	80049fa <chvprintf+0x4ba>
      }
      if (c == '*') {
 8004672:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004676:	2b2a      	cmp	r3, #42	; 0x2a
 8004678:	d126      	bne.n	80046c8 <chvprintf+0x188>
        precision = va_arg(ap, int);
 800467a:	9b01      	ldr	r3, [sp, #4]
 800467c:	1d1a      	adds	r2, r3, #4
 800467e:	9201      	str	r2, [sp, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	930b      	str	r3, [sp, #44]	; 0x2c
        c = *fmt++;
 8004684:	9b02      	ldr	r3, [sp, #8]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	9202      	str	r2, [sp, #8]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8004690:	e022      	b.n	80046d8 <chvprintf+0x198>
      }
      else {
        while (c >= '0' && c <= '9') {
          c -= '0';
 8004692:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004696:	3b30      	subs	r3, #48	; 0x30
 8004698:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
          precision = precision * 10 + c;
 800469c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	461a      	mov	r2, r3
 80046a8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80046ac:	4413      	add	r3, r2
 80046ae:	930b      	str	r3, [sp, #44]	; 0x2c
          c = *fmt++;
 80046b0:	9b02      	ldr	r3, [sp, #8]
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	9202      	str	r2, [sp, #8]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
          if (c == 0) {
 80046bc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <chvprintf+0x188>
            return n;
 80046c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c6:	e198      	b.n	80049fa <chvprintf+0x4ba>
        while (c >= '0' && c <= '9') {
 80046c8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80046cc:	2b2f      	cmp	r3, #47	; 0x2f
 80046ce:	d903      	bls.n	80046d8 <chvprintf+0x198>
 80046d0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80046d4:	2b39      	cmp	r3, #57	; 0x39
 80046d6:	d9dc      	bls.n	8004692 <chvprintf+0x152>
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80046d8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80046dc:	2b6c      	cmp	r3, #108	; 0x6c
 80046de:	d003      	beq.n	80046e8 <chvprintf+0x1a8>
 80046e0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80046e4:	2b4c      	cmp	r3, #76	; 0x4c
 80046e6:	d10e      	bne.n	8004706 <chvprintf+0x1c6>
      is_long = true;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
      c = *fmt++;
 80046ee:	9b02      	ldr	r3, [sp, #8]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	9202      	str	r2, [sp, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      if (c == 0) {
 80046fa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d114      	bne.n	800472c <chvprintf+0x1ec>
        return n;
 8004702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004704:	e179      	b.n	80049fa <chvprintf+0x4ba>
      }
    }
    else {
      is_long = (c >= 'A') && (c <= 'Z');
 8004706:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d905      	bls.n	800471a <chvprintf+0x1da>
 800470e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004712:	2b5a      	cmp	r3, #90	; 0x5a
 8004714:	d801      	bhi.n	800471a <chvprintf+0x1da>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <chvprintf+0x1dc>
 800471a:	2300      	movs	r3, #0
 800471c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8004720:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    /* Command decoding.*/
    switch (c) {
 800472c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004730:	3b44      	subs	r3, #68	; 0x44
 8004732:	2b34      	cmp	r3, #52	; 0x34
 8004734:	f200 80ed 	bhi.w	8004912 <chvprintf+0x3d2>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <chvprintf+0x200>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004877 	.word	0x08004877
 8004744:	08004913 	.word	0x08004913
 8004748:	08004913 	.word	0x08004913
 800474c:	08004913 	.word	0x08004913
 8004750:	08004913 	.word	0x08004913
 8004754:	08004877 	.word	0x08004877
 8004758:	08004913 	.word	0x08004913
 800475c:	08004913 	.word	0x08004913
 8004760:	08004913 	.word	0x08004913
 8004764:	08004913 	.word	0x08004913
 8004768:	08004913 	.word	0x08004913
 800476c:	080048dd 	.word	0x080048dd
 8004770:	080048cd 	.word	0x080048cd
 8004774:	08004913 	.word	0x08004913
 8004778:	08004913 	.word	0x08004913
 800477c:	08004913 	.word	0x08004913
 8004780:	08004913 	.word	0x08004913
 8004784:	080048d5 	.word	0x080048d5
 8004788:	08004913 	.word	0x08004913
 800478c:	08004913 	.word	0x08004913
 8004790:	080048cd 	.word	0x080048cd
 8004794:	08004913 	.word	0x08004913
 8004798:	08004913 	.word	0x08004913
 800479c:	08004913 	.word	0x08004913
 80047a0:	08004913 	.word	0x08004913
 80047a4:	08004913 	.word	0x08004913
 80047a8:	08004913 	.word	0x08004913
 80047ac:	08004913 	.word	0x08004913
 80047b0:	08004913 	.word	0x08004913
 80047b4:	08004913 	.word	0x08004913
 80047b8:	08004913 	.word	0x08004913
 80047bc:	08004815 	.word	0x08004815
 80047c0:	08004877 	.word	0x08004877
 80047c4:	08004913 	.word	0x08004913
 80047c8:	08004913 	.word	0x08004913
 80047cc:	08004913 	.word	0x08004913
 80047d0:	08004913 	.word	0x08004913
 80047d4:	08004877 	.word	0x08004877
 80047d8:	08004913 	.word	0x08004913
 80047dc:	08004913 	.word	0x08004913
 80047e0:	08004913 	.word	0x08004913
 80047e4:	08004913 	.word	0x08004913
 80047e8:	08004913 	.word	0x08004913
 80047ec:	080048dd 	.word	0x080048dd
 80047f0:	080048cd 	.word	0x080048cd
 80047f4:	08004913 	.word	0x08004913
 80047f8:	08004913 	.word	0x08004913
 80047fc:	0800482f 	.word	0x0800482f
 8004800:	08004913 	.word	0x08004913
 8004804:	080048d5 	.word	0x080048d5
 8004808:	08004913 	.word	0x08004913
 800480c:	08004913 	.word	0x08004913
 8004810:	080048cd 	.word	0x080048cd
    case 'c':
      filler = ' ';
 8004814:	2320      	movs	r3, #32
 8004816:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
      *p++ = va_arg(ap, int);
 800481a:	9b01      	ldr	r3, [sp, #4]
 800481c:	1d1a      	adds	r2, r3, #4
 800481e:	9201      	str	r2, [sp, #4]
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	920f      	str	r2, [sp, #60]	; 0x3c
 8004828:	b2ca      	uxtb	r2, r1
 800482a:	701a      	strb	r2, [r3, #0]
 800482c:	e077      	b.n	800491e <chvprintf+0x3de>
      break;
    case 's':
      filler = ' ';
 800482e:	2320      	movs	r3, #32
 8004830:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
      if ((s = va_arg(ap, char *)) == 0) {
 8004834:	9b01      	ldr	r3, [sp, #4]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	9201      	str	r2, [sp, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	930e      	str	r3, [sp, #56]	; 0x38
 800483e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <chvprintf+0x308>
        s = "(null)";
 8004844:	4b6f      	ldr	r3, [pc, #444]	; (8004a04 <chvprintf+0x4c4>)
 8004846:	930e      	str	r3, [sp, #56]	; 0x38
      }
      if (precision == 0) {
 8004848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <chvprintf+0x314>
        precision = 32767;
 800484e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004852:	930b      	str	r3, [sp, #44]	; 0x2c
      }
      for (p = s; *p && (--precision >= 0); p++)
 8004854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004856:	930f      	str	r3, [sp, #60]	; 0x3c
 8004858:	e002      	b.n	8004860 <chvprintf+0x320>
 800485a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800485c:	3301      	adds	r3, #1
 800485e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d05a      	beq.n	800491e <chvprintf+0x3de>
 8004868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800486a:	3b01      	subs	r3, #1
 800486c:	930b      	str	r3, [sp, #44]	; 0x2c
 800486e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004870:	2b00      	cmp	r3, #0
 8004872:	daf2      	bge.n	800485a <chvprintf+0x31a>
 8004874:	e053      	b.n	800491e <chvprintf+0x3de>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long) {
 8004876:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <chvprintf+0x34a>
        l = va_arg(ap, long);
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	1d1a      	adds	r2, r3, #4
 8004882:	9201      	str	r2, [sp, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	9307      	str	r3, [sp, #28]
 8004888:	e004      	b.n	8004894 <chvprintf+0x354>
      }
      else {
        l = va_arg(ap, int);
 800488a:	9b01      	ldr	r3, [sp, #4]
 800488c:	1d1a      	adds	r2, r3, #4
 800488e:	9201      	str	r2, [sp, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	9307      	str	r3, [sp, #28]
      }
      if (l < 0) {
 8004894:	9b07      	ldr	r3, [sp, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	da08      	bge.n	80048ac <chvprintf+0x36c>
        *p++ = '-';
 800489a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	920f      	str	r2, [sp, #60]	; 0x3c
 80048a0:	222d      	movs	r2, #45	; 0x2d
 80048a2:	701a      	strb	r2, [r3, #0]
        l = -l;
 80048a4:	9b07      	ldr	r3, [sp, #28]
 80048a6:	425b      	negs	r3, r3
 80048a8:	9307      	str	r3, [sp, #28]
 80048aa:	e008      	b.n	80048be <chvprintf+0x37e>
      }
      else
        if (do_sign) {
 80048ac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <chvprintf+0x37e>
          *p++ = '+';
 80048b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	920f      	str	r2, [sp, #60]	; 0x3c
 80048ba:	222b      	movs	r2, #43	; 0x2b
 80048bc:	701a      	strb	r2, [r3, #0]
        }
      p = ch_ltoa(p, l, 10);
 80048be:	220a      	movs	r2, #10
 80048c0:	9907      	ldr	r1, [sp, #28]
 80048c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048c4:	f7ff fe2c 	bl	8004520 <ch_ltoa>
 80048c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80048ca:	e028      	b.n	800491e <chvprintf+0x3de>
#endif
    case 'X':
    case 'x':
    case 'P':
    case 'p':
      c = 16;
 80048cc:	2310      	movs	r3, #16
 80048ce:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80048d2:	e006      	b.n	80048e2 <chvprintf+0x3a2>
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
 80048d4:	230a      	movs	r3, #10
 80048d6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80048da:	e002      	b.n	80048e2 <chvprintf+0x3a2>
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
 80048dc:	2308      	movs	r3, #8
 80048de:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
unsigned_common:
      if (is_long) {
 80048e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <chvprintf+0x3b6>
        l = va_arg(ap, unsigned long);
 80048ea:	9b01      	ldr	r3, [sp, #4]
 80048ec:	1d1a      	adds	r2, r3, #4
 80048ee:	9201      	str	r2, [sp, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	9307      	str	r3, [sp, #28]
 80048f4:	e004      	b.n	8004900 <chvprintf+0x3c0>
      }
      else {
        l = va_arg(ap, unsigned int);
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	1d1a      	adds	r2, r3, #4
 80048fa:	9201      	str	r2, [sp, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	9307      	str	r3, [sp, #28]
      }
      p = ch_ltoa(p, l, c);
 8004900:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004904:	461a      	mov	r2, r3
 8004906:	9907      	ldr	r1, [sp, #28]
 8004908:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800490a:	f7ff fe09 	bl	8004520 <ch_ltoa>
 800490e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004910:	e005      	b.n	800491e <chvprintf+0x3de>
      break;
    default:
      *p++ = c;
 8004912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	920f      	str	r2, [sp, #60]	; 0x3c
 8004918:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800491c:	701a      	strb	r2, [r3, #0]
      break;
    }
    i = (int)(p - s);
 800491e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	930c      	str	r3, [sp, #48]	; 0x30
    if ((width -= i) < 0) {
 8004926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	930a      	str	r3, [sp, #40]	; 0x28
 800492e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	da01      	bge.n	8004938 <chvprintf+0x3f8>
      width = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	930a      	str	r3, [sp, #40]	; 0x28
    }
    if (left_align == false) {
 8004938:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800493c:	f083 0301 	eor.w	r3, r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <chvprintf+0x40c>
      width = -width;
 8004946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004948:	425b      	negs	r3, r3
 800494a:	930a      	str	r3, [sp, #40]	; 0x28
    }
    if (width < 0) {
 800494c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800494e:	2b00      	cmp	r3, #0
 8004950:	da3a      	bge.n	80049c8 <chvprintf+0x488>
      if ((*s == '-' || *s == '+') && filler == '0') {
 8004952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b2d      	cmp	r3, #45	; 0x2d
 8004958:	d003      	beq.n	8004962 <chvprintf+0x422>
 800495a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b2b      	cmp	r3, #43	; 0x2b
 8004960:	d113      	bne.n	800498a <chvprintf+0x44a>
 8004962:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8004966:	2b30      	cmp	r3, #48	; 0x30
 8004968:	d10f      	bne.n	800498a <chvprintf+0x44a>
        streamPut(chp, (uint8_t)*s++);
 800496a:	9b03      	ldr	r3, [sp, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	910e      	str	r1, [sp, #56]	; 0x38
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	4619      	mov	r1, r3
 800497a:	9803      	ldr	r0, [sp, #12]
 800497c:	4790      	blx	r2
        n++;
 800497e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004980:	3301      	adds	r3, #1
 8004982:	9309      	str	r3, [sp, #36]	; 0x24
        i--;
 8004984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004986:	3b01      	subs	r3, #1
 8004988:	930c      	str	r3, [sp, #48]	; 0x30
      }
      do {
        streamPut(chp, (uint8_t)filler);
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8004994:	4611      	mov	r1, r2
 8004996:	9803      	ldr	r0, [sp, #12]
 8004998:	4798      	blx	r3
        n++;
 800499a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800499c:	3301      	adds	r3, #1
 800499e:	9309      	str	r3, [sp, #36]	; 0x24
      } while (++width != 0);
 80049a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a2:	3301      	adds	r3, #1
 80049a4:	930a      	str	r3, [sp, #40]	; 0x28
 80049a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1ee      	bne.n	800498a <chvprintf+0x44a>
 80049ac:	e00c      	b.n	80049c8 <chvprintf+0x488>
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 80049ae:	9b03      	ldr	r3, [sp, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	910e      	str	r1, [sp, #56]	; 0x38
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	4619      	mov	r1, r3
 80049be:	9803      	ldr	r0, [sp, #12]
 80049c0:	4790      	blx	r2
      n++;
 80049c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c4:	3301      	adds	r3, #1
 80049c6:	9309      	str	r3, [sp, #36]	; 0x24
    while (--i >= 0) {
 80049c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049ca:	3b01      	subs	r3, #1
 80049cc:	930c      	str	r3, [sp, #48]	; 0x30
 80049ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	daec      	bge.n	80049ae <chvprintf+0x46e>
 80049d4:	e00d      	b.n	80049f2 <chvprintf+0x4b2>
    }

    while (width) {
      streamPut(chp, (uint8_t)filler);
 80049d6:	9b03      	ldr	r3, [sp, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 80049e0:	4611      	mov	r1, r2
 80049e2:	9803      	ldr	r0, [sp, #12]
 80049e4:	4798      	blx	r3
      n++;
 80049e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e8:	3301      	adds	r3, #1
 80049ea:	9309      	str	r3, [sp, #36]	; 0x24
      width--;
 80049ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ee:	3b01      	subs	r3, #1
 80049f0:	930a      	str	r3, [sp, #40]	; 0x28
    while (width) {
 80049f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ee      	bne.n	80049d6 <chvprintf+0x496>
 80049f8:	e5a9      	b.n	800454e <chvprintf+0xe>
    }
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	b011      	add	sp, #68	; 0x44
 80049fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a02:	bf00      	nop
 8004a04:	0800a824 	.word	0x0800a824
	...

08004a10 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8004a10:	b40e      	push	{r1, r2, r3}
 8004a12:	b500      	push	{lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	9001      	str	r0, [sp, #4]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8004a18:	ab06      	add	r3, sp, #24
 8004a1a:	9302      	str	r3, [sp, #8]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8004a1c:	9a02      	ldr	r2, [sp, #8]
 8004a1e:	9905      	ldr	r1, [sp, #20]
 8004a20:	9801      	ldr	r0, [sp, #4]
 8004a22:	f7ff fd8d 	bl	8004540 <chvprintf>
 8004a26:	9003      	str	r0, [sp, #12]
  va_end(ap);

  return formatted_bytes;
 8004a28:	9b03      	ldr	r3, [sp, #12]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	b004      	add	sp, #16
 8004a2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a32:	b003      	add	sp, #12
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
	...

08004a40 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8004a40:	b082      	sub	sp, #8
 8004a42:	9001      	str	r0, [sp, #4]
 8004a44:	9100      	str	r1, [sp, #0]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	4a11      	ldr	r2, [pc, #68]	; (8004a90 <nvicEnableVector+0x50>)
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	b2d9      	uxtb	r1, r3
 8004a50:	9b01      	ldr	r3, [sp, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004a58:	460a      	mov	r2, r1
 8004a5a:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004a5c:	9b01      	ldr	r3, [sp, #4]
 8004a5e:	f003 021f 	and.w	r2, r3, #31
 8004a62:	490b      	ldr	r1, [pc, #44]	; (8004a90 <nvicEnableVector+0x50>)
 8004a64:	9b01      	ldr	r3, [sp, #4]
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2001      	movs	r0, #1
 8004a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a6e:	3360      	adds	r3, #96	; 0x60
 8004a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004a74:	9b01      	ldr	r3, [sp, #4]
 8004a76:	f003 021f 	and.w	r2, r3, #31
 8004a7a:	4905      	ldr	r1, [pc, #20]	; (8004a90 <nvicEnableVector+0x50>)
 8004a7c:	9b01      	ldr	r3, [sp, #4]
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	2001      	movs	r0, #1
 8004a82:	fa00 f202 	lsl.w	r2, r0, r2
 8004a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* If the IRQ is enabled from secure mode then it is marked as secure
     interrupt in ITNS.*/
  NVIC->__ITNS[n >> 5U] &= ~(1U << (n & 0x1FU));
#endif
}
 8004a8a:	b002      	add	sp, #8
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	e000e100 	.word	0xe000e100
	...

08004aa0 <nvicDisableVector>:
/**
 * @brief   Disables an interrupt handler.
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	9001      	str	r0, [sp, #4]

  NVIC->__ICER[n >> 5U] = 1U << (n & 0x1FU);
 8004aa4:	9b01      	ldr	r3, [sp, #4]
 8004aa6:	f003 021f 	and.w	r2, r3, #31
 8004aaa:	490f      	ldr	r1, [pc, #60]	; (8004ae8 <nvicDisableVector+0x48>)
 8004aac:	9b01      	ldr	r3, [sp, #4]
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ab6:	3320      	adds	r3, #32
 8004ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004abc:	9b01      	ldr	r3, [sp, #4]
 8004abe:	f003 021f 	and.w	r2, r3, #31
 8004ac2:	4909      	ldr	r1, [pc, #36]	; (8004ae8 <nvicDisableVector+0x48>)
 8004ac4:	9b01      	ldr	r3, [sp, #4]
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	2001      	movs	r0, #1
 8004aca:	fa00 f202 	lsl.w	r2, r0, r2
 8004ace:	3360      	adds	r3, #96	; 0x60
 8004ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = 0U;
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <nvicDisableVector+0x48>)
 8004ad6:	9b01      	ldr	r3, [sp, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
#endif
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* Marked as not secure again.*/
  NVIC->__ITNS[n >> 5U] |= 1U << (n & 0x1FU);
#endif
}
 8004ae2:	b002      	add	sp, #8
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	e000e100 	.word	0xe000e100
 8004aec:	00000000 	.word	0x00000000

08004af0 <nvicSetSystemHandlerPriority>:
 * @brief   Changes the priority of a system handler.
 *
 * @param[in] handler   the system handler number
 * @param[in] prio      the system handler priority
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {
 8004af0:	b500      	push	{lr}
 8004af2:	b083      	sub	sp, #12
 8004af4:	9001      	str	r0, [sp, #4]
 8004af6:	9100      	str	r1, [sp, #0]

  osalDbgCheck(handler < 12U);
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	2b0b      	cmp	r3, #11
 8004afc:	bf8c      	ite	hi
 8004afe:	2301      	movhi	r3, #1
 8004b00:	2300      	movls	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <nvicSetSystemHandlerPriority+0x1e>
 8004b08:	4807      	ldr	r0, [pc, #28]	; (8004b28 <nvicSetSystemHandlerPriority+0x38>)
 8004b0a:	f002 fc51 	bl	80073b0 <chSysHalt>
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  SCB->__SHPR[_SHP_IDX(handler)] = (SCB->__SHPR[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                   (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#else
  SCB->__SHPR[handler] = NVIC_PRIORITY_MASK(prio);
 8004b0e:	9b00      	ldr	r3, [sp, #0]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	4a06      	ldr	r2, [pc, #24]	; (8004b2c <nvicSetSystemHandlerPriority+0x3c>)
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	b2d9      	uxtb	r1, r3
 8004b18:	9b01      	ldr	r3, [sp, #4]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3318      	adds	r3, #24
 8004b1e:	460a      	mov	r2, r1
 8004b20:	701a      	strb	r2, [r3, #0]
#endif
}
 8004b22:	b003      	add	sp, #12
 8004b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b28:	0800a82c 	.word	0x0800a82c
 8004b2c:	e000ed00 	.word	0xe000ed00

08004b30 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8004b30:	b508      	push	{r3, lr}

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8004b32:	2106      	movs	r1, #6
 8004b34:	2006      	movs	r0, #6
 8004b36:	f7ff ff83 	bl	8004a40 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 8004b3a:	2106      	movs	r1, #6
 8004b3c:	2007      	movs	r0, #7
 8004b3e:	f7ff ff7f 	bl	8004a40 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8004b42:	2106      	movs	r1, #6
 8004b44:	2008      	movs	r0, #8
 8004b46:	f7ff ff7b 	bl	8004a40 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 8004b4a:	2106      	movs	r1, #6
 8004b4c:	2009      	movs	r0, #9
 8004b4e:	f7ff ff77 	bl	8004a40 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8004b52:	2106      	movs	r1, #6
 8004b54:	200a      	movs	r0, #10
 8004b56:	f7ff ff73 	bl	8004a40 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 8004b5a:	2106      	movs	r1, #6
 8004b5c:	2017      	movs	r0, #23
 8004b5e:	f7ff ff6f 	bl	8004a40 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8004b62:	2106      	movs	r1, #6
 8004b64:	2028      	movs	r0, #40	; 0x28
 8004b66:	f7ff ff6b 	bl	8004a40 <nvicEnableVector>
#endif
}
 8004b6a:	bd08      	pop	{r3, pc}
 8004b6c:	0000      	movs	r0, r0
	...

08004b70 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <hal_lld_backup_domain_init+0x10>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a02      	ldr	r2, [pc, #8]	; (8004b80 <hal_lld_backup_domain_init+0x10>)
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	6013      	str	r3, [r2, #0]
    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
#endif /* STM32_RTCSEL != STM32_RTCSEL_NOCLOCK */
#endif /* HAL_USE_RTC */
}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40007000 	.word	0x40007000
	...

08004b90 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8004b90:	b508      	push	{r3, lr}

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8004b92:	4b18      	ldr	r3, [pc, #96]	; (8004bf4 <hal_lld_init+0x64>)
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	4b17      	ldr	r3, [pc, #92]	; (8004bf4 <hal_lld_init+0x64>)
 8004b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b9c:	611a      	str	r2, [r3, #16]
 8004b9e:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <hal_lld_init+0x64>)
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <hal_lld_init+0x64>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	611a      	str	r2, [r3, #16]
 8004ba8:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <hal_lld_init+0x64>)
 8004baa:	691b      	ldr	r3, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <hal_lld_init+0x64>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <hal_lld_init+0x64>)
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bb6:	60da      	str	r2, [r3, #12]
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <hal_lld_init+0x64>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <hal_lld_init+0x64>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <hal_lld_init+0x64>)
 8004bc4:	68db      	ldr	r3, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <hal_lld_init+0x64>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	4a0a      	ldr	r2, [pc, #40]	; (8004bf4 <hal_lld_init+0x64>)
 8004bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	61d3      	str	r3, [r2, #28]
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <hal_lld_init+0x64>)
 8004bd4:	69db      	ldr	r3, [r3, #28]
  rccEnableBKPInterface(true);
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <hal_lld_init+0x64>)
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <hal_lld_init+0x64>)
 8004bdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004be0:	61d3      	str	r3, [r2, #28]
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <hal_lld_init+0x64>)
 8004be4:	69db      	ldr	r3, [r3, #28]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8004be6:	f7ff ffc3 	bl	8004b70 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8004bea:	f000 f8c1 	bl	8004d70 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 8004bee:	f7ff ff9f 	bl	8004b30 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8004bf2:	bd08      	pop	{r3, pc}
 8004bf4:	40021000 	.word	0x40021000
	...

08004c00 <stm32_clock_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004c00:	4b1f      	ldr	r3, [pc, #124]	; (8004c80 <stm32_clock_init+0x80>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1e      	ldr	r2, [pc, #120]	; (8004c80 <stm32_clock_init+0x80>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004c0c:	4b1c      	ldr	r3, [pc, #112]	; (8004c80 <stm32_clock_init+0x80>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f9      	beq.n	8004c0c <stm32_clock_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <stm32_clock_init+0x80>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <stm32_clock_init+0x80>)
 8004c1e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8004c22:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8004c24:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <stm32_clock_init+0x80>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <stm32_clock_init+0x80>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f9      	bne.n	8004c2a <stm32_clock_init+0x2a>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8004c36:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <stm32_clock_init+0x80>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <stm32_clock_init+0x80>)
 8004c3c:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8004c40:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8004c42:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <stm32_clock_init+0x80>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <stm32_clock_init+0x80>)
 8004c48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c4c:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <stm32_clock_init+0x80>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f9      	beq.n	8004c4e <stm32_clock_init+0x4e>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <stm32_clock_init+0x80>)
 8004c5c:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <stm32_clock_init+0x84>)
 8004c5e:	605a      	str	r2, [r3, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <stm32_clock_init+0x88>)
 8004c62:	2211      	movs	r2, #17
 8004c64:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <stm32_clock_init+0x80>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4a05      	ldr	r2, [pc, #20]	; (8004c80 <stm32_clock_init+0x80>)
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004c72:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <stm32_clock_init+0x80>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d1f9      	bne.n	8004c72 <stm32_clock_init+0x72>

#if !STM32_HSI_ENABLED
  RCC->CR &= ~RCC_CR_HSION;
#endif
#endif /* !STM32_NO_INIT */
}
 8004c7e:	4770      	bx	lr
 8004c80:	40021000 	.word	0x40021000
 8004c84:	00686400 	.word	0x00686400
 8004c88:	40022000 	.word	0x40022000
 8004c8c:	00000000 	.word	0x00000000

08004c90 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8004c90:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004c92:	f002 fc45 	bl	8007520 <__dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8004c96:	4804      	ldr	r0, [pc, #16]	; (8004ca8 <Vector6C+0x18>)
 8004c98:	f000 f97a 	bl	8004f90 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 8004c9c:	f002 fc70 	bl	8007580 <__dbg_check_leave_isr>
 8004ca0:	f004 f9fe 	bl	80090a0 <__port_irq_epilogue>
}
 8004ca4:	bd08      	pop	{r3, pc}
 8004ca6:	bf00      	nop
 8004ca8:	0800a84c 	.word	0x0800a84c
 8004cac:	00000000 	.word	0x00000000

08004cb0 <Vector70>:
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8004cb0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004cb2:	f002 fc35 	bl	8007520 <__dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8004cb6:	4804      	ldr	r0, [pc, #16]	; (8004cc8 <Vector70+0x18>)
 8004cb8:	f000 f96a 	bl	8004f90 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 8004cbc:	f002 fc60 	bl	8007580 <__dbg_check_leave_isr>
 8004cc0:	f004 f9ee 	bl	80090a0 <__port_irq_epilogue>
}
 8004cc4:	bd08      	pop	{r3, pc}
 8004cc6:	bf00      	nop
 8004cc8:	0800a85c 	.word	0x0800a85c
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <Vector74>:
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8004cd0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004cd2:	f002 fc25 	bl	8007520 <__dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8004cd6:	4804      	ldr	r0, [pc, #16]	; (8004ce8 <Vector74+0x18>)
 8004cd8:	f000 f95a 	bl	8004f90 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 8004cdc:	f002 fc50 	bl	8007580 <__dbg_check_leave_isr>
 8004ce0:	f004 f9de 	bl	80090a0 <__port_irq_epilogue>
}
 8004ce4:	bd08      	pop	{r3, pc}
 8004ce6:	bf00      	nop
 8004ce8:	0800a86c 	.word	0x0800a86c
 8004cec:	00000000 	.word	0x00000000

08004cf0 <Vector78>:
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8004cf0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004cf2:	f002 fc15 	bl	8007520 <__dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8004cf6:	4804      	ldr	r0, [pc, #16]	; (8004d08 <Vector78+0x18>)
 8004cf8:	f000 f94a 	bl	8004f90 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 8004cfc:	f002 fc40 	bl	8007580 <__dbg_check_leave_isr>
 8004d00:	f004 f9ce 	bl	80090a0 <__port_irq_epilogue>
}
 8004d04:	bd08      	pop	{r3, pc}
 8004d06:	bf00      	nop
 8004d08:	0800a87c 	.word	0x0800a87c
 8004d0c:	00000000 	.word	0x00000000

08004d10 <Vector7C>:
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8004d10:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004d12:	f002 fc05 	bl	8007520 <__dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8004d16:	4804      	ldr	r0, [pc, #16]	; (8004d28 <Vector7C+0x18>)
 8004d18:	f000 f93a 	bl	8004f90 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 8004d1c:	f002 fc30 	bl	8007580 <__dbg_check_leave_isr>
 8004d20:	f004 f9be 	bl	80090a0 <__port_irq_epilogue>
}
 8004d24:	bd08      	pop	{r3, pc}
 8004d26:	bf00      	nop
 8004d28:	0800a88c 	.word	0x0800a88c
 8004d2c:	00000000 	.word	0x00000000

08004d30 <Vector80>:
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8004d30:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004d32:	f002 fbf5 	bl	8007520 <__dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8004d36:	4804      	ldr	r0, [pc, #16]	; (8004d48 <Vector80+0x18>)
 8004d38:	f000 f92a 	bl	8004f90 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 8004d3c:	f002 fc20 	bl	8007580 <__dbg_check_leave_isr>
 8004d40:	f004 f9ae 	bl	80090a0 <__port_irq_epilogue>
}
 8004d44:	bd08      	pop	{r3, pc}
 8004d46:	bf00      	nop
 8004d48:	0800a89c 	.word	0x0800a89c
 8004d4c:	00000000 	.word	0x00000000

08004d50 <Vector84>:
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8004d50:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004d52:	f002 fbe5 	bl	8007520 <__dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8004d56:	4804      	ldr	r0, [pc, #16]	; (8004d68 <Vector84+0x18>)
 8004d58:	f000 f91a 	bl	8004f90 <dmaServeInterrupt>

  OSAL_IRQ_EPILOGUE();
 8004d5c:	f002 fc10 	bl	8007580 <__dbg_check_leave_isr>
 8004d60:	f004 f99e 	bl	80090a0 <__port_irq_epilogue>
}
 8004d64:	bd08      	pop	{r3, pc}
 8004d66:	bf00      	nop
 8004d68:	0800a8ac 	.word	0x0800a8ac
 8004d6c:	00000000 	.word	0x00000000

08004d70 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8004d70:	b082      	sub	sp, #8
  int i;

  dma.allocated_mask = 0U;
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <dmaInit+0x48>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
  dma.isr_mask       = 0U;
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <dmaInit+0x48>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	605a      	str	r2, [r3, #4]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	e010      	b.n	8004da6 <dmaInit+0x36>
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <dmaInit+0x4c>)
 8004d86:	9b01      	ldr	r3, [sp, #4]
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
    dma.streams[i].func = NULL;
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <dmaInit+0x48>)
 8004d96:	9b01      	ldr	r3, [sp, #4]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8004da0:	9b01      	ldr	r3, [sp, #4]
 8004da2:	3301      	adds	r3, #1
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	9b01      	ldr	r3, [sp, #4]
 8004da8:	2b06      	cmp	r3, #6
 8004daa:	ddeb      	ble.n	8004d84 <dmaInit+0x14>
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <dmaInit+0x50>)
 8004dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db2:	605a      	str	r2, [r3, #4]
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
#endif
}
 8004db4:	b002      	add	sp, #8
 8004db6:	4770      	bx	lr
 8004db8:	20000d60 	.word	0x20000d60
 8004dbc:	0800a84c 	.word	0x0800a84c
 8004dc0:	40020000 	.word	0x40020000
	...

08004dd0 <dmaStreamAllocI>:
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
 8004dd0:	b500      	push	{lr}
 8004dd2:	b08b      	sub	sp, #44	; 0x2c
 8004dd4:	9003      	str	r0, [sp, #12]
 8004dd6:	9102      	str	r1, [sp, #8]
 8004dd8:	9201      	str	r2, [sp, #4]
 8004dda:	9300      	str	r3, [sp, #0]
  uint32_t i, startid, endid;

  osalDbgCheckClassI();
 8004ddc:	f002 fc08 	bl	80075f0 <chDbgCheckClassI>

  if (id < STM32_DMA_STREAMS) {
 8004de0:	9b03      	ldr	r3, [sp, #12]
 8004de2:	2b06      	cmp	r3, #6
 8004de4:	d806      	bhi.n	8004df4 <dmaStreamAllocI+0x24>
    startid = id;
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	9308      	str	r3, [sp, #32]
    endid   = id;
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	9307      	str	r3, [sp, #28]
  else {
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
 8004dee:	9b08      	ldr	r3, [sp, #32]
 8004df0:	9309      	str	r3, [sp, #36]	; 0x24
 8004df2:	e064      	b.n	8004ebe <dmaStreamAllocI+0xee>
    osalDbgCheck(false);
 8004df4:	4836      	ldr	r0, [pc, #216]	; (8004ed0 <dmaStreamAllocI+0x100>)
 8004df6:	f002 fadb 	bl	80073b0 <chSysHalt>
    return NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e064      	b.n	8004ec8 <dmaStreamAllocI+0xf8>
    uint32_t mask = (1U << i);
 8004dfe:	2201      	movs	r2, #1
 8004e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	9306      	str	r3, [sp, #24]
    if ((dma.allocated_mask & mask) == 0U) {
 8004e08:	4b32      	ldr	r3, [pc, #200]	; (8004ed4 <dmaStreamAllocI+0x104>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	9b06      	ldr	r3, [sp, #24]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d151      	bne.n	8004eb8 <dmaStreamAllocI+0xe8>
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8004e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <dmaStreamAllocI+0x108>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	9305      	str	r3, [sp, #20]

      /* Installs the DMA handler.*/
      dma.streams[i].func  = func;
 8004e1e:	492d      	ldr	r1, [pc, #180]	; (8004ed4 <dmaStreamAllocI+0x104>)
 8004e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e22:	3301      	adds	r3, #1
 8004e24:	9a01      	ldr	r2, [sp, #4]
 8004e26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
      dma.streams[i].param = param;
 8004e2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ed4 <dmaStreamAllocI+0x104>)
 8004e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2e:	3301      	adds	r3, #1
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	9a00      	ldr	r2, [sp, #0]
 8004e36:	605a      	str	r2, [r3, #4]
      dma.allocated_mask  |= mask;
 8004e38:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <dmaStreamAllocI+0x104>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	9b06      	ldr	r3, [sp, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	4a24      	ldr	r2, [pc, #144]	; (8004ed4 <dmaStreamAllocI+0x104>)
 8004e42:	6013      	str	r3, [r2, #0]

      /* Enabling DMA clocks required by the current streams set.*/
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8004e44:	9b06      	ldr	r3, [sp, #24]
 8004e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <dmaStreamAllocI+0x8e>
        rccEnableDMA1(true);
 8004e4e:	4b23      	ldr	r3, [pc, #140]	; (8004edc <dmaStreamAllocI+0x10c>)
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	4a22      	ldr	r2, [pc, #136]	; (8004edc <dmaStreamAllocI+0x10c>)
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	6153      	str	r3, [r2, #20]
 8004e5a:	4b20      	ldr	r3, [pc, #128]	; (8004edc <dmaStreamAllocI+0x10c>)
 8004e5c:	695b      	ldr	r3, [r3, #20]
      }
#endif

      /* Enables the associated IRQ vector if not already enabled and if a
         callback is defined.*/
      if (func != NULL) {
 8004e5e:	9b01      	ldr	r3, [sp, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d012      	beq.n	8004e8a <dmaStreamAllocI+0xba>
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8004e64:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <dmaStreamAllocI+0x104>)
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	9b05      	ldr	r3, [sp, #20]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d105      	bne.n	8004e7e <dmaStreamAllocI+0xae>
          nvicEnableVector(dmastp->vector, priority);
 8004e72:	9b05      	ldr	r3, [sp, #20]
 8004e74:	7bdb      	ldrb	r3, [r3, #15]
 8004e76:	9902      	ldr	r1, [sp, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff fde1 	bl	8004a40 <nvicEnableVector>
        }
        dma.isr_mask |= mask;
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <dmaStreamAllocI+0x104>)
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	9b06      	ldr	r3, [sp, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <dmaStreamAllocI+0x104>)
 8004e88:	6053      	str	r3, [r2, #4]
      }

      /* Putting the stream in a known state.*/
      dmaStreamDisable(dmastp);
 8004e8a:	9b05      	ldr	r3, [sp, #20]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	9b05      	ldr	r3, [sp, #20]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f022 020f 	bic.w	r2, r2, #15
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	9b05      	ldr	r3, [sp, #20]
 8004e9c:	7b5b      	ldrb	r3, [r3, #13]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	230e      	movs	r3, #14
 8004ea2:	fa03 f202 	lsl.w	r2, r3, r2
 8004ea6:	9b05      	ldr	r3, [sp, #20]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8004eac:	9b05      	ldr	r3, [sp, #20]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

      return dmastp;
 8004eb4:	9b05      	ldr	r3, [sp, #20]
 8004eb6:	e007      	b.n	8004ec8 <dmaStreamAllocI+0xf8>
  for (i = startid; i <= endid; i++) {
 8004eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eba:	3301      	adds	r3, #1
 8004ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ec0:	9b07      	ldr	r3, [sp, #28]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d99b      	bls.n	8004dfe <dmaStreamAllocI+0x2e>
    }
  }

  return NULL;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	b00b      	add	sp, #44	; 0x2c
 8004ecc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ed0:	0800a8bc 	.word	0x0800a8bc
 8004ed4:	20000d60 	.word	0x20000d60
 8004ed8:	0800a84c 	.word	0x0800a84c
 8004edc:	40021000 	.word	0x40021000

08004ee0 <dmaStreamFreeI>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @iclass
 */
void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {
 8004ee0:	b500      	push	{lr}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	9001      	str	r0, [sp, #4]
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8004ee6:	9b01      	ldr	r3, [sp, #4]
 8004ee8:	7b9b      	ldrb	r3, [r3, #14]
 8004eea:	9303      	str	r3, [sp, #12]

  osalDbgCheck(dmastp != NULL);
 8004eec:	9b01      	ldr	r3, [sp, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <dmaStreamFreeI+0x22>
 8004efc:	4820      	ldr	r0, [pc, #128]	; (8004f80 <dmaStreamFreeI+0xa0>)
 8004efe:	f002 fa57 	bl	80073b0 <chSysHalt>
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.allocated_mask & (1 << selfindex)) != 0U,
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma.allocated_mask &= ~(1U << selfindex);
 8004f02:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <dmaStreamFreeI+0xa4>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	2101      	movs	r1, #1
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	4013      	ands	r3, r2
 8004f12:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <dmaStreamFreeI+0xa4>)
 8004f14:	6013      	str	r3, [r2, #0]
  dma.isr_mask &= ~(1U << selfindex);
 8004f16:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <dmaStreamFreeI+0xa4>)
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	9b03      	ldr	r3, [sp, #12]
 8004f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f22:	43db      	mvns	r3, r3
 8004f24:	4013      	ands	r3, r2
 8004f26:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <dmaStreamFreeI+0xa4>)
 8004f28:	6053      	str	r3, [r2, #4]

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8004f2a:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <dmaStreamFreeI+0xa4>)
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	9b01      	ldr	r3, [sp, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <dmaStreamFreeI+0x62>
    nvicDisableVector(dmastp->vector);
 8004f38:	9b01      	ldr	r3, [sp, #4]
 8004f3a:	7bdb      	ldrb	r3, [r3, #15]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fdaf 	bl	8004aa0 <nvicDisableVector>
  }

  /* Removes the DMA handler.*/
  dma.streams[selfindex].func  = NULL;
 8004f42:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <dmaStreamFreeI+0xa4>)
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  dma.streams[selfindex].param = NULL;
 8004f4e:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <dmaStreamFreeI+0xa4>)
 8004f50:	9b03      	ldr	r3, [sp, #12]
 8004f52:	3301      	adds	r3, #1
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	2200      	movs	r2, #0
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <dmaStreamFreeI+0xa4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d107      	bne.n	8004f78 <dmaStreamFreeI+0x98>
    rccDisableDMA1();
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <dmaStreamFreeI+0xa8>)
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	4a06      	ldr	r2, [pc, #24]	; (8004f88 <dmaStreamFreeI+0xa8>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6153      	str	r3, [r2, #20]
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <dmaStreamFreeI+0xa8>)
 8004f76:	695b      	ldr	r3, [r3, #20]
  /* Shutting down DMAMUX if present.*/
  if (dma.allocated_mask == 0U) {
    rccDisableDMAMUX();
  }
#endif
}
 8004f78:	b005      	add	sp, #20
 8004f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f7e:	bf00      	nop
 8004f80:	0800a8cc 	.word	0x0800a8cc
 8004f84:	20000d60 	.word	0x20000d60
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	00000000 	.word	0x00000000

08004f90 <dmaServeInterrupt>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 8004f90:	b500      	push	{lr}
 8004f92:	b085      	sub	sp, #20
 8004f94:	9001      	str	r0, [sp, #4]
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8004f96:	9b01      	ldr	r3, [sp, #4]
 8004f98:	7b9b      	ldrb	r3, [r3, #14]
 8004f9a:	9303      	str	r3, [sp, #12]

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8004f9c:	9b01      	ldr	r3, [sp, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	9a01      	ldr	r2, [sp, #4]
 8004fa4:	7b52      	ldrb	r2, [r2, #13]
 8004fa6:	40d3      	lsrs	r3, r2
 8004fa8:	f003 030e 	and.w	r3, r3, #14
 8004fac:	9302      	str	r3, [sp, #8]
  if (flags & dmastp->channel->CCR) {
 8004fae:	9b01      	ldr	r3, [sp, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	9b02      	ldr	r3, [sp, #8]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01c      	beq.n	8004ff6 <dmaServeInterrupt+0x66>
    dmastp->dma->IFCR = flags << dmastp->shift;
 8004fbc:	9b01      	ldr	r3, [sp, #4]
 8004fbe:	7b5b      	ldrb	r3, [r3, #13]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	9b01      	ldr	r3, [sp, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	9a02      	ldr	r2, [sp, #8]
 8004fc8:	408a      	lsls	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8004fcc:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <dmaServeInterrupt+0x6c>)
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <dmaServeInterrupt+0x66>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8004fda:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <dmaServeInterrupt+0x6c>)
 8004fdc:	9b03      	ldr	r3, [sp, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004fe4:	4905      	ldr	r1, [pc, #20]	; (8004ffc <dmaServeInterrupt+0x6c>)
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	440b      	add	r3, r1
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	9902      	ldr	r1, [sp, #8]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	4790      	blx	r2
    }
  }
}
 8004ff6:	b005      	add	sp, #20
 8004ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ffc:	20000d60 	.word	0x20000d60

08005000 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8005000:	b082      	sub	sp, #8
 8005002:	9001      	str	r0, [sp, #4]
#endif

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, true);
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <_pal_lld_init+0x90>)
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	4a21      	ldr	r2, [pc, #132]	; (8005090 <_pal_lld_init+0x90>)
 800500a:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
 800500e:	6193      	str	r3, [r2, #24]
 8005010:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <_pal_lld_init+0x90>)
 8005012:	699b      	ldr	r3, [r3, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8005014:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <_pal_lld_init+0x94>)
 8005016:	9b01      	ldr	r3, [sp, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60d3      	str	r3, [r2, #12]
  GPIOA->CRH = config->PAData.crh;
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <_pal_lld_init+0x94>)
 800501e:	9b01      	ldr	r3, [sp, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	6053      	str	r3, [r2, #4]
  GPIOA->CRL = config->PAData.crl;
 8005024:	4a1b      	ldr	r2, [pc, #108]	; (8005094 <_pal_lld_init+0x94>)
 8005026:	9b01      	ldr	r3, [sp, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	6013      	str	r3, [r2, #0]
  GPIOB->ODR = config->PBData.odr;
 800502c:	4a1a      	ldr	r2, [pc, #104]	; (8005098 <_pal_lld_init+0x98>)
 800502e:	9b01      	ldr	r3, [sp, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	60d3      	str	r3, [r2, #12]
  GPIOB->CRH = config->PBData.crh;
 8005034:	4a18      	ldr	r2, [pc, #96]	; (8005098 <_pal_lld_init+0x98>)
 8005036:	9b01      	ldr	r3, [sp, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	6053      	str	r3, [r2, #4]
  GPIOB->CRL = config->PBData.crl;
 800503c:	4a16      	ldr	r2, [pc, #88]	; (8005098 <_pal_lld_init+0x98>)
 800503e:	9b01      	ldr	r3, [sp, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	6013      	str	r3, [r2, #0]
  GPIOC->ODR = config->PCData.odr;
 8005044:	4a15      	ldr	r2, [pc, #84]	; (800509c <_pal_lld_init+0x9c>)
 8005046:	9b01      	ldr	r3, [sp, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	60d3      	str	r3, [r2, #12]
  GPIOC->CRH = config->PCData.crh;
 800504c:	4a13      	ldr	r2, [pc, #76]	; (800509c <_pal_lld_init+0x9c>)
 800504e:	9b01      	ldr	r3, [sp, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	6053      	str	r3, [r2, #4]
  GPIOC->CRL = config->PCData.crl;
 8005054:	4a11      	ldr	r2, [pc, #68]	; (800509c <_pal_lld_init+0x9c>)
 8005056:	9b01      	ldr	r3, [sp, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	6013      	str	r3, [r2, #0]
  GPIOD->ODR = config->PDData.odr;
 800505c:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <_pal_lld_init+0xa0>)
 800505e:	9b01      	ldr	r3, [sp, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	60d3      	str	r3, [r2, #12]
  GPIOD->CRH = config->PDData.crh;
 8005064:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <_pal_lld_init+0xa0>)
 8005066:	9b01      	ldr	r3, [sp, #4]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	6053      	str	r3, [r2, #4]
  GPIOD->CRL = config->PDData.crl;
 800506c:	4a0c      	ldr	r2, [pc, #48]	; (80050a0 <_pal_lld_init+0xa0>)
 800506e:	9b01      	ldr	r3, [sp, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	6013      	str	r3, [r2, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8005074:	4a0b      	ldr	r2, [pc, #44]	; (80050a4 <_pal_lld_init+0xa4>)
 8005076:	9b01      	ldr	r3, [sp, #4]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	60d3      	str	r3, [r2, #12]
  GPIOE->CRH = config->PEData.crh;
 800507c:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <_pal_lld_init+0xa4>)
 800507e:	9b01      	ldr	r3, [sp, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	6053      	str	r3, [r2, #4]
  GPIOE->CRL = config->PEData.crl;
 8005084:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <_pal_lld_init+0xa4>)
 8005086:	9b01      	ldr	r3, [sp, #4]
 8005088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508a:	6013      	str	r3, [r2, #0]
  GPIOG->CRH = config->PGData.crh;
  GPIOG->CRL = config->PGData.crl;
#endif
#endif
#endif
}
 800508c:	b002      	add	sp, #8
 800508e:	4770      	bx	lr
 8005090:	40021000 	.word	0x40021000
 8005094:	40010800 	.word	0x40010800
 8005098:	40010c00 	.word	0x40010c00
 800509c:	40011000 	.word	0x40011000
 80050a0:	40011400 	.word	0x40011400
 80050a4:	40011800 	.word	0x40011800
	...

080050b0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80050b0:	b08a      	sub	sp, #40	; 0x28
 80050b2:	9003      	str	r0, [sp, #12]
 80050b4:	9102      	str	r1, [sp, #8]
 80050b6:	9201      	str	r2, [sp, #4]
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 80050b8:	9b01      	ldr	r3, [sp, #4]
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d103      	bne.n	80050c6 <_pal_lld_setgroupmode+0x16>
    port->BSRR = mask;
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	9a02      	ldr	r2, [sp, #8]
 80050c2:	611a      	str	r2, [r3, #16]
 80050c4:	e005      	b.n	80050d2 <_pal_lld_setgroupmode+0x22>
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 80050c6:	9b01      	ldr	r3, [sp, #4]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d102      	bne.n	80050d2 <_pal_lld_setgroupmode+0x22>
    port->BRR = mask;
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	9a02      	ldr	r2, [sp, #8]
 80050d0:	615a      	str	r2, [r3, #20]
  cfg = cfgtab[mode];
 80050d2:	4a29      	ldr	r2, [pc, #164]	; (8005178 <_pal_lld_setgroupmode+0xc8>)
 80050d4:	9b01      	ldr	r3, [sp, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	9304      	str	r3, [sp, #16]
  mh = ml = crh = crl = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	9306      	str	r3, [sp, #24]
 80050e0:	9b06      	ldr	r3, [sp, #24]
 80050e2:	9307      	str	r3, [sp, #28]
 80050e4:	9b07      	ldr	r3, [sp, #28]
 80050e6:	9308      	str	r3, [sp, #32]
 80050e8:	9b08      	ldr	r3, [sp, #32]
 80050ea:	9309      	str	r3, [sp, #36]	; 0x24
  for (i = 0; i < 8; i++) {
 80050ec:	2300      	movs	r3, #0
 80050ee:	9305      	str	r3, [sp, #20]
 80050f0:	e02d      	b.n	800514e <_pal_lld_setgroupmode+0x9e>
    ml <<= 4;
 80050f2:	9b08      	ldr	r3, [sp, #32]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	9308      	str	r3, [sp, #32]
    mh <<= 4;
 80050f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	9309      	str	r3, [sp, #36]	; 0x24
    crl <<= 4;
 80050fe:	9b06      	ldr	r3, [sp, #24]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	9306      	str	r3, [sp, #24]
    crh <<= 4;
 8005104:	9b07      	ldr	r3, [sp, #28]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	9307      	str	r3, [sp, #28]
    if ((mask & 0x0080) == 0)
 800510a:	9b02      	ldr	r3, [sp, #8]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <_pal_lld_setgroupmode+0x6e>
      ml |= 0xf;
 8005114:	9b08      	ldr	r3, [sp, #32]
 8005116:	f043 030f 	orr.w	r3, r3, #15
 800511a:	9308      	str	r3, [sp, #32]
 800511c:	e003      	b.n	8005126 <_pal_lld_setgroupmode+0x76>
    else
      crl |= cfg;
 800511e:	9a06      	ldr	r2, [sp, #24]
 8005120:	9b04      	ldr	r3, [sp, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	9306      	str	r3, [sp, #24]
    if ((mask & 0x8000) == 0)
 8005126:	9b02      	ldr	r3, [sp, #8]
 8005128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <_pal_lld_setgroupmode+0x8a>
      mh |= 0xf;
 8005130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005132:	f043 030f 	orr.w	r3, r3, #15
 8005136:	9309      	str	r3, [sp, #36]	; 0x24
 8005138:	e003      	b.n	8005142 <_pal_lld_setgroupmode+0x92>
    else
      crh |= cfg;
 800513a:	9a07      	ldr	r2, [sp, #28]
 800513c:	9b04      	ldr	r3, [sp, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	9307      	str	r3, [sp, #28]
    mask <<= 1;
 8005142:	9b02      	ldr	r3, [sp, #8]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	9302      	str	r3, [sp, #8]
  for (i = 0; i < 8; i++) {
 8005148:	9b05      	ldr	r3, [sp, #20]
 800514a:	3301      	adds	r3, #1
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	9b05      	ldr	r3, [sp, #20]
 8005150:	2b07      	cmp	r3, #7
 8005152:	d9ce      	bls.n	80050f2 <_pal_lld_setgroupmode+0x42>
  }
  port->CRH = (port->CRH & mh) | crh;
 8005154:	9b03      	ldr	r3, [sp, #12]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515a:	401a      	ands	r2, r3
 800515c:	9b07      	ldr	r3, [sp, #28]
 800515e:	431a      	orrs	r2, r3
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	605a      	str	r2, [r3, #4]
  port->CRL = (port->CRL & ml) | crl;
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	9b08      	ldr	r3, [sp, #32]
 800516a:	401a      	ands	r2, r3
 800516c:	9b06      	ldr	r3, [sp, #24]
 800516e:	431a      	orrs	r2, r3
 8005170:	9b03      	ldr	r3, [sp, #12]
 8005172:	601a      	str	r2, [r3, #0]
}
 8005174:	b00a      	add	sp, #40	; 0x28
 8005176:	4770      	bx	lr
 8005178:	0800a8dc 	.word	0x0800a8dc
 800517c:	00000000 	.word	0x00000000

08005180 <chTimeAddX>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 8005180:	b500      	push	{lr}
 8005182:	b083      	sub	sp, #12
 8005184:	4603      	mov	r3, r0
 8005186:	9100      	str	r1, [sp, #0]
 8005188:	f8ad 3006 	strh.w	r3, [sp, #6]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 800518c:	9b00      	ldr	r3, [sp, #0]
 800518e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005192:	4293      	cmp	r3, r2
 8005194:	bf8c      	ite	hi
 8005196:	2301      	movhi	r3, #1
 8005198:	2300      	movls	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <chTimeAddX+0x26>
 80051a0:	4806      	ldr	r0, [pc, #24]	; (80051bc <chTimeAddX+0x3c>)
 80051a2:	f002 f905 	bl	80073b0 <chSysHalt>
#endif

  return systime + (systime_t)interval;
 80051a6:	9b00      	ldr	r3, [sp, #0]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80051ae:	4413      	add	r3, r2
 80051b0:	b29b      	uxth	r3, r3
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	b003      	add	sp, #12
 80051b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80051ba:	bf00      	nop
 80051bc:	0800a910 	.word	0x0800a910

080051c0 <chTimeIsInRangeX.lto_priv.0>:
 *
 * @xclass
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {
 80051c0:	b082      	sub	sp, #8
 80051c2:	4603      	mov	r3, r0
 80051c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80051c8:	460b      	mov	r3, r1
 80051ca:	f8ad 3004 	strh.w	r3, [sp, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	f8ad 3002 	strh.w	r3, [sp, #2]

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80051d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80051d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	b29a      	uxth	r2, r3
                (systime_t)((systime_t)end - (systime_t)start));
 80051e0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80051e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80051e8:	1acb      	subs	r3, r1, r3
 80051ea:	b29b      	uxth	r3, r3
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80051ec:	429a      	cmp	r2, r3
 80051ee:	bf34      	ite	cc
 80051f0:	2301      	movcc	r3, #1
 80051f2:	2300      	movcs	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	b002      	add	sp, #8
 80051fa:	4770      	bx	lr
 80051fc:	0000      	movs	r0, r0
	...

08005200 <chSysLock.lto_priv.8>:
static inline void chSysLock(void) {
 8005200:	b500      	push	{lr}
 8005202:	b083      	sub	sp, #12
 8005204:	2330      	movs	r3, #48	; 0x30
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	9b01      	ldr	r3, [sp, #4]
 800520a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 800520e:	f002 f8e7 	bl	80073e0 <__dbg_check_lock>
}
 8005212:	b003      	add	sp, #12
 8005214:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005220 <chSysUnlock.lto_priv.8>:
static inline void chSysUnlock(void) {
 8005220:	b500      	push	{lr}
 8005222:	b083      	sub	sp, #12
  __dbg_check_unlock();
 8005224:	f002 f904 	bl	8007430 <__dbg_check_unlock>
 8005228:	2300      	movs	r3, #0
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	9b01      	ldr	r3, [sp, #4]
 800522e:	f383 8811 	msr	BASEPRI, r3
}
 8005232:	b003      	add	sp, #12
 8005234:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005240 <chSysLockFromISR.lto_priv.2>:
static inline void chSysLockFromISR(void) {
 8005240:	b500      	push	{lr}
 8005242:	b083      	sub	sp, #12
 8005244:	2330      	movs	r3, #48	; 0x30
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	9b01      	ldr	r3, [sp, #4]
 800524a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock_from_isr();
 800524e:	f002 f917 	bl	8007480 <__dbg_check_lock_from_isr>
}
 8005252:	b003      	add	sp, #12
 8005254:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005260 <chSysUnlockFromISR.lto_priv.2>:
static inline void chSysUnlockFromISR(void) {
 8005260:	b500      	push	{lr}
 8005262:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
 8005264:	f002 f934 	bl	80074d0 <__dbg_check_unlock_from_isr>
 8005268:	2300      	movs	r3, #0
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	9b01      	ldr	r3, [sp, #4]
 800526e:	f383 8811 	msr	BASEPRI, r3
}
 8005272:	b003      	add	sp, #12
 8005274:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005280 <chVTGetSystemTimeX.lto_priv.0>:
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
 8005280:	4b02      	ldr	r3, [pc, #8]	; (800528c <chVTGetSystemTimeX.lto_priv.0+0xc>)
 8005282:	8b9b      	ldrh	r3, [r3, #28]
 8005284:	b29b      	uxth	r3, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005286:	4618      	mov	r0, r3
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000fa0 	.word	0x20000fa0

08005290 <osalSysHalt>:
static inline void osalSysHalt(const char *reason) {
 8005290:	b500      	push	{lr}
 8005292:	b083      	sub	sp, #12
 8005294:	9001      	str	r0, [sp, #4]
  chSysHalt(reason);
 8005296:	9801      	ldr	r0, [sp, #4]
 8005298:	f002 f88a 	bl	80073b0 <chSysHalt>
}
 800529c:	b003      	add	sp, #12
 800529e:	f85d fb04 	ldr.w	pc, [sp], #4
 80052a2:	bf00      	nop
	...

080052b0 <osalSysLock.lto_priv.8>:
static inline void osalSysLock(void) {
 80052b0:	b508      	push	{r3, lr}
  chSysLock();
 80052b2:	f7ff ffa5 	bl	8005200 <chSysLock.lto_priv.8>
}
 80052b6:	bd08      	pop	{r3, pc}
	...

080052c0 <osalSysUnlock.lto_priv.8>:
static inline void osalSysUnlock(void) {
 80052c0:	b508      	push	{r3, lr}
  chSysUnlock();
 80052c2:	f7ff ffad 	bl	8005220 <chSysUnlock.lto_priv.8>
}
 80052c6:	bd08      	pop	{r3, pc}
	...

080052d0 <osalSysLockFromISR.lto_priv.2>:
static inline void osalSysLockFromISR(void) {
 80052d0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 80052d2:	f7ff ffb5 	bl	8005240 <chSysLockFromISR.lto_priv.2>
}
 80052d6:	bd08      	pop	{r3, pc}
	...

080052e0 <osalSysUnlockFromISR.lto_priv.2>:
static inline void osalSysUnlockFromISR(void) {
 80052e0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 80052e2:	f7ff ffbd 	bl	8005260 <chSysUnlockFromISR.lto_priv.2>
}
 80052e6:	bd08      	pop	{r3, pc}
	...

080052f0 <osalOsGetSystemTimeX>:
static inline systime_t osalOsGetSystemTimeX(void) {
 80052f0:	b508      	push	{r3, lr}
  return chVTGetSystemTimeX();
 80052f2:	f7ff ffc5 	bl	8005280 <chVTGetSystemTimeX.lto_priv.0>
 80052f6:	4603      	mov	r3, r0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	bd08      	pop	{r3, pc}
 80052fc:	0000      	movs	r0, r0
	...

08005300 <osalTimeAddX>:
                                     sysinterval_t interval) {
 8005300:	b500      	push	{lr}
 8005302:	b083      	sub	sp, #12
 8005304:	4603      	mov	r3, r0
 8005306:	9100      	str	r1, [sp, #0]
 8005308:	f8ad 3006 	strh.w	r3, [sp, #6]
  return chTimeAddX(systime, interval);
 800530c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005310:	9900      	ldr	r1, [sp, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff ff34 	bl	8005180 <chTimeAddX>
 8005318:	4603      	mov	r3, r0
}
 800531a:	4618      	mov	r0, r3
 800531c:	b003      	add	sp, #12
 800531e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005322:	bf00      	nop
	...

08005330 <osalTimeIsInRangeX>:
                                      systime_t end) {
 8005330:	b500      	push	{lr}
 8005332:	b083      	sub	sp, #12
 8005334:	4603      	mov	r3, r0
 8005336:	f8ad 3006 	strh.w	r3, [sp, #6]
 800533a:	460b      	mov	r3, r1
 800533c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	f8ad 3002 	strh.w	r3, [sp, #2]
  return chTimeIsInRangeX(time, start, end);
 8005346:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800534a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800534e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff ff34 	bl	80051c0 <chTimeIsInRangeX.lto_priv.0>
 8005358:	4603      	mov	r3, r0
}
 800535a:	4618      	mov	r0, r3
 800535c:	b003      	add	sp, #12
 800535e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005362:	bf00      	nop
	...

08005370 <osalThreadSuspendTimeoutS>:
                                              sysinterval_t timeout) {
 8005370:	b500      	push	{lr}
 8005372:	b083      	sub	sp, #12
 8005374:	9001      	str	r0, [sp, #4]
 8005376:	9100      	str	r1, [sp, #0]
  return chThdSuspendTimeoutS(trp, timeout);
 8005378:	9900      	ldr	r1, [sp, #0]
 800537a:	9801      	ldr	r0, [sp, #4]
 800537c:	f003 f920 	bl	80085c0 <chThdSuspendTimeoutS>
 8005380:	4603      	mov	r3, r0
}
 8005382:	4618      	mov	r0, r3
 8005384:	b003      	add	sp, #12
 8005386:	f85d fb04 	ldr.w	pc, [sp], #4
 800538a:	bf00      	nop
 800538c:	0000      	movs	r0, r0
	...

08005390 <osalThreadResumeI>:
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8005390:	b500      	push	{lr}
 8005392:	b083      	sub	sp, #12
 8005394:	9001      	str	r0, [sp, #4]
 8005396:	9100      	str	r1, [sp, #0]
  chThdResumeI(trp, msg);
 8005398:	9900      	ldr	r1, [sp, #0]
 800539a:	9801      	ldr	r0, [sp, #4]
 800539c:	f003 f938 	bl	8008610 <chThdResumeI>
}
 80053a0:	b003      	add	sp, #12
 80053a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80053a6:	bf00      	nop
	...

080053b0 <i2c_lld_abort_operation>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_abort_operation(I2CDriver *i2cp) {
 80053b0:	b084      	sub	sp, #16
 80053b2:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 80053b4:	9b01      	ldr	r3, [sp, #4]
 80053b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b8:	9303      	str	r3, [sp, #12]

  /* Stops the I2C peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053c0:	601a      	str	r2, [r3, #0]
  dp->CR1 = 0;
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
  dp->CR2 = 0;
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
  dp->SR1 = 0;
 80053ce:	9b03      	ldr	r3, [sp, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	615a      	str	r2, [r3, #20]

  /* Stops the associated DMA streams.*/
  dmaStreamDisable(i2cp->dmatx);
 80053d4:	9b01      	ldr	r3, [sp, #4]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	9b01      	ldr	r3, [sp, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f022 020f 	bic.w	r2, r2, #15
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	9b01      	ldr	r3, [sp, #4]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	7b5b      	ldrb	r3, [r3, #13]
 80053ee:	461a      	mov	r2, r3
 80053f0:	230e      	movs	r3, #14
 80053f2:	fa03 f202 	lsl.w	r2, r3, r2
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	605a      	str	r2, [r3, #4]
  dmaStreamDisable(i2cp->dmarx);
 80053fe:	9b01      	ldr	r3, [sp, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	9b01      	ldr	r3, [sp, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f022 020f 	bic.w	r2, r2, #15
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	9b01      	ldr	r3, [sp, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	7b5b      	ldrb	r3, [r3, #13]
 8005418:	461a      	mov	r2, r3
 800541a:	230e      	movs	r3, #14
 800541c:	fa03 f202 	lsl.w	r2, r3, r2
 8005420:	9b01      	ldr	r3, [sp, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	605a      	str	r2, [r3, #4]
}
 8005428:	b004      	add	sp, #16
 800542a:	4770      	bx	lr
 800542c:	0000      	movs	r0, r0
	...

08005430 <i2c_lld_set_clock>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
 8005430:	b500      	push	{lr}
 8005432:	b087      	sub	sp, #28
 8005434:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8005436:	9b01      	ldr	r3, [sp, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	9304      	str	r3, [sp, #16]
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 800543c:	9b01      	ldr	r3, [sp, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	9303      	str	r3, [sp, #12]
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8005444:	9b01      	ldr	r3, [sp, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	7a1b      	ldrb	r3, [r3, #8]
 800544a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalDbgCheck((i2cp != NULL) &&
 800544e:	9b01      	ldr	r3, [sp, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d107      	bne.n	800546e <i2c_lld_set_clock+0x3e>
 800545e:	9b03      	ldr	r3, [sp, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfd4      	ite	le
 8005464:	2301      	movle	r3, #1
 8005466:	2300      	movgt	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <i2c_lld_set_clock+0x42>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <i2c_lld_set_clock+0x44>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d108      	bne.n	800548a <i2c_lld_set_clock+0x5a>
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	4a3c      	ldr	r2, [pc, #240]	; (800556c <i2c_lld_set_clock+0x13c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	bfcc      	ite	gt
 8005480:	2301      	movgt	r3, #1
 8005482:	2300      	movle	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <i2c_lld_set_clock+0x60>
 800548a:	4839      	ldr	r0, [pc, #228]	; (8005570 <i2c_lld_set_clock+0x140>)
 800548c:	f001 ff90 	bl	80073b0 <chSysHalt>
               (clock_speed > 0) &&
               (clock_speed <= 400000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8005490:	9b04      	ldr	r3, [sp, #16]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8005498:	4013      	ands	r3, r2
 800549a:	9a04      	ldr	r2, [sp, #16]
 800549c:	6053      	str	r3, [r2, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f043 0218 	orr.w	r2, r3, #24
 80054a6:	9b04      	ldr	r3, [sp, #16]
 80054a8:	605a      	str	r2, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f8ad 3014 	strh.w	r3, [sp, #20]
  clock_div = I2C_CCR_CCR;
 80054b0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80054b4:	f8ad 3016 	strh.w	r3, [sp, #22]

  if (clock_speed <= 100000) {
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	4a2e      	ldr	r2, [pc, #184]	; (8005574 <i2c_lld_set_clock+0x144>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	dc14      	bgt.n	80054ea <i2c_lld_set_clock+0xba>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80054c0:	9b03      	ldr	r3, [sp, #12]
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4a2c      	ldr	r2, [pc, #176]	; (8005578 <i2c_lld_set_clock+0x148>)
 80054c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80054ca:	f8ad 3016 	strh.w	r3, [sp, #22]

    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);
 80054ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80054d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8ad 3014 	strh.w	r3, [sp, #20]

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 80054e2:	9b04      	ldr	r3, [sp, #16]
 80054e4:	2219      	movs	r2, #25
 80054e6:	621a      	str	r2, [r3, #32]
 80054e8:	e038      	b.n	800555c <i2c_lld_set_clock+0x12c>
  }
  else if (clock_speed <= 400000) {
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	4a1f      	ldr	r2, [pc, #124]	; (800556c <i2c_lld_set_clock+0x13c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	dc34      	bgt.n	800555c <i2c_lld_set_clock+0x12c>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 80054f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d109      	bne.n	800550e <i2c_lld_set_clock+0xde>
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 80054fa:	9a03      	ldr	r2, [sp, #12]
 80054fc:	4613      	mov	r3, r2
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	4413      	add	r3, r2
 8005502:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <i2c_lld_set_clock+0x148>)
 8005504:	fb92 f3f3 	sdiv	r3, r2, r3
 8005508:	f8ad 3016 	strh.w	r3, [sp, #22]
 800550c:	e014      	b.n	8005538 <i2c_lld_set_clock+0x108>
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 800550e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005512:	2b03      	cmp	r3, #3
 8005514:	d110      	bne.n	8005538 <i2c_lld_set_clock+0x108>
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8005516:	9a03      	ldr	r2, [sp, #12]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009a      	lsls	r2, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <i2c_lld_set_clock+0x148>)
 8005524:	fb92 f3f3 	sdiv	r3, r2, r3
 8005528:	f8ad 3016 	strh.w	r3, [sp, #22]
      regCCR |= I2C_CCR_DUTY;
 800552c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8005530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005534:	f8ad 3014 	strh.w	r3, [sp, #20]
    }

    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8005538:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800553c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005540:	b29a      	uxth	r2, r3
 8005542:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	b29b      	uxth	r3, r3
 800554a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005552:	f8ad 3014 	strh.w	r3, [sp, #20]

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8005556:	9b04      	ldr	r3, [sp, #16]
 8005558:	2208      	movs	r2, #8
 800555a:	621a      	str	r2, [r3, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 800555c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005560:	9b04      	ldr	r3, [sp, #16]
 8005562:	61da      	str	r2, [r3, #28]
}
 8005564:	b007      	add	sp, #28
 8005566:	f85d fb04 	ldr.w	pc, [sp], #4
 800556a:	bf00      	nop
 800556c:	00061a80 	.word	0x00061a80
 8005570:	0800a8fc 	.word	0x0800a8fc
 8005574:	000186a0 	.word	0x000186a0
 8005578:	016e3600 	.word	0x016e3600
 800557c:	00000000 	.word	0x00000000

08005580 <i2c_lld_set_opmode>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
 8005580:	b086      	sub	sp, #24
 8005582:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005588:	9304      	str	r3, [sp, #16]
  i2copmode_t opmode = i2cp->config->op_mode;
 800558a:	9b01      	ldr	r3, [sp, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f88d 300f 	strb.w	r3, [sp, #15]
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8005594:	9b04      	ldr	r3, [sp, #16]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8ad 3016 	strh.w	r3, [sp, #22]
  switch (opmode) {
 800559c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d01a      	beq.n	80055da <i2c_lld_set_opmode+0x5a>
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	dc1e      	bgt.n	80055e6 <i2c_lld_set_opmode+0x66>
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d002      	beq.n	80055b2 <i2c_lld_set_opmode+0x32>
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d007      	beq.n	80055c0 <i2c_lld_set_opmode+0x40>
 80055b0:	e019      	b.n	80055e6 <i2c_lld_set_opmode+0x66>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80055b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80055b6:	f023 030a 	bic.w	r3, r3, #10
 80055ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055be:	e012      	b.n	80055e6 <i2c_lld_set_opmode+0x66>
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
 80055c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80055c4:	f043 0302 	orr.w	r3, r3, #2
 80055c8:	f8ad 3016 	strh.w	r3, [sp, #22]
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 80055cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80055d0:	f023 0308 	bic.w	r3, r3, #8
 80055d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055d8:	e005      	b.n	80055e6 <i2c_lld_set_opmode+0x66>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80055da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80055de:	f043 030a 	orr.w	r3, r3, #10
 80055e2:	f8ad 3016 	strh.w	r3, [sp, #22]
    break;
  }
  dp->CR1 = regCR1;
 80055e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80055ea:	9b04      	ldr	r3, [sp, #16]
 80055ec:	601a      	str	r2, [r3, #0]
}
 80055ee:	b006      	add	sp, #24
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
	...

08005600 <i2c_lld_serve_event_interrupt>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
 8005600:	b500      	push	{lr}
 8005602:	b087      	sub	sp, #28
 8005604:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8005606:	9b01      	ldr	r3, [sp, #4]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	9305      	str	r3, [sp, #20]
  uint32_t regSR2 = dp->SR2;
 800560c:	9b05      	ldr	r3, [sp, #20]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	9304      	str	r3, [sp, #16]
  uint32_t event = dp->SR1;
 8005612:	9b05      	ldr	r3, [sp, #20]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	9303      	str	r3, [sp, #12]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8005618:	9b04      	ldr	r3, [sp, #16]
 800561a:	041a      	lsls	r2, r3, #16
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005624:	4a74      	ldr	r2, [pc, #464]	; (80057f8 <i2c_lld_serve_event_interrupt+0x1f8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	f000 80a3 	beq.w	8005772 <i2c_lld_serve_event_interrupt+0x172>
 800562c:	4a72      	ldr	r2, [pc, #456]	; (80057f8 <i2c_lld_serve_event_interrupt+0x1f8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	f200 80d7 	bhi.w	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
 8005634:	4a71      	ldr	r2, [pc, #452]	; (80057fc <i2c_lld_serve_event_interrupt+0x1fc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	f000 808a 	beq.w	8005750 <i2c_lld_serve_event_interrupt+0x150>
 800563c:	4a6f      	ldr	r2, [pc, #444]	; (80057fc <i2c_lld_serve_event_interrupt+0x1fc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	f200 80cf 	bhi.w	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
 8005644:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005648:	d036      	beq.n	80056b8 <i2c_lld_serve_event_interrupt+0xb8>
 800564a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800564e:	f0c0 80c8 	bcc.w	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
 8005652:	4a6b      	ldr	r2, [pc, #428]	; (8005800 <i2c_lld_serve_event_interrupt+0x200>)
 8005654:	4293      	cmp	r3, r2
 8005656:	f200 80c4 	bhi.w	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
 800565a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800565e:	f240 80c0 	bls.w	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
 8005662:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005666:	3b01      	subs	r3, #1
 8005668:	2b10      	cmp	r3, #16
 800566a:	f200 80ba 	bhi.w	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
 800566e:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <i2c_lld_serve_event_interrupt+0x74>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	080056b9 	.word	0x080056b9
 8005678:	0800570b 	.word	0x0800570b
 800567c:	080057e3 	.word	0x080057e3
 8005680:	080057e3 	.word	0x080057e3
 8005684:	080057e3 	.word	0x080057e3
 8005688:	080057e3 	.word	0x080057e3
 800568c:	080057e3 	.word	0x080057e3
 8005690:	080056fb 	.word	0x080056fb
 8005694:	080057e3 	.word	0x080057e3
 8005698:	080057e3 	.word	0x080057e3
 800569c:	080057e3 	.word	0x080057e3
 80056a0:	080057e3 	.word	0x080057e3
 80056a4:	080057e3 	.word	0x080057e3
 80056a8:	080057e3 	.word	0x080057e3
 80056ac:	080057e3 	.word	0x080057e3
 80056b0:	080057e3 	.word	0x080057e3
 80056b4:	080057cd 	.word	0x080057cd
  case I2C_EV5_MASTER_MODE_SELECT:
  case I2C_EV5_MASTER_MODE_SELECT_NO_BUSY:
    if ((i2cp->addr >> 8) > 0) {
 80056b8:	9b01      	ldr	r3, [sp, #4]
 80056ba:	8c1b      	ldrh	r3, [r3, #32]
 80056bc:	0a1b      	lsrs	r3, r3, #8
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d014      	beq.n	80056ee <i2c_lld_serve_event_interrupt+0xee>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	8c1b      	ldrh	r3, [r3, #32]
 80056c8:	0a1b      	lsrs	r3, r3, #8
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f003 0306 	and.w	r3, r3, #6
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	8c1b      	ldrh	r3, [r3, #32]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	b29b      	uxth	r3, r3
 80056dc:	4313      	orrs	r3, r2
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	9b05      	ldr	r3, [sp, #20]
 80056ea:	611a      	str	r2, [r3, #16]
    } else {
      dp->DR = i2cp->addr;
 80056ec:	e079      	b.n	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
 80056ee:	9b01      	ldr	r3, [sp, #4]
 80056f0:	8c1b      	ldrh	r3, [r3, #32]
 80056f2:	461a      	mov	r2, r3
 80056f4:	9b05      	ldr	r3, [sp, #20]
 80056f6:	611a      	str	r2, [r3, #16]
 80056f8:	e073      	b.n	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80056fa:	9b01      	ldr	r3, [sp, #4]
 80056fc:	8c1b      	ldrh	r3, [r3, #32]
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	b29b      	uxth	r3, r3
 8005702:	b2da      	uxtb	r2, r3
 8005704:	9b05      	ldr	r3, [sp, #20]
 8005706:	611a      	str	r2, [r3, #16]
 8005708:	e06b      	b.n	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800570a:	9b05      	ldr	r3, [sp, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005712:	9b05      	ldr	r3, [sp, #20]
 8005714:	605a      	str	r2, [r3, #4]
    dmaStreamEnable(i2cp->dmarx);
 8005716:	9b01      	ldr	r3, [sp, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	9b01      	ldr	r3, [sp, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800572a:	9b05      	ldr	r3, [sp, #20]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005732:	9b05      	ldr	r3, [sp, #20]
 8005734:	605a      	str	r2, [r3, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8005736:	9b01      	ldr	r3, [sp, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d84e      	bhi.n	80057e0 <i2c_lld_serve_event_interrupt+0x1e0>
      dp->CR1 &= ~I2C_CR1_ACK;
 8005742:	9b05      	ldr	r3, [sp, #20]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800574a:	9b05      	ldr	r3, [sp, #20]
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	e048      	b.n	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005750:	9b05      	ldr	r3, [sp, #20]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005758:	9b05      	ldr	r3, [sp, #20]
 800575a:	605a      	str	r2, [r3, #4]
    dmaStreamEnable(i2cp->dmatx);
 800575c:	9b01      	ldr	r3, [sp, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	9b01      	ldr	r3, [sp, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e037      	b.n	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    (void)dp->DR; /* Clear BTF.*/
 8005772:	9b05      	ldr	r3, [sp, #20]
 8005774:	691b      	ldr	r3, [r3, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8005776:	9b01      	ldr	r3, [sp, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00d      	beq.n	800579e <i2c_lld_serve_event_interrupt+0x19e>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8005782:	9b01      	ldr	r3, [sp, #4]
 8005784:	8c1b      	ldrh	r3, [r3, #32]
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	9b01      	ldr	r3, [sp, #4]
 800578e:	841a      	strh	r2, [r3, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8005790:	9b05      	ldr	r3, [sp, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8005798:	9b05      	ldr	r3, [sp, #20]
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e028      	b.n	80057f0 <i2c_lld_serve_event_interrupt+0x1f0>
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800579e:	9b05      	ldr	r3, [sp, #20]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057a6:	9b05      	ldr	r3, [sp, #20]
 80057a8:	605a      	str	r2, [r3, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80057aa:	9b05      	ldr	r3, [sp, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057b2:	9b05      	ldr	r3, [sp, #20]
 80057b4:	601a      	str	r2, [r3, #0]
    _i2c_wakeup_isr(i2cp);
 80057b6:	f7ff fd8b 	bl	80052d0 <osalSysLockFromISR.lto_priv.2>
 80057ba:	9b01      	ldr	r3, [sp, #4]
 80057bc:	331c      	adds	r3, #28
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff fde5 	bl	8005390 <osalThreadResumeI>
 80057c6:	f7ff fd8b 	bl	80052e0 <osalSysUnlockFromISR.lto_priv.2>
 80057ca:	e00a      	b.n	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
    break;
  case I2C_EV5_MASTER_MODE_INVALID:
    i2c_lld_abort_operation(i2cp);
 80057cc:	9801      	ldr	r0, [sp, #4]
 80057ce:	f7ff fdef 	bl	80053b0 <i2c_lld_abort_operation>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80057d2:	9b05      	ldr	r3, [sp, #20]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057da:	9b05      	ldr	r3, [sp, #20]
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	e000      	b.n	80057e2 <i2c_lld_serve_event_interrupt+0x1e2>
      dp->CR1 &= ~I2C_CR1_ACK;
 80057e0:	bf00      	nop
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	f003 030a 	and.w	r3, r3, #10
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <i2c_lld_serve_event_interrupt+0x1f0>
    (void)dp->SR2;
 80057ec:	9b05      	ldr	r3, [sp, #20]
 80057ee:	699b      	ldr	r3, [r3, #24]
  /* Errata 2.4.6 for STM32F40x, Spurious Bus Error detection in Master mode.*/
  if (event & I2C_SR1_BERR) {
    dp->SR1 &= ~I2C_SR1_BERR;
  }
#endif
}
 80057f0:	b007      	add	sp, #28
 80057f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80057f6:	bf00      	nop
 80057f8:	00070084 	.word	0x00070084
 80057fc:	00070082 	.word	0x00070082
 8005800:	00030011 	.word	0x00030011
	...

08005810 <i2c_lld_serve_rx_end_irq>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8005810:	b500      	push	{lr}
 8005812:	b085      	sub	sp, #20
 8005814:	9001      	str	r0, [sp, #4]
 8005816:	9100      	str	r1, [sp, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 8005818:	9b01      	ldr	r3, [sp, #4]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	9303      	str	r3, [sp, #12]

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800581e:	9b00      	ldr	r3, [sp, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <i2c_lld_serve_rx_end_irq+0x1e>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 8005828:	481b      	ldr	r0, [pc, #108]	; (8005898 <i2c_lld_serve_rx_end_irq+0x88>)
 800582a:	f7ff fd31 	bl	8005290 <osalSysHalt>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	9b01      	ldr	r3, [sp, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f022 020f 	bic.w	r2, r2, #15
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	9b01      	ldr	r3, [sp, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	7b5b      	ldrb	r3, [r3, #13]
 8005848:	461a      	mov	r2, r3
 800584a:	230e      	movs	r3, #14
 800584c:	fa03 f202 	lsl.w	r2, r3, r2
 8005850:	9b01      	ldr	r3, [sp, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	605a      	str	r2, [r3, #4]

  dp->CR2 &= ~I2C_CR2_LAST;
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005860:	9b03      	ldr	r3, [sp, #12]
 8005862:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005878:	9b03      	ldr	r3, [sp, #12]
 800587a:	601a      	str	r2, [r3, #0]
  _i2c_wakeup_isr(i2cp);
 800587c:	f7ff fd28 	bl	80052d0 <osalSysLockFromISR.lto_priv.2>
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	331c      	adds	r3, #28
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fd82 	bl	8005390 <osalThreadResumeI>
 800588c:	f7ff fd28 	bl	80052e0 <osalSysUnlockFromISR.lto_priv.2>
}
 8005890:	b005      	add	sp, #20
 8005892:	f85d fb04 	ldr.w	pc, [sp], #4
 8005896:	bf00      	nop
 8005898:	0800a8f0 	.word	0x0800a8f0
 800589c:	00000000 	.word	0x00000000

080058a0 <i2c_lld_serve_tx_end_irq>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 80058a0:	b500      	push	{lr}
 80058a2:	b085      	sub	sp, #20
 80058a4:	9001      	str	r0, [sp, #4]
 80058a6:	9100      	str	r1, [sp, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ac:	9303      	str	r3, [sp, #12]

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <i2c_lld_serve_tx_end_irq+0x1e>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 80058b8:	4810      	ldr	r0, [pc, #64]	; (80058fc <i2c_lld_serve_tx_end_irq+0x5c>)
 80058ba:	f7ff fce9 	bl	8005290 <osalSysHalt>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 80058be:	9b01      	ldr	r3, [sp, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f022 020f 	bic.w	r2, r2, #15
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	9b01      	ldr	r3, [sp, #4]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	7b5b      	ldrb	r3, [r3, #13]
 80058d8:	461a      	mov	r2, r3
 80058da:	230e      	movs	r3, #14
 80058dc:	fa03 f202 	lsl.w	r2, r3, r2
 80058e0:	9b01      	ldr	r3, [sp, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	605a      	str	r2, [r3, #4]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80058e8:	9b03      	ldr	r3, [sp, #12]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	605a      	str	r2, [r3, #4]
}
 80058f4:	b005      	add	sp, #20
 80058f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80058fa:	bf00      	nop
 80058fc:	0800a8f0 	.word	0x0800a8f0

08005900 <i2c_lld_serve_error_interrupt>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in]  sr       content of the SR1 register to be decoded
 *
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {
 8005900:	b500      	push	{lr}
 8005902:	b083      	sub	sp, #12
 8005904:	9001      	str	r0, [sp, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	f8ad 3002 	strh.w	r3, [sp, #2]

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800590c:	9b01      	ldr	r3, [sp, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	9b01      	ldr	r3, [sp, #4]
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f022 020f 	bic.w	r2, r2, #15
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	7b5b      	ldrb	r3, [r3, #13]
 8005926:	461a      	mov	r2, r3
 8005928:	230e      	movs	r3, #14
 800592a:	fa03 f202 	lsl.w	r2, r3, r2
 800592e:	9b01      	ldr	r3, [sp, #4]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
  dmaStreamDisable(i2cp->dmarx);
 8005936:	9b01      	ldr	r3, [sp, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	9b01      	ldr	r3, [sp, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f022 020f 	bic.w	r2, r2, #15
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	9b01      	ldr	r3, [sp, #4]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	7b5b      	ldrb	r3, [r3, #13]
 8005950:	461a      	mov	r2, r3
 8005952:	230e      	movs	r3, #14
 8005954:	fa03 f202 	lsl.w	r2, r3, r2
 8005958:	9b01      	ldr	r3, [sp, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]

  i2cp->errors = I2C_NO_ERROR;
 8005960:	9b01      	ldr	r3, [sp, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8005966:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <i2c_lld_serve_error_interrupt+0x7e>
    i2cp->errors |= I2C_BUS_ERROR;
 8005972:	9b01      	ldr	r3, [sp, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	9b01      	ldr	r3, [sp, #4]
 800597c:	609a      	str	r2, [r3, #8]
       Master mode.*/
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
#endif
  }

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800597e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <i2c_lld_serve_error_interrupt+0x96>
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800598a:	9b01      	ldr	r3, [sp, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f043 0202 	orr.w	r2, r3, #2
 8005992:	9b01      	ldr	r3, [sp, #4]
 8005994:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8005996:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800599a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d015      	beq.n	80059ce <i2c_lld_serve_error_interrupt+0xce>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	9b01      	ldr	r3, [sp, #4]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059b0:	605a      	str	r2, [r3, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80059b2:	9b01      	ldr	r3, [sp, #4]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	9b01      	ldr	r3, [sp, #4]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c0:	601a      	str	r2, [r3, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80059c2:	9b01      	ldr	r3, [sp, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f043 0204 	orr.w	r2, r3, #4
 80059ca:	9b01      	ldr	r3, [sp, #4]
 80059cc:	609a      	str	r2, [r3, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80059ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80059d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <i2c_lld_serve_error_interrupt+0xe6>
    i2cp->errors |= I2C_OVERRUN;
 80059da:	9b01      	ldr	r3, [sp, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f043 0208 	orr.w	r2, r3, #8
 80059e2:	9b01      	ldr	r3, [sp, #4]
 80059e4:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80059e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80059ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <i2c_lld_serve_error_interrupt+0xfe>
    i2cp->errors |= I2C_TIMEOUT;
 80059f2:	9b01      	ldr	r3, [sp, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80059fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <i2c_lld_serve_error_interrupt+0x116>
    i2cp->errors |= I2C_PEC_ERROR;
 8005a0a:	9b01      	ldr	r3, [sp, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f043 0210 	orr.w	r2, r3, #16
 8005a12:	9b01      	ldr	r3, [sp, #4]
 8005a14:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8005a16:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	da05      	bge.n	8005a2a <i2c_lld_serve_error_interrupt+0x12a>
    i2cp->errors |= I2C_SMB_ALERT;
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a26:	9b01      	ldr	r3, [sp, #4]
 8005a28:	609a      	str	r2, [r3, #8]

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 8005a2a:	9b01      	ldr	r3, [sp, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <i2c_lld_serve_error_interrupt+0x148>
    _i2c_wakeup_error_isr(i2cp);
 8005a32:	f7ff fc4d 	bl	80052d0 <osalSysLockFromISR.lto_priv.2>
 8005a36:	9b01      	ldr	r3, [sp, #4]
 8005a38:	331c      	adds	r3, #28
 8005a3a:	f06f 0101 	mvn.w	r1, #1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fca6 	bl	8005390 <osalThreadResumeI>
 8005a44:	f7ff fc4c 	bl	80052e0 <osalSysUnlockFromISR.lto_priv.2>
}
 8005a48:	b003      	add	sp, #12
 8005a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a4e:	bf00      	nop

08005a50 <VectorBC>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8005a50:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8005a52:	f001 fd65 	bl	8007520 <__dbg_check_enter_isr>

  i2c_lld_serve_event_interrupt(&I2CD1);
 8005a56:	4804      	ldr	r0, [pc, #16]	; (8005a68 <VectorBC+0x18>)
 8005a58:	f7ff fdd2 	bl	8005600 <i2c_lld_serve_event_interrupt>

  OSAL_IRQ_EPILOGUE();
 8005a5c:	f001 fd90 	bl	8007580 <__dbg_check_leave_isr>
 8005a60:	f003 fb1e 	bl	80090a0 <__port_irq_epilogue>
}
 8005a64:	bd08      	pop	{r3, pc}
 8005a66:	bf00      	nop
 8005a68:	20000da0 	.word	0x20000da0
 8005a6c:	00000000 	.word	0x00000000

08005a70 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8005a70:	b500      	push	{lr}
 8005a72:	b083      	sub	sp, #12
  uint16_t sr = I2CD1.i2c->SR1;
 8005a74:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <VectorC0+0x3c>)
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f8ad 3006 	strh.w	r3, [sp, #6]

  OSAL_IRQ_PROLOGUE();
 8005a7e:	f001 fd4f 	bl	8007520 <__dbg_check_enter_isr>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8005a82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005a86:	f403 435f 	and.w	r3, r3, #57088	; 0xdf00
 8005a8a:	43da      	mvns	r2, r3
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <VectorC0+0x3c>)
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	615a      	str	r2, [r3, #20]
  i2c_lld_serve_error_interrupt(&I2CD1, sr);
 8005a92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4804      	ldr	r0, [pc, #16]	; (8005aac <VectorC0+0x3c>)
 8005a9a:	f7ff ff31 	bl	8005900 <i2c_lld_serve_error_interrupt>

  OSAL_IRQ_EPILOGUE();
 8005a9e:	f001 fd6f 	bl	8007580 <__dbg_check_leave_isr>
 8005aa2:	f003 fafd 	bl	80090a0 <__port_irq_epilogue>
}
 8005aa6:	b003      	add	sp, #12
 8005aa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aac:	20000da0 	.word	0x20000da0

08005ab0 <VectorC4>:
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 8005ab0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8005ab2:	f001 fd35 	bl	8007520 <__dbg_check_enter_isr>

  i2c_lld_serve_event_interrupt(&I2CD2);
 8005ab6:	4804      	ldr	r0, [pc, #16]	; (8005ac8 <VectorC4+0x18>)
 8005ab8:	f7ff fda2 	bl	8005600 <i2c_lld_serve_event_interrupt>

  OSAL_IRQ_EPILOGUE();
 8005abc:	f001 fd60 	bl	8007580 <__dbg_check_leave_isr>
 8005ac0:	f003 faee 	bl	80090a0 <__port_irq_epilogue>
}
 8005ac4:	bd08      	pop	{r3, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000dd8 	.word	0x20000dd8
 8005acc:	00000000 	.word	0x00000000

08005ad0 <VectorC8>:
/**
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 8005ad0:	b500      	push	{lr}
 8005ad2:	b083      	sub	sp, #12
  uint16_t sr = I2CD2.i2c->SR1;
 8005ad4:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <VectorC8+0x3c>)
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f8ad 3006 	strh.w	r3, [sp, #6]

  OSAL_IRQ_PROLOGUE();
 8005ade:	f001 fd1f 	bl	8007520 <__dbg_check_enter_isr>

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8005ae2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005ae6:	f403 435f 	and.w	r3, r3, #57088	; 0xdf00
 8005aea:	43da      	mvns	r2, r3
 8005aec:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <VectorC8+0x3c>)
 8005aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af0:	615a      	str	r2, [r3, #20]
  i2c_lld_serve_error_interrupt(&I2CD2, sr);
 8005af2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005af6:	4619      	mov	r1, r3
 8005af8:	4804      	ldr	r0, [pc, #16]	; (8005b0c <VectorC8+0x3c>)
 8005afa:	f7ff ff01 	bl	8005900 <i2c_lld_serve_error_interrupt>

  OSAL_IRQ_EPILOGUE();
 8005afe:	f001 fd3f 	bl	8007580 <__dbg_check_leave_isr>
 8005b02:	f003 facd 	bl	80090a0 <__port_irq_epilogue>
}
 8005b06:	b003      	add	sp, #12
 8005b08:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b0c:	20000dd8 	.word	0x20000dd8

08005b10 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8005b10:	b508      	push	{r3, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 8005b12:	480f      	ldr	r0, [pc, #60]	; (8005b50 <i2c_lld_init+0x40>)
 8005b14:	f7fc fe3c 	bl	8002790 <i2cObjectInit>
  I2CD1.thread = NULL;
 8005b18:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <i2c_lld_init+0x40>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	61da      	str	r2, [r3, #28]
  I2CD1.i2c    = I2C1;
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <i2c_lld_init+0x40>)
 8005b20:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <i2c_lld_init+0x44>)
 8005b22:	635a      	str	r2, [r3, #52]	; 0x34
  I2CD1.dmarx  = NULL;
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <i2c_lld_init+0x40>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	62da      	str	r2, [r3, #44]	; 0x2c
  I2CD1.dmatx  = NULL;
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <i2c_lld_init+0x40>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 8005b30:	4809      	ldr	r0, [pc, #36]	; (8005b58 <i2c_lld_init+0x48>)
 8005b32:	f7fc fe2d 	bl	8002790 <i2cObjectInit>
  I2CD2.thread = NULL;
 8005b36:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <i2c_lld_init+0x48>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	61da      	str	r2, [r3, #28]
  I2CD2.i2c    = I2C2;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <i2c_lld_init+0x48>)
 8005b3e:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <i2c_lld_init+0x4c>)
 8005b40:	635a      	str	r2, [r3, #52]	; 0x34
  I2CD2.dmarx  = NULL;
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <i2c_lld_init+0x48>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	62da      	str	r2, [r3, #44]	; 0x2c
  I2CD2.dmatx  = NULL;
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <i2c_lld_init+0x48>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
  I2CD3.thread = NULL;
  I2CD3.i2c    = I2C3;
  I2CD3.dmarx  = NULL;
  I2CD3.dmatx  = NULL;
#endif /* STM32_I2C_USE_I2C3 */
}
 8005b4e:	bd08      	pop	{r3, pc}
 8005b50:	20000da0 	.word	0x20000da0
 8005b54:	40005400 	.word	0x40005400
 8005b58:	20000dd8 	.word	0x20000dd8
 8005b5c:	40005800 	.word	0x40005800

08005b60 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8005b60:	b500      	push	{lr}
 8005b62:	b085      	sub	sp, #20
 8005b64:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8005b66:	9b01      	ldr	r3, [sp, #4]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	9303      	str	r3, [sp, #12]

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	f040 8086 	bne.w	8005c82 <i2c_lld_start+0x122>

    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8005b76:	9b01      	ldr	r3, [sp, #4]
 8005b78:	229a      	movs	r2, #154	; 0x9a
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_M2P;
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8005b7c:	9b01      	ldr	r3, [sp, #4]
 8005b7e:	228a      	movs	r2, #138	; 0x8a
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_P2M;

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 8005b82:	9b01      	ldr	r3, [sp, #4]
 8005b84:	4a53      	ldr	r2, [pc, #332]	; (8005cd4 <i2c_lld_start+0x174>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d13b      	bne.n	8005c02 <i2c_lld_start+0xa2>
      rccResetI2C1();
 8005b8a:	4b53      	ldr	r3, [pc, #332]	; (8005cd8 <i2c_lld_start+0x178>)
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	4a52      	ldr	r2, [pc, #328]	; (8005cd8 <i2c_lld_start+0x178>)
 8005b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b94:	6113      	str	r3, [r2, #16]
 8005b96:	4b50      	ldr	r3, [pc, #320]	; (8005cd8 <i2c_lld_start+0x178>)
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	4a4f      	ldr	r2, [pc, #316]	; (8005cd8 <i2c_lld_start+0x178>)
 8005b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ba0:	6113      	str	r3, [r2, #16]
 8005ba2:	4b4d      	ldr	r3, [pc, #308]	; (8005cd8 <i2c_lld_start+0x178>)
 8005ba4:	691b      	ldr	r3, [r3, #16]

      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C1_RX_DMA_STREAM,
 8005ba6:	9b01      	ldr	r3, [sp, #4]
 8005ba8:	4a4c      	ldr	r2, [pc, #304]	; (8005cdc <i2c_lld_start+0x17c>)
 8005baa:	2105      	movs	r1, #5
 8005bac:	2006      	movs	r0, #6
 8005bae:	f7ff f90f 	bl	8004dd0 <dmaStreamAllocI>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	9b01      	ldr	r3, [sp, #4]
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c
                                    STM32_I2C_I2C1_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                                    (void *)i2cp);
      osalDbgAssert(i2cp->dmarx != NULL, "unable to allocate stream");
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C1_TX_DMA_STREAM,
 8005bb8:	9b01      	ldr	r3, [sp, #4]
 8005bba:	4a49      	ldr	r2, [pc, #292]	; (8005ce0 <i2c_lld_start+0x180>)
 8005bbc:	2105      	movs	r1, #5
 8005bbe:	2005      	movs	r0, #5
 8005bc0:	f7ff f906 	bl	8004dd0 <dmaStreamAllocI>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
                                    STM32_I2C_I2C1_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                                    (void *)i2cp);
      osalDbgAssert(i2cp->dmatx != NULL, "unable to allocate stream");

      rccEnableI2C1(true);
 8005bca:	4b43      	ldr	r3, [pc, #268]	; (8005cd8 <i2c_lld_start+0x178>)
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	4a42      	ldr	r2, [pc, #264]	; (8005cd8 <i2c_lld_start+0x178>)
 8005bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bd4:	61d3      	str	r3, [r2, #28]
 8005bd6:	4b40      	ldr	r3, [pc, #256]	; (8005cd8 <i2c_lld_start+0x178>)
 8005bd8:	69db      	ldr	r3, [r3, #28]
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8005bda:	2105      	movs	r1, #5
 8005bdc:	201f      	movs	r0, #31
 8005bde:	f7fe ff2f 	bl	8004a40 <nvicEnableVector>
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8005be2:	2105      	movs	r1, #5
 8005be4:	2020      	movs	r0, #32
 8005be6:	f7fe ff2b 	bl	8004a40 <nvicEnableVector>

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8005bea:	9b01      	ldr	r3, [sp, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8005bf2:	9b01      	ldr	r3, [sp, #4]
 8005bf4:	625a      	str	r2, [r3, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
    }
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
    if (&I2CD2 == i2cp) {
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	4a37      	ldr	r2, [pc, #220]	; (8005ce4 <i2c_lld_start+0x184>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d13b      	bne.n	8005c82 <i2c_lld_start+0x122>
      rccResetI2C2();
 8005c0a:	4b33      	ldr	r3, [pc, #204]	; (8005cd8 <i2c_lld_start+0x178>)
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	4a32      	ldr	r2, [pc, #200]	; (8005cd8 <i2c_lld_start+0x178>)
 8005c10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c14:	6113      	str	r3, [r2, #16]
 8005c16:	4b30      	ldr	r3, [pc, #192]	; (8005cd8 <i2c_lld_start+0x178>)
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	4a2f      	ldr	r2, [pc, #188]	; (8005cd8 <i2c_lld_start+0x178>)
 8005c1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005c20:	6113      	str	r3, [r2, #16]
 8005c22:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <i2c_lld_start+0x178>)
 8005c24:	691b      	ldr	r3, [r3, #16]

      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 8005c26:	9b01      	ldr	r3, [sp, #4]
 8005c28:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <i2c_lld_start+0x17c>)
 8005c2a:	2105      	movs	r1, #5
 8005c2c:	2004      	movs	r0, #4
 8005c2e:	f7ff f8cf 	bl	8004dd0 <dmaStreamAllocI>
 8005c32:	4602      	mov	r2, r0
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	62da      	str	r2, [r3, #44]	; 0x2c
                                    STM32_I2C_I2C2_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                                    (void *)i2cp);
      osalDbgAssert(i2cp->dmarx != NULL, "unable to allocate stream");
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C2_TX_DMA_STREAM,
 8005c38:	9b01      	ldr	r3, [sp, #4]
 8005c3a:	4a29      	ldr	r2, [pc, #164]	; (8005ce0 <i2c_lld_start+0x180>)
 8005c3c:	2105      	movs	r1, #5
 8005c3e:	2003      	movs	r0, #3
 8005c40:	f7ff f8c6 	bl	8004dd0 <dmaStreamAllocI>
 8005c44:	4602      	mov	r2, r0
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
                                    STM32_I2C_I2C2_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                                    (void *)i2cp);
      osalDbgAssert(i2cp->dmatx != NULL, "unable to allocate stream");

      rccEnableI2C2(true);
 8005c4a:	4b23      	ldr	r3, [pc, #140]	; (8005cd8 <i2c_lld_start+0x178>)
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <i2c_lld_start+0x178>)
 8005c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c54:	61d3      	str	r3, [r2, #28]
 8005c56:	4b20      	ldr	r3, [pc, #128]	; (8005cd8 <i2c_lld_start+0x178>)
 8005c58:	69db      	ldr	r3, [r3, #28]
      nvicEnableVector(I2C2_EV_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 8005c5a:	2105      	movs	r1, #5
 8005c5c:	2021      	movs	r0, #33	; 0x21
 8005c5e:	f7fe feef 	bl	8004a40 <nvicEnableVector>
      nvicEnableVector(I2C2_ER_IRQn, STM32_I2C_I2C2_IRQ_PRIORITY);
 8005c62:	2105      	movs	r1, #5
 8005c64:	2022      	movs	r0, #34	; 0x22
 8005c66:	f7fe feeb 	bl	8004a40 <nvicEnableVector>

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8005c72:	9b01      	ldr	r3, [sp, #4]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C2_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8005c7e:	9b01      	ldr	r3, [sp, #4]
 8005c80:	629a      	str	r2, [r3, #40]	; 0x28
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8005c82:	9b03      	ldr	r3, [sp, #12]
 8005c84:	f103 0210 	add.w	r2, r3, #16
 8005c88:	9b01      	ldr	r3, [sp, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	609a      	str	r2, [r3, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	f103 0210 	add.w	r2, r3, #16
 8005c96:	9b01      	ldr	r3, [sp, #4]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	609a      	str	r2, [r3, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ca4:	601a      	str	r2, [r3, #0]
  dp->CR1 = 0;
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8005cb2:	605a      	str	r2, [r3, #4]

  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
 8005cb4:	9801      	ldr	r0, [sp, #4]
 8005cb6:	f7ff fbbb 	bl	8005430 <i2c_lld_set_clock>
  i2c_lld_set_opmode(i2cp);
 8005cba:	9801      	ldr	r0, [sp, #4]
 8005cbc:	f7ff fc60 	bl	8005580 <i2c_lld_set_opmode>

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	601a      	str	r2, [r3, #0]
}
 8005ccc:	b005      	add	sp, #20
 8005cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cd2:	bf00      	nop
 8005cd4:	20000da0 	.word	0x20000da0
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	08005811 	.word	0x08005811
 8005ce0:	080058a1 	.word	0x080058a1
 8005ce4:	20000dd8 	.word	0x20000dd8
	...

08005cf0 <i2c_lld_stop>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {
 8005cf0:	b500      	push	{lr}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	9001      	str	r0, [sp, #4]

  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {
 8005cf6:	9b01      	ldr	r3, [sp, #4]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d036      	beq.n	8005d6c <i2c_lld_stop+0x7c>

    /* I2C disable.*/
    i2c_lld_abort_operation(i2cp);
 8005cfe:	9801      	ldr	r0, [sp, #4]
 8005d00:	f7ff fb56 	bl	80053b0 <i2c_lld_abort_operation>
    dmaStreamFreeI(i2cp->dmatx);
 8005d04:	9b01      	ldr	r3, [sp, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff f8e9 	bl	8004ee0 <dmaStreamFreeI>
    dmaStreamFreeI(i2cp->dmarx);
 8005d0e:	9b01      	ldr	r3, [sp, #4]
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff f8e4 	bl	8004ee0 <dmaStreamFreeI>
    i2cp->dmatx = NULL;
 8005d18:	9b01      	ldr	r3, [sp, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
    i2cp->dmarx = NULL;
 8005d1e:	9b01      	ldr	r3, [sp, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 8005d24:	9b01      	ldr	r3, [sp, #4]
 8005d26:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <i2c_lld_stop+0x84>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10d      	bne.n	8005d48 <i2c_lld_stop+0x58>
      nvicDisableVector(I2C1_EV_IRQn);
 8005d2c:	201f      	movs	r0, #31
 8005d2e:	f7fe feb7 	bl	8004aa0 <nvicDisableVector>
      nvicDisableVector(I2C1_ER_IRQn);
 8005d32:	2020      	movs	r0, #32
 8005d34:	f7fe feb4 	bl	8004aa0 <nvicDisableVector>
      rccDisableI2C1();
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <i2c_lld_stop+0x88>)
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4a0e      	ldr	r2, [pc, #56]	; (8005d78 <i2c_lld_stop+0x88>)
 8005d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d42:	61d3      	str	r3, [r2, #28]
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <i2c_lld_stop+0x88>)
 8005d46:	69db      	ldr	r3, [r3, #28]
    }
#endif

#if STM32_I2C_USE_I2C2
    if (&I2CD2 == i2cp) {
 8005d48:	9b01      	ldr	r3, [sp, #4]
 8005d4a:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <i2c_lld_stop+0x8c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10d      	bne.n	8005d6c <i2c_lld_stop+0x7c>
      nvicDisableVector(I2C2_EV_IRQn);
 8005d50:	2021      	movs	r0, #33	; 0x21
 8005d52:	f7fe fea5 	bl	8004aa0 <nvicDisableVector>
      nvicDisableVector(I2C2_ER_IRQn);
 8005d56:	2022      	movs	r0, #34	; 0x22
 8005d58:	f7fe fea2 	bl	8004aa0 <nvicDisableVector>
      rccDisableI2C2();
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <i2c_lld_stop+0x88>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	4a05      	ldr	r2, [pc, #20]	; (8005d78 <i2c_lld_stop+0x88>)
 8005d62:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005d66:	61d3      	str	r3, [r2, #28]
 8005d68:	4b03      	ldr	r3, [pc, #12]	; (8005d78 <i2c_lld_stop+0x88>)
 8005d6a:	69db      	ldr	r3, [r3, #28]
      nvicDisableVector(I2C3_ER_IRQn);
      rccDisableI2C3();
    }
#endif
  }
}
 8005d6c:	b003      	add	sp, #12
 8005d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d72:	bf00      	nop
 8005d74:	20000da0 	.word	0x20000da0
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	20000dd8 	.word	0x20000dd8

08005d80 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
 8005d80:	b500      	push	{lr}
 8005d82:	b089      	sub	sp, #36	; 0x24
 8005d84:	9003      	str	r0, [sp, #12]
 8005d86:	9201      	str	r2, [sp, #4]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_TypeDef *dp = i2cp->i2c;
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	9307      	str	r3, [sp, #28]
  systime_t start, end;
  msg_t msg;

#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
 8005d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d017      	beq.n	8005dd6 <i2c_lld_master_transmit_timeout+0x56>
 8005da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	bf94      	ite	ls
 8005dac:	2301      	movls	r3, #1
 8005dae:	2300      	movhi	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d107      	bne.n	8005dc6 <i2c_lld_master_transmit_timeout+0x46>
 8005db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bf0c      	ite	eq
 8005dbc:	2301      	moveq	r3, #1
 8005dbe:	2300      	movne	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <i2c_lld_master_transmit_timeout+0x4a>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <i2c_lld_master_transmit_timeout+0x4c>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <i2c_lld_master_transmit_timeout+0x56>
 8005dd0:	4867      	ldr	r0, [pc, #412]	; (8005f70 <i2c_lld_master_transmit_timeout+0x1f0>)
 8005dd2:	f001 faed 	bl	80073b0 <chSysHalt>
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	609a      	str	r2, [r3, #8]

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8005ddc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	841a      	strh	r2, [r3, #32]

  /* Releases the lock from high level driver.*/
  osalSysUnlock();
 8005de8:	f7ff fa6a 	bl	80052c0 <osalSysUnlock.lto_priv.8>

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	9a03      	ldr	r2, [sp, #12]
 8005df4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005df6:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	9a01      	ldr	r2, [sp, #4]
 8005e00:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	9a00      	ldr	r2, [sp, #0]
 8005e0a:	605a      	str	r2, [r3, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	9a03      	ldr	r2, [sp, #12]
 8005e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e16:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8005e18:	9b03      	ldr	r3, [sp, #12]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e20:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8005e22:	9b03      	ldr	r3, [sp, #12]
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e2a:	605a      	str	r2, [r3, #4]

  /* Calculating the time window for the timeout on the busy bus condition.*/
  start = osalOsGetSystemTimeX();
 8005e2c:	f7ff fa60 	bl	80052f0 <osalOsGetSystemTimeX>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f8ad 301a 	strh.w	r3, [sp, #26]
  end = osalTimeAddX(start, OSAL_MS2I(STM32_I2C_BUSY_TIMEOUT));
 8005e36:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8005e3a:	2164      	movs	r1, #100	; 0x64
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff fa5f 	bl	8005300 <osalTimeAddX>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f8ad 3018 	strh.w	r3, [sp, #24]

  /* Waits until BUSY flag is reset or, alternatively, for a timeout
     condition.*/
  while (true) {
    osalSysLock();
 8005e48:	f7ff fa32 	bl	80052b0 <osalSysLock.lto_priv.8>

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8005e4c:	9b07      	ldr	r3, [sp, #28]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d105      	bne.n	8005e64 <i2c_lld_master_transmit_timeout+0xe4>
 8005e58:	9b07      	ldr	r3, [sp, #28]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d040      	beq.n	8005ee6 <i2c_lld_master_transmit_timeout+0x166>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 8005e64:	f7ff fa44 	bl	80052f0 <osalOsGetSystemTimeX>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8005e70:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8005e74:	4619      	mov	r1, r3
 8005e76:	f7ff fa5b 	bl	8005330 <osalTimeIsInRangeX>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	f083 0301 	eor.w	r3, r3, #1
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d02c      	beq.n	8005ee0 <i2c_lld_master_transmit_timeout+0x160>
      dmaStreamDisable(i2cp->dmatx);
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	9b03      	ldr	r3, [sp, #12]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f022 020f 	bic.w	r2, r2, #15
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	7b5b      	ldrb	r3, [r3, #13]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	230e      	movs	r3, #14
 8005ea4:	fa03 f202 	lsl.w	r2, r3, r2
 8005ea8:	9b03      	ldr	r3, [sp, #12]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	605a      	str	r2, [r3, #4]
      dmaStreamDisable(i2cp->dmarx);
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f022 020f 	bic.w	r2, r2, #15
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	7b5b      	ldrb	r3, [r3, #13]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	230e      	movs	r3, #14
 8005ece:	fa03 f202 	lsl.w	r2, r3, r2
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	605a      	str	r2, [r3, #4]
      return MSG_TIMEOUT;
 8005eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ede:	e043      	b.n	8005f68 <i2c_lld_master_transmit_timeout+0x1e8>
    }

    osalSysUnlock();
 8005ee0:	f7ff f9ee 	bl	80052c0 <osalSysUnlock.lto_priv.8>
 8005ee4:	e7b0      	b.n	8005e48 <i2c_lld_master_transmit_timeout+0xc8>
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8005ee6:	9b07      	ldr	r3, [sp, #28]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	605a      	str	r2, [r3, #4]
  dp->CR1 |= I2C_CR1_START;
 8005ef2:	9b07      	ldr	r3, [sp, #28]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005efa:	9b07      	ldr	r3, [sp, #28]
 8005efc:	601a      	str	r2, [r3, #0]

  /* Waits for the operation completion or a timeout.*/
  msg = osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	331c      	adds	r3, #28
 8005f02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fa33 	bl	8005370 <osalThreadSuspendTimeoutS>
 8005f0a:	9005      	str	r0, [sp, #20]
  if (msg != MSG_OK) {
 8005f0c:	9b05      	ldr	r3, [sp, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d029      	beq.n	8005f66 <i2c_lld_master_transmit_timeout+0x1e6>
    dmaStreamDisable(i2cp->dmatx);
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f022 020f 	bic.w	r2, r2, #15
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	7b5b      	ldrb	r3, [r3, #13]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	230e      	movs	r3, #14
 8005f30:	fa03 f202 	lsl.w	r2, r3, r2
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	605a      	str	r2, [r3, #4]
    dmaStreamDisable(i2cp->dmarx);
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f022 020f 	bic.w	r2, r2, #15
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	7b5b      	ldrb	r3, [r3, #13]
 8005f56:	461a      	mov	r2, r3
 8005f58:	230e      	movs	r3, #14
 8005f5a:	fa03 f202 	lsl.w	r2, r3, r2
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	605a      	str	r2, [r3, #4]
  }

  return msg;
 8005f66:	9b05      	ldr	r3, [sp, #20]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	b009      	add	sp, #36	; 0x24
 8005f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f70:	0800a91c 	.word	0x0800a91c
	...

08005f80 <chSysLockFromISR.lto_priv.3>:
static inline void chSysLockFromISR(void) {
 8005f80:	b500      	push	{lr}
 8005f82:	b083      	sub	sp, #12
 8005f84:	2330      	movs	r3, #48	; 0x30
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	9b01      	ldr	r3, [sp, #4]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock_from_isr();
 8005f8e:	f001 fa77 	bl	8007480 <__dbg_check_lock_from_isr>
}
 8005f92:	b003      	add	sp, #12
 8005f94:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005fa0 <chSysUnlockFromISR.lto_priv.3>:
static inline void chSysUnlockFromISR(void) {
 8005fa0:	b500      	push	{lr}
 8005fa2:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
 8005fa4:	f001 fa94 	bl	80074d0 <__dbg_check_unlock_from_isr>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	9b01      	ldr	r3, [sp, #4]
 8005fae:	f383 8811 	msr	BASEPRI, r3
}
 8005fb2:	b003      	add	sp, #12
 8005fb4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005fc0 <osalSysLockFromISR.lto_priv.3>:
static inline void osalSysLockFromISR(void) {
 8005fc0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8005fc2:	f7ff ffdd 	bl	8005f80 <chSysLockFromISR.lto_priv.3>
}
 8005fc6:	bd08      	pop	{r3, pc}
	...

08005fd0 <osalSysUnlockFromISR.lto_priv.3>:
static inline void osalSysUnlockFromISR(void) {
 8005fd0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8005fd2:	f7ff ffe5 	bl	8005fa0 <chSysUnlockFromISR.lto_priv.3>
}
 8005fd6:	bd08      	pop	{r3, pc}
	...

08005fe0 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 8005fe0:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
 8005fe2:	f001 f9f5 	bl	80073d0 <chSysTimerHandlerI>
}
 8005fe6:	bd08      	pop	{r3, pc}
	...

08005ff0 <SysTick_Handler>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8005ff0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8005ff2:	f001 fa95 	bl	8007520 <__dbg_check_enter_isr>

  st_lld_serve_interrupt();
 8005ff6:	f000 f823 	bl	8006040 <st_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8005ffa:	f001 fac1 	bl	8007580 <__dbg_check_leave_isr>
 8005ffe:	f003 f84f 	bl	80090a0 <__port_irq_epilogue>
}
 8006002:	bd08      	pop	{r3, pc}
	...

08006010 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8006010:	b508      	push	{r3, lr}
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (SYSTICK_CK / OSAL_ST_FREQUENCY) - 1;
 8006012:	4b07      	ldr	r3, [pc, #28]	; (8006030 <st_lld_init+0x20>)
 8006014:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8006018:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <st_lld_init+0x20>)
 800601c:	2200      	movs	r2, #0
 800601e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8006020:	4b03      	ldr	r3, [pc, #12]	; (8006030 <st_lld_init+0x20>)
 8006022:	2207      	movs	r2, #7
 8006024:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8006026:	2108      	movs	r1, #8
 8006028:	200b      	movs	r0, #11
 800602a:	f7fe fd61 	bl	8004af0 <nvicSetSystemHandlerPriority>
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800602e:	bd08      	pop	{r3, pc}
 8006030:	e000e010 	.word	0xe000e010
	...

08006040 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
 8006040:	b508      	push	{r3, lr}
  timp->SR = ~sr;

  if ((sr & TIM_SR_CC1IF) != 0U)
#endif
  {
    osalSysLockFromISR();
 8006042:	f7ff ffbd 	bl	8005fc0 <osalSysLockFromISR.lto_priv.3>
    osalOsTimerHandlerI();
 8006046:	f7ff ffcb 	bl	8005fe0 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 800604a:	f7ff ffc1 	bl	8005fd0 <osalSysUnlockFromISR.lto_priv.3>
      st_callbacks[3](3U);
    }
  }
#endif
#endif
}
 800604e:	bd08      	pop	{r3, pc}

08006050 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8006050:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8006052:	f001 fa65 	bl	8007520 <__dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD2);
 8006056:	4804      	ldr	r0, [pc, #16]	; (8006068 <VectorB0+0x18>)
 8006058:	f000 f9e2 	bl	8006420 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 800605c:	f001 fa90 	bl	8007580 <__dbg_check_leave_isr>
 8006060:	f003 f81e 	bl	80090a0 <__port_irq_epilogue>
}
 8006064:	bd08      	pop	{r3, pc}
 8006066:	bf00      	nop
 8006068:	20000e10 	.word	0x20000e10
 800606c:	00000000 	.word	0x00000000

08006070 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8006070:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8006072:	f001 fa55 	bl	8007520 <__dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD3);
 8006076:	4804      	ldr	r0, [pc, #16]	; (8006088 <VectorB4+0x18>)
 8006078:	f000 f9d2 	bl	8006420 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 800607c:	f001 fa80 	bl	8007580 <__dbg_check_leave_isr>
 8006080:	f003 f80e 	bl	80090a0 <__port_irq_epilogue>
}
 8006084:	bd08      	pop	{r3, pc}
 8006086:	bf00      	nop
 8006088:	20000e30 	.word	0x20000e30
 800608c:	00000000 	.word	0x00000000

08006090 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8006090:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8006092:	f001 fa45 	bl	8007520 <__dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD4);
 8006096:	4804      	ldr	r0, [pc, #16]	; (80060a8 <VectorB8+0x18>)
 8006098:	f000 f9c2 	bl	8006420 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 800609c:	f001 fa70 	bl	8007580 <__dbg_check_leave_isr>
 80060a0:	f002 fffe 	bl	80090a0 <__port_irq_epilogue>
}
 80060a4:	bd08      	pop	{r3, pc}
 80060a6:	bf00      	nop
 80060a8:	20000e50 	.word	0x20000e50
 80060ac:	00000000 	.word	0x00000000

080060b0 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
 80060b0:	b508      	push	{r3, lr}
  PWMD1.has_bdtr = true;
#endif

#if STM32_PWM_USE_TIM2
  /* Driver initialization.*/
  pwmObjectInit(&PWMD2);
 80060b2:	4813      	ldr	r0, [pc, #76]	; (8006100 <pwm_lld_init+0x50>)
 80060b4:	f7fc fce4 	bl	8002a80 <pwmObjectInit>
  PWMD2.channels = STM32_TIM2_CHANNELS;
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <pwm_lld_init+0x50>)
 80060ba:	2204      	movs	r2, #4
 80060bc:	741a      	strb	r2, [r3, #16]
  PWMD2.tim = STM32_TIM2;
 80060be:	4b10      	ldr	r3, [pc, #64]	; (8006100 <pwm_lld_init+0x50>)
 80060c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80060c4:	61da      	str	r2, [r3, #28]
  PWMD2.has_bdtr = false;
 80060c6:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <pwm_lld_init+0x50>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	761a      	strb	r2, [r3, #24]
#endif

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
 80060cc:	480d      	ldr	r0, [pc, #52]	; (8006104 <pwm_lld_init+0x54>)
 80060ce:	f7fc fcd7 	bl	8002a80 <pwmObjectInit>
  PWMD3.channels = STM32_TIM3_CHANNELS;
 80060d2:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <pwm_lld_init+0x54>)
 80060d4:	2204      	movs	r2, #4
 80060d6:	741a      	strb	r2, [r3, #16]
  PWMD3.tim = STM32_TIM3;
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <pwm_lld_init+0x54>)
 80060da:	4a0b      	ldr	r2, [pc, #44]	; (8006108 <pwm_lld_init+0x58>)
 80060dc:	61da      	str	r2, [r3, #28]
  PWMD3.has_bdtr = false;
 80060de:	4b09      	ldr	r3, [pc, #36]	; (8006104 <pwm_lld_init+0x54>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	761a      	strb	r2, [r3, #24]
#endif

#if STM32_PWM_USE_TIM4
  /* Driver initialization.*/
  pwmObjectInit(&PWMD4);
 80060e4:	4809      	ldr	r0, [pc, #36]	; (800610c <pwm_lld_init+0x5c>)
 80060e6:	f7fc fccb 	bl	8002a80 <pwmObjectInit>
  PWMD4.channels = STM32_TIM4_CHANNELS;
 80060ea:	4b08      	ldr	r3, [pc, #32]	; (800610c <pwm_lld_init+0x5c>)
 80060ec:	2204      	movs	r2, #4
 80060ee:	741a      	strb	r2, [r3, #16]
  PWMD4.tim = STM32_TIM4;
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <pwm_lld_init+0x5c>)
 80060f2:	4a07      	ldr	r2, [pc, #28]	; (8006110 <pwm_lld_init+0x60>)
 80060f4:	61da      	str	r2, [r3, #28]
  PWMD4.has_bdtr = false;
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <pwm_lld_init+0x5c>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	761a      	strb	r2, [r3, #24]
  pwmObjectInit(&PWMD22);
  PWMD22.channels = STM32_TIM22_CHANNELS;
  PWMD22.tim = STM32_TIM22;
  PWMD22.has_bdtr = false;
#endif
}
 80060fc:	bd08      	pop	{r3, pc}
 80060fe:	bf00      	nop
 8006100:	20000e10 	.word	0x20000e10
 8006104:	20000e30 	.word	0x20000e30
 8006108:	40000400 	.word	0x40000400
 800610c:	20000e50 	.word	0x20000e50
 8006110:	40000800 	.word	0x40000800
	...

08006120 <pwm_lld_start>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8006120:	b500      	push	{lr}
 8006122:	b085      	sub	sp, #20
 8006124:	9001      	str	r0, [sp, #4]
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d178      	bne.n	8006220 <pwm_lld_start+0x100>
#endif
    }
#endif

#if STM32_PWM_USE_TIM2
    if (&PWMD2 == pwmp) {
 800612e:	9b01      	ldr	r3, [sp, #4]
 8006130:	4a36      	ldr	r2, [pc, #216]	; (800620c <pwm_lld_start+0xec>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d11c      	bne.n	8006170 <pwm_lld_start+0x50>
      rccEnableTIM2(true);
 8006136:	4b36      	ldr	r3, [pc, #216]	; (8006210 <pwm_lld_start+0xf0>)
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	4a35      	ldr	r2, [pc, #212]	; (8006210 <pwm_lld_start+0xf0>)
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	61d3      	str	r3, [r2, #28]
 8006142:	4b33      	ldr	r3, [pc, #204]	; (8006210 <pwm_lld_start+0xf0>)
 8006144:	69db      	ldr	r3, [r3, #28]
      rccResetTIM2();
 8006146:	4b32      	ldr	r3, [pc, #200]	; (8006210 <pwm_lld_start+0xf0>)
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	4a31      	ldr	r2, [pc, #196]	; (8006210 <pwm_lld_start+0xf0>)
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	6113      	str	r3, [r2, #16]
 8006152:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <pwm_lld_start+0xf0>)
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	4a2e      	ldr	r2, [pc, #184]	; (8006210 <pwm_lld_start+0xf0>)
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	6113      	str	r3, [r2, #16]
 800615e:	4b2c      	ldr	r3, [pc, #176]	; (8006210 <pwm_lld_start+0xf0>)
 8006160:	691b      	ldr	r3, [r3, #16]
#if !defined(STM32_TIM2_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_PWM_TIM2_IRQ_PRIORITY);
 8006162:	2107      	movs	r1, #7
 8006164:	201c      	movs	r0, #28
 8006166:	f7fe fc6b 	bl	8004a40 <nvicEnableVector>
#endif
#if defined(STM32_TIM2CLK)
      pwmp->clock = STM32_TIM2CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 800616a:	9b01      	ldr	r3, [sp, #4]
 800616c:	4a29      	ldr	r2, [pc, #164]	; (8006214 <pwm_lld_start+0xf4>)
 800616e:	615a      	str	r2, [r3, #20]
#endif
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	4a29      	ldr	r2, [pc, #164]	; (8006218 <pwm_lld_start+0xf8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d11c      	bne.n	80061b2 <pwm_lld_start+0x92>
      rccEnableTIM3(true);
 8006178:	4b25      	ldr	r3, [pc, #148]	; (8006210 <pwm_lld_start+0xf0>)
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	4a24      	ldr	r2, [pc, #144]	; (8006210 <pwm_lld_start+0xf0>)
 800617e:	f043 0302 	orr.w	r3, r3, #2
 8006182:	61d3      	str	r3, [r2, #28]
 8006184:	4b22      	ldr	r3, [pc, #136]	; (8006210 <pwm_lld_start+0xf0>)
 8006186:	69db      	ldr	r3, [r3, #28]
      rccResetTIM3();
 8006188:	4b21      	ldr	r3, [pc, #132]	; (8006210 <pwm_lld_start+0xf0>)
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	4a20      	ldr	r2, [pc, #128]	; (8006210 <pwm_lld_start+0xf0>)
 800618e:	f043 0302 	orr.w	r3, r3, #2
 8006192:	6113      	str	r3, [r2, #16]
 8006194:	4b1e      	ldr	r3, [pc, #120]	; (8006210 <pwm_lld_start+0xf0>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	4a1d      	ldr	r2, [pc, #116]	; (8006210 <pwm_lld_start+0xf0>)
 800619a:	f023 0302 	bic.w	r3, r3, #2
 800619e:	6113      	str	r3, [r2, #16]
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <pwm_lld_start+0xf0>)
 80061a2:	691b      	ldr	r3, [r3, #16]
#if !defined(STM32_TIM3_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
 80061a4:	2107      	movs	r1, #7
 80061a6:	201d      	movs	r0, #29
 80061a8:	f7fe fc4a 	bl	8004a40 <nvicEnableVector>
#endif
#if defined(STM32_TIM3CLK)
      pwmp->clock = STM32_TIM3CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 80061ac:	9b01      	ldr	r3, [sp, #4]
 80061ae:	4a19      	ldr	r2, [pc, #100]	; (8006214 <pwm_lld_start+0xf4>)
 80061b0:	615a      	str	r2, [r3, #20]
#endif
    }
#endif

#if STM32_PWM_USE_TIM4
    if (&PWMD4 == pwmp) {
 80061b2:	9b01      	ldr	r3, [sp, #4]
 80061b4:	4a19      	ldr	r2, [pc, #100]	; (800621c <pwm_lld_start+0xfc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d11c      	bne.n	80061f4 <pwm_lld_start+0xd4>
      rccEnableTIM4(true);
 80061ba:	4b15      	ldr	r3, [pc, #84]	; (8006210 <pwm_lld_start+0xf0>)
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	4a14      	ldr	r2, [pc, #80]	; (8006210 <pwm_lld_start+0xf0>)
 80061c0:	f043 0304 	orr.w	r3, r3, #4
 80061c4:	61d3      	str	r3, [r2, #28]
 80061c6:	4b12      	ldr	r3, [pc, #72]	; (8006210 <pwm_lld_start+0xf0>)
 80061c8:	69db      	ldr	r3, [r3, #28]
      rccResetTIM4();
 80061ca:	4b11      	ldr	r3, [pc, #68]	; (8006210 <pwm_lld_start+0xf0>)
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	4a10      	ldr	r2, [pc, #64]	; (8006210 <pwm_lld_start+0xf0>)
 80061d0:	f043 0304 	orr.w	r3, r3, #4
 80061d4:	6113      	str	r3, [r2, #16]
 80061d6:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <pwm_lld_start+0xf0>)
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	4a0d      	ldr	r2, [pc, #52]	; (8006210 <pwm_lld_start+0xf0>)
 80061dc:	f023 0304 	bic.w	r3, r3, #4
 80061e0:	6113      	str	r3, [r2, #16]
 80061e2:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <pwm_lld_start+0xf0>)
 80061e4:	691b      	ldr	r3, [r3, #16]
#if !defined(STM32_TIM4_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_PWM_TIM4_IRQ_PRIORITY);
 80061e6:	2107      	movs	r1, #7
 80061e8:	201e      	movs	r0, #30
 80061ea:	f7fe fc29 	bl	8004a40 <nvicEnableVector>
#endif
#if defined(STM32_TIM4CLK)
      pwmp->clock = STM32_TIM4CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 80061ee:	9b01      	ldr	r3, [sp, #4]
 80061f0:	4a08      	ldr	r2, [pc, #32]	; (8006214 <pwm_lld_start+0xf4>)
 80061f2:	615a      	str	r2, [r3, #20]
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80061f4:	9b01      	ldr	r3, [sp, #4]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f646 0268 	movw	r2, #26728	; 0x6868
 80061fc:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f646 0268 	movw	r2, #26728	; 0x6868
 8006206:	61da      	str	r2, [r3, #28]
 8006208:	e022      	b.n	8006250 <pwm_lld_start+0x130>
 800620a:	bf00      	nop
 800620c:	20000e10 	.word	0x20000e10
 8006210:	40021000 	.word	0x40021000
 8006214:	02dc6c00 	.word	0x02dc6c00
 8006218:	20000e30 	.word	0x20000e30
 800621c:	20000e50 	.word	0x20000e50
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8006220:	9b01      	ldr	r3, [sp, #4]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8006228:	9b01      	ldr	r3, [sp, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	2200      	movs	r2, #0
 800622e:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8006230:	9b01      	ldr	r3, [sp, #4]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	2200      	movs	r2, #0
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8006238:	9b01      	ldr	r3, [sp, #4]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	2200      	movs	r2, #0
 800623e:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8006240:	9b01      	ldr	r3, [sp, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	2200      	movs	r2, #0
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8006248:	9b01      	ldr	r3, [sp, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	2200      	movs	r2, #0
 800624e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8006250:	9b01      	ldr	r3, [sp, #4]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	9b01      	ldr	r3, [sp, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	fbb2 f3f3 	udiv	r3, r2, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	9302      	str	r3, [sp, #8]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8006262:	9b01      	ldr	r3, [sp, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	9a02      	ldr	r2, [sp, #8]
 8006268:	629a      	str	r2, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 800626a:	9b01      	ldr	r3, [sp, #4]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	3a01      	subs	r2, #1
 8006274:	62da      	str	r2, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8006276:	9b01      	ldr	r3, [sp, #4]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	9b01      	ldr	r3, [sp, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006280:	605a      	str	r2, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	9303      	str	r3, [sp, #12]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	2b01      	cmp	r3, #1
 8006292:	d005      	beq.n	80062a0 <pwm_lld_start+0x180>
 8006294:	2b02      	cmp	r3, #2
 8006296:	d107      	bne.n	80062a8 <pwm_lld_start+0x188>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC1P;
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	f043 0302 	orr.w	r3, r3, #2
 800629e:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 80062a8:	9b01      	ldr	r3, [sp, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d005      	beq.n	80062c2 <pwm_lld_start+0x1a2>
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d107      	bne.n	80062ca <pwm_lld_start+0x1aa>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	f043 0320 	orr.w	r3, r3, #32
 80062c0:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	f043 0310 	orr.w	r3, r3, #16
 80062c8:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 80062ca:	9b01      	ldr	r3, [sp, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d005      	beq.n	80062e4 <pwm_lld_start+0x1c4>
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d107      	bne.n	80062ec <pwm_lld_start+0x1cc>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062e2:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ea:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d005      	beq.n	8006306 <pwm_lld_start+0x1e6>
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d107      	bne.n	800630e <pwm_lld_start+0x1ee>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006304:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800630c:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  if (pwmp->has_bdtr) {
 800630e:	9b01      	ldr	r3, [sp, #4]
 8006310:	7e1b      	ldrb	r3, [r3, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d043      	beq.n	800639e <pwm_lld_start+0x27e>
    switch (pwmp->config->channels[0].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 8006316:	9b01      	ldr	r3, [sp, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006320:	2b10      	cmp	r3, #16
 8006322:	d005      	beq.n	8006330 <pwm_lld_start+0x210>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d107      	bne.n	8006338 <pwm_lld_start+0x218>
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_LOW:
      ccer |= STM32_TIM_CCER_CC1NP;
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	f043 0308 	orr.w	r3, r3, #8
 800632e:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_HIGH:
      ccer |= STM32_TIM_CCER_CC1NE;
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	f043 0304 	orr.w	r3, r3, #4
 8006336:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    default:
      ;
    }
    switch (pwmp->config->channels[1].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 8006338:	9b01      	ldr	r3, [sp, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006342:	2b10      	cmp	r3, #16
 8006344:	d005      	beq.n	8006352 <pwm_lld_start+0x232>
 8006346:	2b20      	cmp	r3, #32
 8006348:	d107      	bne.n	800635a <pwm_lld_start+0x23a>
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_LOW:
      ccer |= STM32_TIM_CCER_CC2NP;
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006350:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_HIGH:
      ccer |= STM32_TIM_CCER_CC2NE;
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006358:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    default:
      ;
    }
    switch (pwmp->config->channels[2].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006364:	2b10      	cmp	r3, #16
 8006366:	d005      	beq.n	8006374 <pwm_lld_start+0x254>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d107      	bne.n	800637c <pwm_lld_start+0x25c>
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_LOW:
      ccer |= STM32_TIM_CCER_CC3NP;
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006372:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_HIGH:
      ccer |= STM32_TIM_CCER_CC3NE;
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800637a:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    default:
      ;
    }
    switch (pwmp->config->channels[3].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 800637c:	9b01      	ldr	r3, [sp, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006386:	2b10      	cmp	r3, #16
 8006388:	d005      	beq.n	8006396 <pwm_lld_start+0x276>
 800638a:	2b20      	cmp	r3, #32
 800638c:	d107      	bne.n	800639e <pwm_lld_start+0x27e>
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_LOW:
      ccer |= STM32_TIM_CCER_CC4NP;
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006394:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_HIGH:
      ccer |= STM32_TIM_CCER_CC4NE;
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800639c:	9303      	str	r3, [sp, #12]
    default:
      ;
    }
  }

  pwmp->tim->CCER  = ccer;
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	9a03      	ldr	r2, [sp, #12]
 80063a4:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80063a6:	9b01      	ldr	r3, [sp, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	2201      	movs	r2, #1
 80063ac:	615a      	str	r2, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	2200      	movs	r2, #0
 80063b4:	611a      	str	r2, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80063b6:	9b01      	ldr	r3, [sp, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063bc:	9b01      	ldr	r3, [sp, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063c4:	60da      	str	r2, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
  if (pwmp->has_bdtr) {
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	7e1b      	ldrb	r3, [r3, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <pwm_lld_start+0x2be>
    pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2285      	movs	r2, #133	; 0x85
 80063e4:	601a      	str	r2, [r3, #0]
                     STM32_TIM_CR1_CEN;
}
 80063e6:	b005      	add	sp, #20
 80063e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80063ec:	0000      	movs	r0, r0
	...

080063f0 <pwm_lld_enable_channel>:
 *
 * @notapi
 */
void pwm_lld_enable_channel(PWMDriver *pwmp,
                            pwmchannel_t channel,
                            pwmcnt_t width) {
 80063f0:	b084      	sub	sp, #16
 80063f2:	9003      	str	r0, [sp, #12]
 80063f4:	460b      	mov	r3, r1
 80063f6:	9201      	str	r2, [sp, #4]
 80063f8:	f88d 300b 	strb.w	r3, [sp, #11]

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006404:	330c      	adds	r3, #12
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	9a01      	ldr	r2, [sp, #4]
 800640c:	605a      	str	r2, [r3, #4]
  if (channel < 4)
    pwmp->tim->CCR[channel] = width;
  else
    pwmp->tim->CCXR[channel - 4] = width;
#endif
}
 800640e:	b004      	add	sp, #16
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
	...

08006420 <pwm_lld_serve_interrupt>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8006420:	b500      	push	{lr}
 8006422:	b085      	sub	sp, #20
 8006424:	9001      	str	r0, [sp, #4]
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	9303      	str	r3, [sp, #12]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	9a03      	ldr	r2, [sp, #12]
 8006438:	4013      	ands	r3, r2
 800643a:	9303      	str	r3, [sp, #12]
  pwmp->tim->SR = ~sr;
 800643c:	9b01      	ldr	r3, [sp, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	9a03      	ldr	r2, [sp, #12]
 8006442:	43d2      	mvns	r2, r2
 8006444:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8006446:	9b03      	ldr	r3, [sp, #12]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <pwm_lld_serve_interrupt+0x44>
      (pwmp->config->channels[0].callback != NULL))
 8006450:	9b01      	ldr	r3, [sp, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <pwm_lld_serve_interrupt+0x44>
    pwmp->config->channels[0].callback(pwmp);
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	9801      	ldr	r0, [sp, #4]
 8006462:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <pwm_lld_serve_interrupt+0x62>
      (pwmp->config->channels[1].callback != NULL))
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <pwm_lld_serve_interrupt+0x62>
    pwmp->config->channels[1].callback(pwmp);
 8006478:	9b01      	ldr	r3, [sp, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	9801      	ldr	r0, [sp, #4]
 8006480:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <pwm_lld_serve_interrupt+0x80>
      (pwmp->config->channels[2].callback != NULL))
 800648c:	9b01      	ldr	r3, [sp, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <pwm_lld_serve_interrupt+0x80>
    pwmp->config->channels[2].callback(pwmp);
 8006496:	9b01      	ldr	r3, [sp, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	9801      	ldr	r0, [sp, #4]
 800649e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80064a0:	9b03      	ldr	r3, [sp, #12]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <pwm_lld_serve_interrupt+0x9e>
      (pwmp->config->channels[3].callback != NULL))
 80064aa:	9b01      	ldr	r3, [sp, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <pwm_lld_serve_interrupt+0x9e>
    pwmp->config->channels[3].callback(pwmp);
 80064b4:	9b01      	ldr	r3, [sp, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	9801      	ldr	r0, [sp, #4]
 80064bc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80064be:	9b03      	ldr	r3, [sp, #12]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <pwm_lld_serve_interrupt+0xbc>
 80064c8:	9b01      	ldr	r3, [sp, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <pwm_lld_serve_interrupt+0xbc>
    pwmp->config->callback(pwmp);
 80064d2:	9b01      	ldr	r3, [sp, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	9801      	ldr	r0, [sp, #4]
 80064da:	4798      	blx	r3
}
 80064dc:	b005      	add	sp, #20
 80064de:	f85d fb04 	ldr.w	pc, [sp], #4
 80064e2:	bf00      	nop
	...

080064f0 <chSysLockFromISR.lto_priv.4>:
static inline void chSysLockFromISR(void) {
 80064f0:	b500      	push	{lr}
 80064f2:	b083      	sub	sp, #12
 80064f4:	2330      	movs	r3, #48	; 0x30
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	9b01      	ldr	r3, [sp, #4]
 80064fa:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock_from_isr();
 80064fe:	f000 ffbf 	bl	8007480 <__dbg_check_lock_from_isr>
}
 8006502:	b003      	add	sp, #12
 8006504:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006510 <chSysUnlockFromISR.lto_priv.4>:
static inline void chSysUnlockFromISR(void) {
 8006510:	b500      	push	{lr}
 8006512:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
 8006514:	f000 ffdc 	bl	80074d0 <__dbg_check_unlock_from_isr>
 8006518:	2300      	movs	r3, #0
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	9b01      	ldr	r3, [sp, #4]
 800651e:	f383 8811 	msr	BASEPRI, r3
}
 8006522:	b003      	add	sp, #12
 8006524:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006530 <osalSysLockFromISR.lto_priv.4>:
static inline void osalSysLockFromISR(void) {
 8006530:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8006532:	f7ff ffdd 	bl	80064f0 <chSysLockFromISR.lto_priv.4>
}
 8006536:	bd08      	pop	{r3, pc}
	...

08006540 <osalSysUnlockFromISR.lto_priv.4>:
static inline void osalSysUnlockFromISR(void) {
 8006540:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8006542:	f7ff ffe5 	bl	8006510 <chSysUnlockFromISR.lto_priv.4>
}
 8006546:	bd08      	pop	{r3, pc}
	...

08006550 <osalEventBroadcastFlagsI.lto_priv.3>:
                                            eventflags_t flags) {
 8006550:	b500      	push	{lr}
 8006552:	b083      	sub	sp, #12
 8006554:	9001      	str	r0, [sp, #4]
 8006556:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8006558:	9900      	ldr	r1, [sp, #0]
 800655a:	9801      	ldr	r0, [sp, #4]
 800655c:	f002 fb58 	bl	8008c10 <chEvtBroadcastFlagsI>
}
 8006560:	b003      	add	sp, #12
 8006562:	f85d fb04 	ldr.w	pc, [sp], #4
 8006566:	bf00      	nop
	...

08006570 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8006570:	b084      	sub	sp, #16
 8006572:	9001      	str	r0, [sp, #4]
 8006574:	9100      	str	r1, [sp, #0]
  uint32_t brr;
  USART_TypeDef *u = sdp->usart;
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657a:	9303      	str	r3, [sp, #12]

  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800657c:	9b01      	ldr	r3, [sp, #4]
 800657e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006580:	9b00      	ldr	r3, [sp, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	085b      	lsrs	r3, r3, #1
 8006586:	441a      	add	r2, r3
 8006588:	9b00      	ldr	r3, [sp, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	9302      	str	r3, [sp, #8]
    brr = ((brr & ~7) * 2) | (brr & 7);
#endif

  osalDbgAssert(brr < 0x10000, "invalid BRR value");

  u->BRR = brr;
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	9a02      	ldr	r2, [sp, #8]
 8006596:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8006598:	9b00      	ldr	r3, [sp, #0]
 800659a:	88db      	ldrh	r3, [r3, #6]
 800659c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80065a8:	9b00      	ldr	r3, [sp, #0]
 80065aa:	891b      	ldrh	r3, [r3, #8]
 80065ac:	f043 0301 	orr.w	r3, r3, #1
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80065b8:	9b00      	ldr	r3, [sp, #0]
 80065ba:	889b      	ldrh	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80065bc:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
 80065c0:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	461a      	mov	r2, r3
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	60da      	str	r2, [r3, #12]
                         USART_CR1_RE;
  u->SR = 0;
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	685b      	ldr	r3, [r3, #4]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 80065da:	9b00      	ldr	r3, [sp, #0]
 80065dc:	889b      	ldrh	r3, [r3, #4]
 80065de:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 80065e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e6:	d104      	bne.n	80065f2 <usart_init+0x82>
    sdp->rxmask = 0x7F;
 80065e8:	9b01      	ldr	r3, [sp, #4]
 80065ea:	227f      	movs	r2, #127	; 0x7f
 80065ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80065f0:	e003      	b.n	80065fa <usart_init+0x8a>
  }
  else {
    sdp->rxmask = 0xFF;
 80065f2:	9b01      	ldr	r3, [sp, #4]
 80065f4:	22ff      	movs	r2, #255	; 0xff
 80065f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }
}
 80065fa:	b004      	add	sp, #16
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 8006600:	b500      	push	{lr}
 8006602:	b085      	sub	sp, #20
 8006604:	9001      	str	r0, [sp, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	f8ad 3002 	strh.w	r3, [sp, #2]
  eventflags_t sts = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
 8006610:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <set_error+0x24>
    sts |= SD_OVERRUN_ERROR;
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006622:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
 8006624:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <set_error+0x38>
    sts |= SD_PARITY_ERROR;
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	f043 0320 	orr.w	r3, r3, #32
 8006636:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
 8006638:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <set_error+0x4c>
    sts |= SD_FRAMING_ERROR;
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800664a:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
 800664c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <set_error+0x60>
    sts |= SD_NOISE_ERROR;
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665e:	9303      	str	r3, [sp, #12]
  chnAddFlagsI(sdp, sts);
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	9903      	ldr	r1, [sp, #12]
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff ff72 	bl	8006550 <osalEventBroadcastFlagsI.lto_priv.3>
}
 800666c:	b005      	add	sp, #20
 800666e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006672:	bf00      	nop
	...

08006680 <notify3>:
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
}
#endif

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {
 8006680:	b082      	sub	sp, #8
 8006682:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8006684:	4b03      	ldr	r3, [pc, #12]	; (8006694 <notify3+0x14>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4a02      	ldr	r2, [pc, #8]	; (8006694 <notify3+0x14>)
 800668a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800668e:	60d3      	str	r3, [r2, #12]
}
 8006690:	b002      	add	sp, #8
 8006692:	4770      	bx	lr
 8006694:	40004800 	.word	0x40004800
	...

080066a0 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80066a0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80066a2:	f000 ff3d 	bl	8007520 <__dbg_check_enter_isr>

  sd_lld_serve_interrupt(&SD3);
 80066a6:	4804      	ldr	r0, [pc, #16]	; (80066b8 <VectorDC+0x18>)
 80066a8:	f000 f852 	bl	8006750 <sd_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80066ac:	f000 ff68 	bl	8007580 <__dbg_check_leave_isr>
 80066b0:	f002 fcf6 	bl	80090a0 <__port_irq_epilogue>
}
 80066b4:	bd08      	pop	{r3, pc}
 80066b6:	bf00      	nop
 80066b8:	20000e70 	.word	0x20000e70
 80066bc:	00000000 	.word	0x00000000

080066c0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 80066c0:	b508      	push	{r3, lr}
  nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
#endif
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 80066c2:	4a08      	ldr	r2, [pc, #32]	; (80066e4 <sd_lld_init+0x24>)
 80066c4:	2100      	movs	r1, #0
 80066c6:	4808      	ldr	r0, [pc, #32]	; (80066e8 <sd_lld_init+0x28>)
 80066c8:	f7fc fb9a 	bl	8002e00 <sdObjectInit>
  SD3.usart = USART3;
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <sd_lld_init+0x28>)
 80066ce:	4a07      	ldr	r2, [pc, #28]	; (80066ec <sd_lld_init+0x2c>)
 80066d0:	675a      	str	r2, [r3, #116]	; 0x74
  SD3.clock = STM32_PCLK1;
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <sd_lld_init+0x28>)
 80066d4:	4a06      	ldr	r2, [pc, #24]	; (80066f0 <sd_lld_init+0x30>)
 80066d6:	679a      	str	r2, [r3, #120]	; 0x78
#if !defined(STM32_USART3_SUPPRESS_ISR) && defined(STM32_USART3_NUMBER)
  nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
 80066d8:	210c      	movs	r1, #12
 80066da:	2027      	movs	r0, #39	; 0x27
 80066dc:	f7fe f9b0 	bl	8004a40 <nvicEnableVector>
  SD10.clock = STM32_PCLK2;
#if !defined(STM32_UART10_SUPPRESS_ISR) && defined(STM32_UART10_NUMBER)
  nvicEnableVector(STM32_UART10_NUMBER, STM32_SERIAL_UART10_PRIORITY);
#endif
#endif
}
 80066e0:	bd08      	pop	{r3, pc}
 80066e2:	bf00      	nop
 80066e4:	08006681 	.word	0x08006681
 80066e8:	20000e70 	.word	0x20000e70
 80066ec:	40004800 	.word	0x40004800
 80066f0:	016e3600 	.word	0x016e3600
	...

08006700 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8006700:	b500      	push	{lr}
 8006702:	b083      	sub	sp, #12
 8006704:	9001      	str	r0, [sp, #4]
 8006706:	9100      	str	r1, [sp, #0]

  if (config == NULL)
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <sd_lld_start+0x12>
    config = &default_config;
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <sd_lld_start+0x40>)
 8006710:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
 8006712:	9b01      	ldr	r3, [sp, #4]
 8006714:	7a1b      	ldrb	r3, [r3, #8]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d10b      	bne.n	8006732 <sd_lld_start+0x32>
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
 800671a:	9b01      	ldr	r3, [sp, #4]
 800671c:	4a09      	ldr	r2, [pc, #36]	; (8006744 <sd_lld_start+0x44>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d107      	bne.n	8006732 <sd_lld_start+0x32>
      rccEnableUSART3(true);
 8006722:	4b09      	ldr	r3, [pc, #36]	; (8006748 <sd_lld_start+0x48>)
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	4a08      	ldr	r2, [pc, #32]	; (8006748 <sd_lld_start+0x48>)
 8006728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800672c:	61d3      	str	r3, [r2, #28]
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <sd_lld_start+0x48>)
 8006730:	69db      	ldr	r3, [r3, #28]
    if (&SD10 == sdp) {
      rccEnableUART10(true);
    }
#endif
  }
  usart_init(sdp, config);
 8006732:	9900      	ldr	r1, [sp, #0]
 8006734:	9801      	ldr	r0, [sp, #4]
 8006736:	f7ff ff1b 	bl	8006570 <usart_init>
}
 800673a:	b003      	add	sp, #12
 800673c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006740:	0800a93c 	.word	0x0800a93c
 8006744:	20000e70 	.word	0x20000e70
 8006748:	40021000 	.word	0x40021000
 800674c:	00000000 	.word	0x00000000

08006750 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8006750:	b500      	push	{lr}
 8006752:	b087      	sub	sp, #28
 8006754:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 8006756:	9b01      	ldr	r3, [sp, #4]
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	9304      	str	r3, [sp, #16]
  uint16_t cr1;
  uint16_t sr = u->SR;
 800675c:	9b04      	ldr	r3, [sp, #16]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8006764:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00e      	beq.n	800678e <sd_lld_serve_interrupt+0x3e>
    osalSysLockFromISR();
 8006770:	f7ff fede 	bl	8006530 <osalSysLockFromISR.lto_priv.4>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	3304      	adds	r3, #4
 8006778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fee7 	bl	8006550 <osalEventBroadcastFlagsI.lto_priv.3>
    u->SR = ~USART_SR_LBD;
 8006782:	9b04      	ldr	r3, [sp, #16]
 8006784:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006788:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 800678a:	f7ff fed9 	bl	8006540 <osalSysUnlockFromISR.lto_priv.4>
  }

  /* Data available.*/
  osalSysLockFromISR();
 800678e:	f7ff fecf 	bl	8006530 <osalSysLockFromISR.lto_priv.4>
 8006792:	e024      	b.n	80067de <sd_lld_serve_interrupt+0x8e>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8006794:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <sd_lld_serve_interrupt+0x5c>
      set_error(sdp, sr);
 80067a0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80067a4:	4619      	mov	r1, r3
 80067a6:	9801      	ldr	r0, [sp, #4]
 80067a8:	f7ff ff2a 	bl	8006600 <set_error>
    b = (uint8_t)u->DR & sdp->rxmask;
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	9b01      	ldr	r3, [sp, #4]
 80067b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067b8:	4013      	ands	r3, r2
 80067ba:	f88d 300b 	strb.w	r3, [sp, #11]
    if (sr & USART_SR_RXNE)
 80067be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <sd_lld_serve_interrupt+0x86>
      sdIncomingDataI(sdp, b);
 80067ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80067ce:	4619      	mov	r1, r3
 80067d0:	9801      	ldr	r0, [sp, #4]
 80067d2:	f7fc fb75 	bl	8002ec0 <sdIncomingDataI>
    sr = u->SR;
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8ad 3014 	strh.w	r3, [sp, #20]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80067de:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80067e2:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1d4      	bne.n	8006794 <sd_lld_serve_interrupt+0x44>
  }
  osalSysUnlockFromISR();
 80067ea:	f7ff fea9 	bl	8006540 <osalSysUnlockFromISR.lto_priv.4>

  /* Caching CR1.*/
  cr1 = u->CR1;
 80067ee:	9b04      	ldr	r3, [sp, #16]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80067f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d022      	beq.n	8006848 <sd_lld_serve_interrupt+0xf8>
 8006802:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680a:	2b00      	cmp	r3, #0
 800680c:	d01c      	beq.n	8006848 <sd_lld_serve_interrupt+0xf8>
    msg_t b;
    osalSysLockFromISR();
 800680e:	f7ff fe8f 	bl	8006530 <osalSysLockFromISR.lto_priv.4>
    b = oqGetI(&sdp->oqueue);
 8006812:	9b01      	ldr	r3, [sp, #4]
 8006814:	3330      	adds	r3, #48	; 0x30
 8006816:	4618      	mov	r0, r3
 8006818:	f7fb fec2 	bl	80025a0 <oqGetI>
 800681c:	9003      	str	r0, [sp, #12]
    if (b < MSG_OK) {
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	da0c      	bge.n	800683e <sd_lld_serve_interrupt+0xee>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8006824:	9b01      	ldr	r3, [sp, #4]
 8006826:	3304      	adds	r3, #4
 8006828:	2108      	movs	r1, #8
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fe90 	bl	8006550 <osalEventBroadcastFlagsI.lto_priv.3>
      cr1 &= ~USART_CR1_TXEIE;
 8006830:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8006834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006838:	f8ad 3016 	strh.w	r3, [sp, #22]
 800683c:	e002      	b.n	8006844 <sd_lld_serve_interrupt+0xf4>
    }
    else
      u->DR = b;
 800683e:	9a03      	ldr	r2, [sp, #12]
 8006840:	9b04      	ldr	r3, [sp, #16]
 8006842:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 8006844:	f7ff fe7c 	bl	8006540 <osalSysUnlockFromISR.lto_priv.4>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8006848:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d027      	beq.n	80068a4 <sd_lld_serve_interrupt+0x154>
 8006854:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d021      	beq.n	80068a4 <sd_lld_serve_interrupt+0x154>
    osalSysLockFromISR();
 8006860:	f7ff fe66 	bl	8006530 <osalSysLockFromISR.lto_priv.4>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8006864:	9b01      	ldr	r3, [sp, #4]
 8006866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686c:	429a      	cmp	r2, r3
 800686e:	d105      	bne.n	800687c <sd_lld_serve_interrupt+0x12c>
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <sd_lld_serve_interrupt+0x12c>
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <sd_lld_serve_interrupt+0x12e>
 800687c:	2300      	movs	r3, #0
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00b      	beq.n	80068a0 <sd_lld_serve_interrupt+0x150>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8006888:	9b01      	ldr	r3, [sp, #4]
 800688a:	3304      	adds	r3, #4
 800688c:	2110      	movs	r1, #16
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fe5e 	bl	8006550 <osalEventBroadcastFlagsI.lto_priv.3>
      cr1 &= ~USART_CR1_TCIE;
 8006894:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8006898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689c:	f8ad 3016 	strh.w	r3, [sp, #22]
    }
    osalSysUnlockFromISR();
 80068a0:	f7ff fe4e 	bl	8006540 <osalSysUnlockFromISR.lto_priv.4>
  }

  /* Writing CR1 once.*/
  u->CR1 = cr1;
 80068a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80068a8:	9b04      	ldr	r3, [sp, #16]
 80068aa:	60da      	str	r2, [r3, #12]
}
 80068ac:	b007      	add	sp, #28
 80068ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80068b2:	bf00      	nop
	...

080068c0 <usb_pm_reset>:
/**
 * @brief   Resets the packet memory allocator.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void usb_pm_reset(USBDriver *usbp) {
 80068c0:	b082      	sub	sp, #8
 80068c2:	9001      	str	r0, [sp, #4]

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64U;
 80068c4:	9b01      	ldr	r3, [sp, #4]
 80068c6:	2240      	movs	r2, #64	; 0x40
 80068c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80068cc:	b002      	add	sp, #8
 80068ce:	4770      	bx	lr

080068d0 <usb_pm_alloc>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] size      size of the packet buffer to allocate
 * @return              The packet buffer address.
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
 80068d0:	b084      	sub	sp, #16
 80068d2:	9001      	str	r0, [sp, #4]
 80068d4:	9100      	str	r1, [sp, #0]
  uint32_t next;

  next = usbp->pmnext;
 80068d6:	9b01      	ldr	r3, [sp, #4]
 80068d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068dc:	9303      	str	r3, [sp, #12]
  usbp->pmnext += (size + 1U) & ~1U;
 80068de:	9b01      	ldr	r3, [sp, #4]
 80068e0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80068e4:	9b00      	ldr	r3, [sp, #0]
 80068e6:	3301      	adds	r3, #1
 80068e8:	f023 0301 	bic.w	r3, r3, #1
 80068ec:	441a      	add	r2, r3
 80068ee:	9b01      	ldr	r3, [sp, #4]
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");

  return next;
 80068f4:	9b03      	ldr	r3, [sp, #12]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	b004      	add	sp, #16
 80068fa:	4770      	bx	lr
 80068fc:	0000      	movs	r0, r0
	...

08006900 <usb_packet_read_to_buffer>:
 * @param[out] buf      buffer where to copy the packet data
 * @return              The size of the receivee packet.
 *
 * @notapi
 */
static size_t usb_packet_read_to_buffer(usbep_t ep, uint8_t *buf) {
 8006900:	b088      	sub	sp, #32
 8006902:	4603      	mov	r3, r0
 8006904:	9100      	str	r1, [sp, #0]
 8006906:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t i, n;
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800690a:	4b1f      	ldr	r3, [pc, #124]	; (8006988 <usb_packet_read_to_buffer+0x88>)
 800690c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800690e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	4413      	add	r3, r2
 8006916:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800691a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800691e:	9305      	str	r3, [sp, #20]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8006920:	9b05      	ldr	r3, [sp, #20]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006928:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	9306      	str	r3, [sp, #24]
  if (EPR_EP_TYPE_IS_ISO(epr) && ((epr & EPR_DTOG_RX) != 0U))
    n = (size_t)udp->RXCOUNT1 & RXCOUNT_COUNT_MASK;
  else
    n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
#else
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8006930:	9b05      	ldr	r3, [sp, #20]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006938:	9304      	str	r3, [sp, #16]
#endif

  i = n;
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	9307      	str	r3, [sp, #28]
 800693e:	e014      	b.n	800696a <usb_packet_read_to_buffer+0x6a>
    pmap += 8U;
  }
#endif /* STM32_USB_USE_FAST_COPY */

  while (i >= 2U) {
    uint32_t w = *pmap++;
 8006940:	9b06      	ldr	r3, [sp, #24]
 8006942:	1d1a      	adds	r2, r3, #4
 8006944:	9206      	str	r2, [sp, #24]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	9303      	str	r3, [sp, #12]
    *buf++ = (uint8_t)w;
 800694a:	9b00      	ldr	r3, [sp, #0]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	9200      	str	r2, [sp, #0]
 8006950:	9a03      	ldr	r2, [sp, #12]
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
    *buf++ = (uint8_t)(w >> 8);
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	0a19      	lsrs	r1, r3, #8
 800695a:	9b00      	ldr	r3, [sp, #0]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	9200      	str	r2, [sp, #0]
 8006960:	b2ca      	uxtb	r2, r1
 8006962:	701a      	strb	r2, [r3, #0]
    i -= 2U;
 8006964:	9b07      	ldr	r3, [sp, #28]
 8006966:	3b02      	subs	r3, #2
 8006968:	9307      	str	r3, [sp, #28]
  while (i >= 2U) {
 800696a:	9b07      	ldr	r3, [sp, #28]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d8e7      	bhi.n	8006940 <usb_packet_read_to_buffer+0x40>
  }

  if (i >= 1U) {
 8006970:	9b07      	ldr	r3, [sp, #28]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d004      	beq.n	8006980 <usb_packet_read_to_buffer+0x80>
    *buf = (uint8_t)*pmap;
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	9b00      	ldr	r3, [sp, #0]
 800697e:	701a      	strb	r2, [r3, #0]
  }

  return n;
 8006980:	9b04      	ldr	r3, [sp, #16]
}
 8006982:	4618      	mov	r0, r3
 8006984:	b008      	add	sp, #32
 8006986:	4770      	bx	lr
 8006988:	40005c00 	.word	0x40005c00
 800698c:	00000000 	.word	0x00000000

08006990 <usb_packet_write_from_buffer>:
 *
 * @notapi
 */
static void usb_packet_write_from_buffer(usbep_t ep,
                                         const uint8_t *buf,
                                         size_t n) {
 8006990:	b088      	sub	sp, #32
 8006992:	4603      	mov	r3, r0
 8006994:	9102      	str	r1, [sp, #8]
 8006996:	9201      	str	r2, [sp, #4]
 8006998:	f88d 300f 	strb.w	r3, [sp, #15]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800699c:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <usb_packet_write_from_buffer+0x74>)
 800699e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	4413      	add	r3, r2
 80069a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069ac:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80069b0:	9305      	str	r3, [sp, #20]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80069b2:	9b05      	ldr	r3, [sp, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80069ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	9307      	str	r3, [sp, #28]
  int i = (int)n;
 80069c2:	9b01      	ldr	r3, [sp, #4]
 80069c4:	9306      	str	r3, [sp, #24]
  if (EPR_EP_TYPE_IS_ISO(epr) && (epr & EPR_DTOG_TX))
    udp->TXCOUNT1 = (stm32_usb_pma_t)n;
  else
    udp->TXCOUNT0 = (stm32_usb_pma_t)n;
#else
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80069c6:	9b05      	ldr	r3, [sp, #20]
 80069c8:	9a01      	ldr	r2, [sp, #4]
 80069ca:	605a      	str	r2, [r3, #4]
 80069cc:	e015      	b.n	80069fa <usb_packet_write_from_buffer+0x6a>
#endif /* STM32_USB_USE_FAST_COPY */

  while (i > 0) {
    uint32_t w;

    w  = *buf++;
 80069ce:	9b02      	ldr	r3, [sp, #8]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	9202      	str	r2, [sp, #8]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	9304      	str	r3, [sp, #16]
    w |= *buf++ << 8;
 80069d8:	9b02      	ldr	r3, [sp, #8]
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	9202      	str	r2, [sp, #8]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	461a      	mov	r2, r3
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	9304      	str	r3, [sp, #16]
    *pmap++ = (stm32_usb_pma_t)w;
 80069ea:	9b07      	ldr	r3, [sp, #28]
 80069ec:	1d1a      	adds	r2, r3, #4
 80069ee:	9207      	str	r2, [sp, #28]
 80069f0:	9a04      	ldr	r2, [sp, #16]
 80069f2:	601a      	str	r2, [r3, #0]
    i -= 2;
 80069f4:	9b06      	ldr	r3, [sp, #24]
 80069f6:	3b02      	subs	r3, #2
 80069f8:	9306      	str	r3, [sp, #24]
  while (i > 0) {
 80069fa:	9b06      	ldr	r3, [sp, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	dce6      	bgt.n	80069ce <usb_packet_write_from_buffer+0x3e>
  }
}
 8006a00:	b008      	add	sp, #32
 8006a02:	4770      	bx	lr
 8006a04:	40005c00 	.word	0x40005c00
	...

08006a10 <usb_serve_endpoints>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] istr      ISTR register value to consider
 *
 * @notapi
 */
static void usb_serve_endpoints(USBDriver *usbp, uint32_t istr) {
 8006a10:	b500      	push	{lr}
 8006a12:	b089      	sub	sp, #36	; 0x24
 8006a14:	9001      	str	r0, [sp, #4]
 8006a16:	9100      	str	r1, [sp, #0]
  size_t n;
  uint32_t ep = istr & ISTR_EP_ID_MASK;
 8006a18:	9b00      	ldr	r3, [sp, #0]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	9306      	str	r3, [sp, #24]
  uint32_t epr = STM32_USB->EPR[ep];
 8006a20:	4a86      	ldr	r2, [pc, #536]	; (8006c3c <usb_serve_endpoints+0x22c>)
 8006a22:	9b06      	ldr	r3, [sp, #24]
 8006a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a28:	9305      	str	r3, [sp, #20]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8006a2a:	9a01      	ldr	r2, [sp, #4]
 8006a2c:	9b06      	ldr	r3, [sp, #24]
 8006a2e:	3302      	adds	r3, #2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	9304      	str	r3, [sp, #16]

  if ((istr & ISTR_DIR) == 0U) {
 8006a38:	9b00      	ldr	r3, [sp, #0]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d174      	bne.n	8006b2c <usb_serve_endpoints+0x11c>
    /* IN endpoint, transmission.*/
    USBInEndpointState *isp = epcp->in_state;
 8006a42:	9b04      	ldr	r3, [sp, #16]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	9302      	str	r3, [sp, #8]

    EPR_CLEAR_CTR_TX(ep);
 8006a48:	4a7c      	ldr	r2, [pc, #496]	; (8006c3c <usb_serve_endpoints+0x22c>)
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a50:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8006a54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a58:	4978      	ldr	r1, [pc, #480]	; (8006c3c <usb_serve_endpoints+0x22c>)
 8006a5a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006a5e:	9b06      	ldr	r3, [sp, #24]
 8006a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    isp->txcnt += isp->txlast;
 8006a64:	9b02      	ldr	r3, [sp, #8]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	441a      	add	r2, r3
 8006a6e:	9b02      	ldr	r3, [sp, #8]
 8006a70:	605a      	str	r2, [r3, #4]
    n = isp->txsize - isp->txcnt;
 8006a72:	9b02      	ldr	r3, [sp, #8]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	9b02      	ldr	r3, [sp, #8]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	9307      	str	r3, [sp, #28]
    if (n > 0U) {
 8006a7e:	9b07      	ldr	r3, [sp, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02d      	beq.n	8006ae0 <usb_serve_endpoints+0xd0>
      /* Transfer not completed, there are more packets to send.*/
      if (n > epcp->in_maxsize)
 8006a84:	9b04      	ldr	r3, [sp, #16]
 8006a86:	8a1b      	ldrh	r3, [r3, #16]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	9b07      	ldr	r3, [sp, #28]
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d902      	bls.n	8006a96 <usb_serve_endpoints+0x86>
        n = epcp->in_maxsize;
 8006a90:	9b04      	ldr	r3, [sp, #16]
 8006a92:	8a1b      	ldrh	r3, [r3, #16]
 8006a94:	9307      	str	r3, [sp, #28]

      /* Writes the packet from the defined buffer.*/
      isp->txbuf += isp->txlast;
 8006a96:	9b02      	ldr	r3, [sp, #8]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	9b02      	ldr	r3, [sp, #8]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	441a      	add	r2, r3
 8006aa0:	9b02      	ldr	r3, [sp, #8]
 8006aa2:	609a      	str	r2, [r3, #8]
      isp->txlast = n;
 8006aa4:	9b02      	ldr	r3, [sp, #8]
 8006aa6:	9a07      	ldr	r2, [sp, #28]
 8006aa8:	60da      	str	r2, [r3, #12]
      usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8006aaa:	9b06      	ldr	r3, [sp, #24]
 8006aac:	b2d8      	uxtb	r0, r3
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	9a07      	ldr	r2, [sp, #28]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f7ff ff6b 	bl	8006990 <usb_packet_write_from_buffer>

      /* Starting IN operation.*/
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8006aba:	4a60      	ldr	r2, [pc, #384]	; (8006c3c <usb_serve_endpoints+0x22c>)
 8006abc:	9b06      	ldr	r3, [sp, #24]
 8006abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aca:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006ace:	495b      	ldr	r1, [pc, #364]	; (8006c3c <usb_serve_endpoints+0x22c>)
 8006ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad8:	9a06      	ldr	r2, [sp, #24]
 8006ada:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006ade:	e0aa      	b.n	8006c36 <usb_serve_endpoints+0x226>
    }
    else {
      /* Transfer completed, invokes the callback.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8006ae0:	9b01      	ldr	r3, [sp, #4]
 8006ae2:	891b      	ldrh	r3, [r3, #8]
 8006ae4:	b21a      	sxth	r2, r3
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	9b06      	ldr	r3, [sp, #24]
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	b21b      	sxth	r3, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	b21b      	sxth	r3, r3
 8006af4:	4013      	ands	r3, r2
 8006af6:	b21b      	sxth	r3, r3
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	811a      	strh	r2, [r3, #8]
 8006afe:	9a01      	ldr	r2, [sp, #4]
 8006b00:	9b06      	ldr	r3, [sp, #24]
 8006b02:	3302      	adds	r3, #2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8092 	beq.w	8006c36 <usb_serve_endpoints+0x226>
 8006b12:	9a01      	ldr	r2, [sp, #4]
 8006b14:	9b06      	ldr	r3, [sp, #24]
 8006b16:	3302      	adds	r3, #2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	9a06      	ldr	r2, [sp, #24]
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	4611      	mov	r1, r2
 8006b26:	9801      	ldr	r0, [sp, #4]
 8006b28:	4798      	blx	r3
 8006b2a:	e084      	b.n	8006c36 <usb_serve_endpoints+0x226>
    }
  }
  else {
    /* OUT endpoint, receive.*/

    EPR_CLEAR_CTR_RX(ep);
 8006b2c:	4a43      	ldr	r2, [pc, #268]	; (8006c3c <usb_serve_endpoints+0x22c>)
 8006b2e:	9b06      	ldr	r3, [sp, #24]
 8006b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b34:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8006b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b3c:	493f      	ldr	r1, [pc, #252]	; (8006c3c <usb_serve_endpoints+0x22c>)
 8006b3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b42:	9b06      	ldr	r3, [sp, #24]
 8006b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (epr & EPR_SETUP) {
 8006b48:	9b05      	ldr	r3, [sp, #20]
 8006b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00c      	beq.n	8006b6c <usb_serve_endpoints+0x15c>
      /* Setup packets handling, setup packets are handled using a
         specific callback.*/
      _usb_isr_invoke_setup_cb(usbp, ep);
 8006b52:	9a01      	ldr	r2, [sp, #4]
 8006b54:	9b06      	ldr	r3, [sp, #24]
 8006b56:	3302      	adds	r3, #2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	9a06      	ldr	r2, [sp, #24]
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	4611      	mov	r1, r2
 8006b66:	9801      	ldr	r0, [sp, #4]
 8006b68:	4798      	blx	r3
 8006b6a:	e064      	b.n	8006c36 <usb_serve_endpoints+0x226>
    }
    else {
      USBOutEndpointState *osp = epcp->out_state;
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	9303      	str	r3, [sp, #12]

      /* Reads the packet into the defined buffer.*/
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8006b72:	9b06      	ldr	r3, [sp, #24]
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f7ff febf 	bl	8006900 <usb_packet_read_to_buffer>
 8006b82:	9007      	str	r0, [sp, #28]
      osp->rxbuf += n;
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	9b07      	ldr	r3, [sp, #28]
 8006b8a:	441a      	add	r2, r3
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	609a      	str	r2, [r3, #8]

      /* Transaction data updated.*/
      osp->rxcnt  += n;
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	441a      	add	r2, r3
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	605a      	str	r2, [r3, #4]
      osp->rxsize -= n;
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	9b07      	ldr	r3, [sp, #28]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	9b03      	ldr	r3, [sp, #12]
 8006ba6:	601a      	str	r2, [r3, #0]
      osp->rxpkts -= 1U;
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	899b      	ldrh	r3, [r3, #12]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	819a      	strh	r2, [r3, #12]

      /* The transaction is completed if the specified number of packets
         has been received or the current packet is a short packet.*/
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	8a5b      	ldrh	r3, [r3, #18]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	9b07      	ldr	r3, [sp, #28]
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d303      	bcc.n	8006bc8 <usb_serve_endpoints+0x1b8>
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	899b      	ldrh	r3, [r3, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d124      	bne.n	8006c12 <usb_serve_endpoints+0x202>
        /* Transfer complete, invokes the callback.*/
        _usb_isr_invoke_out_cb(usbp, ep);
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	895b      	ldrh	r3, [r3, #10]
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	2101      	movs	r1, #1
 8006bd0:	9b06      	ldr	r3, [sp, #24]
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	b21b      	sxth	r3, r3
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	b21b      	sxth	r3, r3
 8006bdc:	4013      	ands	r3, r2
 8006bde:	b21b      	sxth	r3, r3
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	9b01      	ldr	r3, [sp, #4]
 8006be4:	815a      	strh	r2, [r3, #10]
 8006be6:	9a01      	ldr	r2, [sp, #4]
 8006be8:	9b06      	ldr	r3, [sp, #24]
 8006bea:	3302      	adds	r3, #2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01e      	beq.n	8006c36 <usb_serve_endpoints+0x226>
 8006bf8:	9a01      	ldr	r2, [sp, #4]
 8006bfa:	9b06      	ldr	r3, [sp, #24]
 8006bfc:	3302      	adds	r3, #2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	9a06      	ldr	r2, [sp, #24]
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	9801      	ldr	r0, [sp, #4]
 8006c0e:	4798      	blx	r3
 8006c10:	e011      	b.n	8006c36 <usb_serve_endpoints+0x226>
      }
      else {
        /* Transfer not complete, there are more packets to receive.*/
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8006c12:	4a0a      	ldr	r2, [pc, #40]	; (8006c3c <usb_serve_endpoints+0x22c>)
 8006c14:	9b06      	ldr	r3, [sp, #24]
 8006c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c1a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c22:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006c26:	4905      	ldr	r1, [pc, #20]	; (8006c3c <usb_serve_endpoints+0x22c>)
 8006c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c30:	9a06      	ldr	r2, [sp, #24]
 8006c32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      }
    }
  }
}
 8006c36:	b009      	add	sp, #36	; 0x24
 8006c38:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c3c:	40005c00 	.word	0x40005c00

08006c40 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8006c40:	b500      	push	{lr}
 8006c42:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;
 8006c44:	4b2c      	ldr	r3, [pc, #176]	; (8006cf8 <Vector90+0xb8>)
 8006c46:	9302      	str	r3, [sp, #8]

  OSAL_IRQ_PROLOGUE();
 8006c48:	f000 fc6a 	bl	8007520 <__dbg_check_enter_isr>

  /* Reading interrupt sources and atomically clearing them.*/
  istr = STM32_USB->ISTR;
 8006c4c:	4b2b      	ldr	r3, [pc, #172]	; (8006cfc <Vector90+0xbc>)
 8006c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c50:	9303      	str	r3, [sp, #12]
  STM32_USB->ISTR = ~istr;
 8006c52:	4a2a      	ldr	r2, [pc, #168]	; (8006cfc <Vector90+0xbc>)
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	43db      	mvns	r3, r3
 8006c58:	6453      	str	r3, [r2, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if ((istr & ISTR_RESET) != 0U) {
 8006c5a:	9b03      	ldr	r3, [sp, #12]
 8006c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <Vector90+0x2a>
    _usb_reset(usbp);
 8006c64:	9802      	ldr	r0, [sp, #8]
 8006c66:	f7fd f9bb 	bl	8003fe0 <_usb_reset>
  }

  /* USB bus SUSPEND condition handling.*/
  if ((istr & ISTR_SUSP) != 0U) {
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <Vector90+0x46>
    STM32_USB->CNTR |= CNTR_FSUSP;
 8006c74:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <Vector90+0xbc>)
 8006c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c78:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <Vector90+0xbc>)
 8006c7a:	f043 0308 	orr.w	r3, r3, #8
 8006c7e:	6413      	str	r3, [r2, #64]	; 0x40
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    _usb_suspend(usbp);
 8006c80:	9802      	ldr	r0, [sp, #8]
 8006c82:	f7fd f9ed 	bl	8004060 <_usb_suspend>
  }

  /* USB bus WAKEUP condition handling.*/
  if ((istr & ISTR_WKUP) != 0U) {
 8006c86:	9b03      	ldr	r3, [sp, #12]
 8006c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d010      	beq.n	8006cb2 <Vector90+0x72>
    uint32_t fnr = STM32_USB->FNR;
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <Vector90+0xbc>)
 8006c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c94:	9301      	str	r3, [sp, #4]
    if ((fnr & FNR_RXDP) == 0U) {
 8006c96:	9b01      	ldr	r3, [sp, #4]
 8006c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d108      	bne.n	8006cb2 <Vector90+0x72>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8006ca0:	4b16      	ldr	r3, [pc, #88]	; (8006cfc <Vector90+0xbc>)
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <Vector90+0xbc>)
 8006ca6:	f023 0308 	bic.w	r3, r3, #8
 8006caa:	6413      	str	r3, [r2, #64]	; 0x40
      _usb_wakeup(usbp);
 8006cac:	9802      	ldr	r0, [sp, #8]
 8006cae:	f7fd f9ff 	bl	80040b0 <_usb_wakeup>
    }
#endif
  }

  /* SOF handling.*/
  if ((istr & ISTR_SOF) != 0U) {
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d011      	beq.n	8006ce0 <Vector90+0xa0>
    _usb_isr_invoke_sof_cb(usbp);
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00c      	beq.n	8006ce0 <Vector90+0xa0>
 8006cc6:	9b02      	ldr	r3, [sp, #8]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	9802      	ldr	r0, [sp, #8]
 8006cce:	4798      	blx	r3
 8006cd0:	e006      	b.n	8006ce0 <Vector90+0xa0>
    /* CHTODO */
  }

  /* Endpoint events handling.*/
  while ((istr & ISTR_CTR) != 0U) {
    usb_serve_endpoints(usbp, istr);
 8006cd2:	9903      	ldr	r1, [sp, #12]
 8006cd4:	9802      	ldr	r0, [sp, #8]
 8006cd6:	f7ff fe9b 	bl	8006a10 <usb_serve_endpoints>
    istr = STM32_USB->ISTR;
 8006cda:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <Vector90+0xbc>)
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	9303      	str	r3, [sp, #12]
  while ((istr & ISTR_CTR) != 0U) {
 8006ce0:	9b03      	ldr	r3, [sp, #12]
 8006ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f3      	bne.n	8006cd2 <Vector90+0x92>
  }

  OSAL_IRQ_EPILOGUE();
 8006cea:	f000 fc49 	bl	8007580 <__dbg_check_leave_isr>
 8006cee:	f002 f9d7 	bl	80090a0 <__port_irq_epilogue>
}
 8006cf2:	b005      	add	sp, #20
 8006cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cf8:	20000ef0 	.word	0x20000ef0
 8006cfc:	40005c00 	.word	0x40005c00

08006d00 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 8006d00:	b508      	push	{r3, lr}

  /* Driver initialization.*/
  usbObjectInit(&USBD1);
 8006d02:	4802      	ldr	r0, [pc, #8]	; (8006d0c <usb_lld_init+0xc>)
 8006d04:	f7fc ffec 	bl	8003ce0 <usbObjectInit>
}
 8006d08:	bd08      	pop	{r3, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000ef0 	.word	0x20000ef0

08006d10 <usb_lld_start>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 8006d10:	b500      	push	{lr}
 8006d12:	b083      	sub	sp, #12
 8006d14:	9001      	str	r0, [sp, #4]

  if (usbp->state == USB_STOP) {
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d12a      	bne.n	8006d74 <usb_lld_start+0x64>
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
 8006d1e:	9b01      	ldr	r3, [sp, #4]
 8006d20:	4a16      	ldr	r2, [pc, #88]	; (8006d7c <usb_lld_start+0x6c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d123      	bne.n	8006d6e <usb_lld_start+0x5e>
      osalDbgAssert((STM32_USBCLK >= (48000000U - STM32_USB_48MHZ_DELTA)) &&
                    (STM32_USBCLK <= (48000000U + STM32_USB_48MHZ_DELTA)),
                    "invalid clock frequency");

      /* USB clock enabled.*/
      rccEnableUSB(true);
 8006d26:	4b16      	ldr	r3, [pc, #88]	; (8006d80 <usb_lld_start+0x70>)
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <usb_lld_start+0x70>)
 8006d2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d30:	61d3      	str	r3, [r2, #28]
 8006d32:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <usb_lld_start+0x70>)
 8006d34:	69db      	ldr	r3, [r3, #28]
      rccResetUSB();
 8006d36:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <usb_lld_start+0x70>)
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	4a11      	ldr	r2, [pc, #68]	; (8006d80 <usb_lld_start+0x70>)
 8006d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d40:	6113      	str	r3, [r2, #16]
 8006d42:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <usb_lld_start+0x70>)
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	4a0e      	ldr	r2, [pc, #56]	; (8006d80 <usb_lld_start+0x70>)
 8006d48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d4c:	6113      	str	r3, [r2, #16]
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <usb_lld_start+0x70>)
 8006d50:	691b      	ldr	r3, [r3, #16]

      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8006d52:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <usb_lld_start+0x74>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enabling the USB IRQ vectors, this also gives enough time to allow
         the transceiver power up (1uS).*/
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
 8006d58:	210d      	movs	r1, #13
 8006d5a:	2013      	movs	r0, #19
 8006d5c:	f7fd fe70 	bl	8004a40 <nvicEnableVector>
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
 8006d60:	210e      	movs	r1, #14
 8006d62:	2014      	movs	r0, #20
 8006d64:	f7fd fe6c 	bl	8004a40 <nvicEnableVector>

      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0U;
 8006d68:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <usb_lld_start+0x74>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
#endif
    /* Reset procedure enforced on driver start.*/
    usb_lld_reset(usbp);
 8006d6e:	9801      	ldr	r0, [sp, #4]
 8006d70:	f000 f80e 	bl	8006d90 <usb_lld_reset>
  }
}
 8006d74:	b003      	add	sp, #12
 8006d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d7a:	bf00      	nop
 8006d7c:	20000ef0 	.word	0x20000ef0
 8006d80:	40021000 	.word	0x40021000
 8006d84:	40005c00 	.word	0x40005c00
	...

08006d90 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8006d90:	b500      	push	{lr}
 8006d92:	b085      	sub	sp, #20
 8006d94:	9001      	str	r0, [sp, #4]
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = BTABLE_ADDR;
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <usb_lld_reset+0x50>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	651a      	str	r2, [r3, #80]	; 0x50
  STM32_USB->ISTR   = 0U;
 8006d9c:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <usb_lld_reset+0x50>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	645a      	str	r2, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8006da2:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <usb_lld_reset+0x50>)
 8006da4:	2280      	movs	r2, #128	; 0x80
 8006da6:	64da      	str	r2, [r3, #76]	; 0x4c
  cntr              = /* CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
 8006da8:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 8006dac:	9303      	str	r3, [sp, #12]
                      CNTR_WKUPM | CNTR_ERRM |/* CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8006dae:	9b01      	ldr	r3, [sp, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <usb_lld_reset+0x30>
    cntr |= CNTR_SOFM;
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dbe:	9303      	str	r3, [sp, #12]
  STM32_USB->CNTR = cntr;
 8006dc0:	4a07      	ldr	r2, [pc, #28]	; (8006de0 <usb_lld_reset+0x50>)
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);
 8006dc6:	9801      	ldr	r0, [sp, #4]
 8006dc8:	f7ff fd7a 	bl	80068c0 <usb_pm_reset>

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8006dcc:	9b01      	ldr	r3, [sp, #4]
 8006dce:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <usb_lld_reset+0x54>)
 8006dd0:	60da      	str	r2, [r3, #12]
  usb_lld_init_endpoint(usbp, 0U);
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	9801      	ldr	r0, [sp, #4]
 8006dd6:	f000 f81b 	bl	8006e10 <usb_lld_init_endpoint>
}
 8006dda:	b005      	add	sp, #20
 8006ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006de0:	40005c00 	.word	0x40005c00
 8006de4:	0800a948 	.word	0x0800a948
	...

08006df0 <usb_lld_set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
 8006df0:	b082      	sub	sp, #8
 8006df2:	9001      	str	r0, [sp, #4]

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 8006df4:	9b01      	ldr	r3, [sp, #4]
 8006df6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8006dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	4b01      	ldr	r3, [pc, #4]	; (8006e08 <usb_lld_set_address+0x18>)
 8006e02:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006e04:	b002      	add	sp, #8
 8006e06:	4770      	bx	lr
 8006e08:	40005c00 	.word	0x40005c00
 8006e0c:	00000000 	.word	0x00000000

08006e10 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8006e10:	b500      	push	{lr}
 8006e12:	b087      	sub	sp, #28
 8006e14:	9001      	str	r0, [sp, #4]
 8006e16:	460b      	mov	r3, r1
 8006e18:	f88d 3003 	strb.w	r3, [sp, #3]
  uint16_t epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8006e1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006e20:	9a01      	ldr	r2, [sp, #4]
 8006e22:	3302      	adds	r3, #2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	9304      	str	r3, [sp, #16]

  /* Setting the endpoint type. Note that isochronous endpoints cannot be
     bidirectional because it uses double buffering and both transmit and
     receive descriptor fields are used for either direction.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0303 	and.w	r3, r3, #3
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d009      	beq.n	8006e4c <usb_lld_init_endpoint+0x3c>
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d80c      	bhi.n	8006e56 <usb_lld_init_endpoint+0x46>
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d001      	beq.n	8006e44 <usb_lld_init_endpoint+0x34>
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d108      	bne.n	8006e56 <usb_lld_init_endpoint+0x46>
#else
    osalDbgAssert(false, "isochronous support disabled");
#endif
    /* Falls through.*/
  case USB_EP_MODE_TYPE_BULK:
    epr = EPR_EP_TYPE_BULK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e4a:	e008      	b.n	8006e5e <usb_lld_init_endpoint+0x4e>
    break;
  case USB_EP_MODE_TYPE_INTR:
    epr = EPR_EP_TYPE_INTERRUPT;
 8006e4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006e50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e54:	e003      	b.n	8006e5e <usb_lld_init_endpoint+0x4e>
    break;
  default:
    epr = EPR_EP_TYPE_CONTROL;
 8006e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e5a:	f8ad 3016 	strh.w	r3, [sp, #22]
  }

  dp = USB_GET_DESCRIPTOR(ep);
 8006e5e:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <usb_lld_init_endpoint+0x12c>)
 8006e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e62:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	4413      	add	r3, r2
 8006e6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e6e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006e72:	9303      	str	r3, [sp, #12]

  /* IN endpoint handling.*/
  if (epcp->in_state != NULL) {
 8006e74:	9b04      	ldr	r3, [sp, #16]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <usb_lld_init_endpoint+0x90>
    dp->TXCOUNT0 = 0U;
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	605a      	str	r2, [r3, #4]
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8006e82:	9b04      	ldr	r3, [sp, #16]
 8006e84:	8a1b      	ldrh	r3, [r3, #16]
 8006e86:	4619      	mov	r1, r3
 8006e88:	9801      	ldr	r0, [sp, #4]
 8006e8a:	f7ff fd21 	bl	80068d0 <usb_pm_alloc>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	9b03      	ldr	r3, [sp, #12]
 8006e92:	601a      	str	r2, [r3, #0]
    }
    else {
      epr |= EPR_STAT_TX_NAK;
    }
#else
    epr |= EPR_STAT_TX_NAK;
 8006e94:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8006e98:	f043 0320 	orr.w	r3, r3, #32
 8006e9c:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
  }

  /* OUT endpoint handling.*/
  if (epcp->out_state != NULL) {
 8006ea0:	9b04      	ldr	r3, [sp, #16]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d031      	beq.n	8006f0c <usb_lld_init_endpoint+0xfc>
    uint16_t nblocks;

    /* Endpoint size and address initialization.*/
    if (epcp->out_maxsize > 62) {
 8006ea8:	9b04      	ldr	r3, [sp, #16]
 8006eaa:	8a5b      	ldrh	r3, [r3, #18]
 8006eac:	2b3e      	cmp	r3, #62	; 0x3e
 8006eae:	d90f      	bls.n	8006ed0 <usb_lld_init_endpoint+0xc0>
      nblocks = (((((uint32_t)epcp->out_maxsize - 1U) | 0x1FU) / 32U) << 10) |
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	8a5b      	ldrh	r3, [r3, #18]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	f043 031f 	orr.w	r3, r3, #31
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	029b      	lsls	r3, r3, #10
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eca:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ece:	e00a      	b.n	8006ee6 <usb_lld_init_endpoint+0xd6>
                0x8000U;
    }
    else {
      nblocks = ((((uint32_t)(epcp->out_maxsize - 1U) | 1U) + 1U) / 2U) << 10;
 8006ed0:	9b04      	ldr	r3, [sp, #16]
 8006ed2:	8a5b      	ldrh	r3, [r3, #18]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	3301      	adds	r3, #1
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	029b      	lsls	r3, r3, #10
 8006ee2:	f8ad 3014 	strh.w	r3, [sp, #20]
    }
    dp->RXCOUNT0 = nblocks;
 8006ee6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	60da      	str	r2, [r3, #12]
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	8a5b      	ldrh	r3, [r3, #18]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	9801      	ldr	r0, [sp, #4]
 8006ef6:	f7ff fceb 	bl	80068d0 <usb_pm_alloc>
 8006efa:	4602      	mov	r2, r0
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	609a      	str	r2, [r3, #8]
    }
    else {
      epr |= EPR_STAT_RX_NAK;
    }
#else
    epr |= EPR_STAT_RX_NAK;
 8006f00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8006f04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f08:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
  }

  /* CHEPxR register cleared and initialized.*/
  STM32_USB->EPR[ep] = STM32_USB->EPR[ep];
 8006f0c:	480b      	ldr	r0, [pc, #44]	; (8006f3c <usb_lld_init_endpoint+0x12c>)
 8006f0e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8006f12:	490a      	ldr	r1, [pc, #40]	; (8006f3c <usb_lld_init_endpoint+0x12c>)
 8006f14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f18:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  STM32_USB->EPR[ep] = epr | ep;
 8006f20:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8006f24:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f28:	ea42 0103 	orr.w	r1, r2, r3
 8006f2c:	4a03      	ldr	r2, [pc, #12]	; (8006f3c <usb_lld_init_endpoint+0x12c>)
 8006f2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8006f36:	b007      	add	sp, #28
 8006f38:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f3c:	40005c00 	.word	0x40005c00

08006f40 <usb_lld_disable_endpoints>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_disable_endpoints(USBDriver *usbp) {
 8006f40:	b500      	push	{lr}
 8006f42:	b085      	sub	sp, #20
 8006f44:	9001      	str	r0, [sp, #4]
  unsigned i;

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);
 8006f46:	9801      	ldr	r0, [sp, #4]
 8006f48:	f7ff fcba 	bl	80068c0 <usb_pm_reset>

  /* Disabling all endpoints.*/
  for (i = 1; i <= USB_ENDPOINTS_NUMBER; i++) {
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	9303      	str	r3, [sp, #12]
 8006f50:	e00f      	b.n	8006f72 <usb_lld_disable_endpoints+0x32>

    /* Clearing all toggle bits then zeroing the rest.*/
    STM32_USB->EPR[i] = STM32_USB->EPR[i];
 8006f52:	4a0b      	ldr	r2, [pc, #44]	; (8006f80 <usb_lld_disable_endpoints+0x40>)
 8006f54:	490a      	ldr	r1, [pc, #40]	; (8006f80 <usb_lld_disable_endpoints+0x40>)
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f5c:	9b03      	ldr	r3, [sp, #12]
 8006f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    STM32_USB->EPR[i] = 0U;
 8006f62:	4a07      	ldr	r2, [pc, #28]	; (8006f80 <usb_lld_disable_endpoints+0x40>)
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	2100      	movs	r1, #0
 8006f68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 1; i <= USB_ENDPOINTS_NUMBER; i++) {
 8006f6c:	9b03      	ldr	r3, [sp, #12]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	9303      	str	r3, [sp, #12]
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	2b07      	cmp	r3, #7
 8006f76:	d9ec      	bls.n	8006f52 <usb_lld_disable_endpoints+0x12>
  }
}
 8006f78:	b005      	add	sp, #20
 8006f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f7e:	bf00      	nop
 8006f80:	40005c00 	.word	0x40005c00
	...

08006f90 <usb_lld_get_status_out>:
 * @retval EP_STATUS_STALLED  The endpoint is stalled.
 * @retval EP_STATUS_ACTIVE   The endpoint is active.
 *
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
 8006f90:	b082      	sub	sp, #8
 8006f92:	9001      	str	r0, [sp, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8006f9a:	4a0a      	ldr	r2, [pc, #40]	; (8006fc4 <usb_lld_get_status_out+0x34>)
 8006f9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <usb_lld_get_status_out+0x24>
 8006fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb0:	d002      	beq.n	8006fb8 <usb_lld_get_status_out+0x28>
 8006fb2:	e003      	b.n	8006fbc <usb_lld_get_status_out+0x2c>
  case EPR_STAT_RX_DIS:
    return EP_STATUS_DISABLED;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e002      	b.n	8006fbe <usb_lld_get_status_out+0x2e>
  case EPR_STAT_RX_STALL:
    return EP_STATUS_STALLED;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <usb_lld_get_status_out+0x2e>
  default:
    return EP_STATUS_ACTIVE;
 8006fbc:	2302      	movs	r3, #2
  }
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	b002      	add	sp, #8
 8006fc2:	4770      	bx	lr
 8006fc4:	40005c00 	.word	0x40005c00
	...

08006fd0 <usb_lld_get_status_in>:
 * @retval EP_STATUS_STALLED  The endpoint is stalled.
 * @retval EP_STATUS_ACTIVE   The endpoint is active.
 *
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	9001      	str	r0, [sp, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8006fda:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <usb_lld_get_status_in+0x34>)
 8006fdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <usb_lld_get_status_in+0x22>
 8006fec:	2b10      	cmp	r3, #16
 8006fee:	d002      	beq.n	8006ff6 <usb_lld_get_status_in+0x26>
 8006ff0:	e003      	b.n	8006ffa <usb_lld_get_status_in+0x2a>
  case EPR_STAT_TX_DIS:
    return EP_STATUS_DISABLED;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e002      	b.n	8006ffc <usb_lld_get_status_in+0x2c>
  case EPR_STAT_TX_STALL:
    return EP_STATUS_STALLED;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <usb_lld_get_status_in+0x2c>
  default:
    return EP_STATUS_ACTIVE;
 8006ffa:	2302      	movs	r3, #2
  }
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	b002      	add	sp, #8
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40005c00 	.word	0x40005c00
	...

08007010 <usb_lld_read_setup>:
 * @param[in] ep        endpoint number
 * @param[out] buf      buffer where to copy the packet data
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {
 8007010:	b088      	sub	sp, #32
 8007012:	9003      	str	r0, [sp, #12]
 8007014:	460b      	mov	r3, r1
 8007016:	9201      	str	r2, [sp, #4]
 8007018:	f88d 300b 	strb.w	r3, [sp, #11]
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;

  udp = USB_GET_DESCRIPTOR(ep);
 800701c:	4b13      	ldr	r3, [pc, #76]	; (800706c <usb_lld_read_setup+0x5c>)
 800701e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007020:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	4413      	add	r3, r2
 8007028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800702c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8007030:	9305      	str	r3, [sp, #20]
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8007032:	9b05      	ldr	r3, [sp, #20]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800703a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	9307      	str	r3, [sp, #28]
  for (n = 0; n < 4; n++) {
 8007042:	2300      	movs	r3, #0
 8007044:	9306      	str	r3, [sp, #24]
 8007046:	e00c      	b.n	8007062 <usb_lld_read_setup+0x52>
    *(uint16_t *)(void *)buf = (uint16_t)*pmap++;
 8007048:	9b07      	ldr	r3, [sp, #28]
 800704a:	1d1a      	adds	r2, r3, #4
 800704c:	9207      	str	r2, [sp, #28]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	b29a      	uxth	r2, r3
 8007052:	9b01      	ldr	r3, [sp, #4]
 8007054:	801a      	strh	r2, [r3, #0]
    buf += 2;
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	3302      	adds	r3, #2
 800705a:	9301      	str	r3, [sp, #4]
  for (n = 0; n < 4; n++) {
 800705c:	9b06      	ldr	r3, [sp, #24]
 800705e:	3301      	adds	r3, #1
 8007060:	9306      	str	r3, [sp, #24]
 8007062:	9b06      	ldr	r3, [sp, #24]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d9ef      	bls.n	8007048 <usb_lld_read_setup+0x38>
  }
}
 8007068:	b008      	add	sp, #32
 800706a:	4770      	bx	lr
 800706c:	40005c00 	.word	0x40005c00

08007070 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8007070:	b084      	sub	sp, #16
 8007072:	9001      	str	r0, [sp, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	f88d 3003 	strb.w	r3, [sp, #3]
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800707a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800707e:	9a01      	ldr	r2, [sp, #4]
 8007080:	3302      	adds	r3, #2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	9303      	str	r3, [sp, #12]

  /* Transfer initialization.*/
  if (osp->rxsize == 0U) {       /* Special case for zero sized packets.*/
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <usb_lld_start_out+0x2c>
    osp->rxpkts = 1U;
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	819a      	strh	r2, [r3, #12]
 800709a:	e018      	b.n	80070ce <usb_lld_start_out+0x5e>
  }
  else {
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800709c:	9b03      	ldr	r3, [sp, #12]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070a4:	9901      	ldr	r1, [sp, #4]
 80070a6:	3302      	adds	r3, #2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	8a5b      	ldrh	r3, [r3, #18]
 80070b0:	4413      	add	r3, r2
 80070b2:	1e5a      	subs	r2, r3, #1
                             usbp->epc[ep]->out_maxsize);
 80070b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070b8:	9901      	ldr	r1, [sp, #4]
 80070ba:	3302      	adds	r3, #2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	8a5b      	ldrh	r3, [r3, #18]
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	9b03      	ldr	r3, [sp, #12]
 80070cc:	819a      	strh	r2, [r3, #12]
  }

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80070ce:	4a0b      	ldr	r2, [pc, #44]	; (80070fc <usb_lld_start_out+0x8c>)
 80070d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80070dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80070e4:	4905      	ldr	r1, [pc, #20]	; (80070fc <usb_lld_start_out+0x8c>)
 80070e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80070ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80070f6:	b004      	add	sp, #16
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40005c00 	.word	0x40005c00

08007100 <usb_lld_start_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8007100:	b500      	push	{lr}
 8007102:	b085      	sub	sp, #20
 8007104:	9001      	str	r0, [sp, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	f88d 3003 	strb.w	r3, [sp, #3]
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800710c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007110:	9a01      	ldr	r2, [sp, #4]
 8007112:	3302      	adds	r3, #2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	9302      	str	r3, [sp, #8]

  /* Transfer initialization.*/
  n = isp->txsize;
 800711e:	9b02      	ldr	r3, [sp, #8]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	9303      	str	r3, [sp, #12]
  if (n > (size_t)usbp->epc[ep]->in_maxsize) {
 8007124:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007128:	9a01      	ldr	r2, [sp, #4]
 800712a:	3302      	adds	r3, #2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	8a1b      	ldrh	r3, [r3, #16]
 8007134:	461a      	mov	r2, r3
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	4293      	cmp	r3, r2
 800713a:	d908      	bls.n	800714e <usb_lld_start_in+0x4e>
    n = (size_t)usbp->epc[ep]->in_maxsize;
 800713c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007140:	9a01      	ldr	r2, [sp, #4]
 8007142:	3302      	adds	r3, #2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	8a1b      	ldrh	r3, [r3, #16]
 800714c:	9303      	str	r3, [sp, #12]
  }

  isp->txlast = n;
 800714e:	9b02      	ldr	r3, [sp, #8]
 8007150:	9a03      	ldr	r2, [sp, #12]
 8007152:	60da      	str	r2, [r3, #12]
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8007154:	9b02      	ldr	r3, [sp, #8]
 8007156:	6899      	ldr	r1, [r3, #8]
 8007158:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800715c:	9a03      	ldr	r2, [sp, #12]
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff fc16 	bl	8006990 <usb_packet_write_from_buffer>

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8007164:	4a0b      	ldr	r2, [pc, #44]	; (8007194 <usb_lld_start_in+0x94>)
 8007166:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800716a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800716e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8007172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007176:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800717a:	4906      	ldr	r1, [pc, #24]	; (8007194 <usb_lld_start_in+0x94>)
 800717c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007188:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 800718c:	b005      	add	sp, #20
 800718e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007192:	bf00      	nop
 8007194:	40005c00 	.word	0x40005c00
	...

080071a0 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 80071a0:	b082      	sub	sp, #8
 80071a2:	9001      	str	r0, [sp, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80071aa:	4a0b      	ldr	r2, [pc, #44]	; (80071d8 <usb_lld_stall_out+0x38>)
 80071ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80071b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071c0:	4905      	ldr	r1, [pc, #20]	; (80071d8 <usb_lld_stall_out+0x38>)
 80071c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80071c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80071d2:	b002      	add	sp, #8
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40005c00 	.word	0x40005c00
 80071dc:	00000000 	.word	0x00000000

080071e0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 80071e0:	b082      	sub	sp, #8
 80071e2:	9001      	str	r0, [sp, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80071ea:	4a0b      	ldr	r2, [pc, #44]	; (8007218 <usb_lld_stall_in+0x38>)
 80071ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80071f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fc:	f083 0310 	eor.w	r3, r3, #16
 8007200:	4905      	ldr	r1, [pc, #20]	; (8007218 <usb_lld_stall_in+0x38>)
 8007202:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8007212:	b002      	add	sp, #8
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40005c00 	.word	0x40005c00
 800721c:	00000000 	.word	0x00000000

08007220 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8007220:	b082      	sub	sp, #8
 8007222:	9001      	str	r0, [sp, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID) {
 800722a:	4a10      	ldr	r2, [pc, #64]	; (800726c <usb_lld_clear_out+0x4c>)
 800722c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007234:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007238:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800723c:	d013      	beq.n	8007266 <usb_lld_clear_out+0x46>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 800723e:	4a0b      	ldr	r2, [pc, #44]	; (800726c <usb_lld_clear_out+0x4c>)
 8007240:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007248:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800724c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007250:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007254:	4905      	ldr	r1, [pc, #20]	; (800726c <usb_lld_clear_out+0x4c>)
 8007256:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800725a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007262:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  }
}
 8007266:	b002      	add	sp, #8
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40005c00 	.word	0x40005c00

08007270 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8007270:	b082      	sub	sp, #8
 8007272:	9001      	str	r0, [sp, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID) {
 800727a:	4a0f      	ldr	r2, [pc, #60]	; (80072b8 <usb_lld_clear_in+0x48>)
 800727c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007284:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007288:	2b30      	cmp	r3, #48	; 0x30
 800728a:	d013      	beq.n	80072b4 <usb_lld_clear_in+0x44>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 800728c:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <usb_lld_clear_in+0x48>)
 800728e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007296:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800729a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800729e:	f083 0320 	eor.w	r3, r3, #32
 80072a2:	4905      	ldr	r1, [pc, #20]	; (80072b8 <usb_lld_clear_in+0x48>)
 80072a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80072a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  }
}
 80072b4:	b002      	add	sp, #8
 80072b6:	4770      	bx	lr
 80072b8:	40005c00 	.word	0x40005c00
 80072bc:	00000000 	.word	0x00000000

080072c0 <__early_init>:
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 80072c0:	b508      	push	{r3, lr}

  stm32_clock_init();
 80072c2:	f7fd fc9d 	bl	8004c00 <stm32_clock_init>
}
 80072c6:	bd08      	pop	{r3, pc}
	...

080072d0 <boardInit>:

/*
 * Board-specific initialization code.
 */
void boardInit(void) {
}
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
	...

080072e0 <__tm_calibration_object_init>:
 *
 * @param[out] tcp      pointer to a @p tm_calibration_t object
 *
 * @notapi
 */
static inline void __tm_calibration_object_init(tm_calibration_t *tcp) {
 80072e0:	b500      	push	{lr}
 80072e2:	b08b      	sub	sp, #44	; 0x2c
 80072e4:	9001      	str	r0, [sp, #4]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 80072e6:	9b01      	ldr	r3, [sp, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
  chTMObjectInit(&tm);
 80072ec:	ab02      	add	r3, sp, #8
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 fa46 	bl	8008780 <chTMObjectInit>
  i = TM_CALIBRATION_LOOP;
 80072f4:	2304      	movs	r3, #4
 80072f6:	9309      	str	r3, [sp, #36]	; 0x24
  do {
    chTMStartMeasurementX(&tm);
 80072f8:	ab02      	add	r3, sp, #8
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 fa58 	bl	80087b0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8007300:	ab02      	add	r3, sp, #8
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fa64 	bl	80087d0 <chTMStopMeasurementX>
    i--;
 8007308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800730a:	3b01      	subs	r3, #1
 800730c:	9309      	str	r3, [sp, #36]	; 0x24
  } while (i > 0U);
 800730e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1f1      	bne.n	80072f8 <__tm_calibration_object_init+0x18>
  tcp->offset = tm.best;
 8007314:	9a02      	ldr	r2, [sp, #8]
 8007316:	9b01      	ldr	r3, [sp, #4]
 8007318:	601a      	str	r2, [r3, #0]
}
 800731a:	b00b      	add	sp, #44	; 0x2c
 800731c:	f85d fb04 	ldr.w	pc, [sp], #4

08007320 <chSysUnlock.lto_priv.9>:
static inline void chSysUnlock(void) {
 8007320:	b500      	push	{lr}
 8007322:	b083      	sub	sp, #12
  __dbg_check_unlock();
 8007324:	f000 f884 	bl	8007430 <__dbg_check_unlock>
 8007328:	2300      	movs	r3, #0
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	9b01      	ldr	r3, [sp, #4]
 800732e:	f383 8811 	msr	BASEPRI, r3
}
 8007332:	b003      	add	sp, #12
 8007334:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007340 <__oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void __oslib_init(void) {
 8007340:	b508      	push	{r3, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  __core_init();
 8007342:	f001 fcbd 	bl	8008cc0 <__core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  __heap_init();
 8007346:	f001 fd43 	bl	8008dd0 <__heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  __factory_init();
 800734a:	f001 fde1 	bl	8008f10 <__factory_init>
#endif
}
 800734e:	bd08      	pop	{r3, pc}

08007350 <chSysInit>:
 *          interrupts are enabled.
 * @post    the system is in @p ch_sys_running state.
 *
 * @special
 */
void chSysInit(void) {
 8007350:	b500      	push	{lr}
 8007352:	b083      	sub	sp, #12
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 8007354:	4b11      	ldr	r3, [pc, #68]	; (800739c <chSysInit+0x4c>)
 8007356:	2201      	movs	r2, #1
 8007358:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 800735a:	2300      	movs	r3, #0
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	e008      	b.n	8007372 <chSysInit+0x22>
    ch_system.instances[i] = NULL;
 8007360:	4a0e      	ldr	r2, [pc, #56]	; (800739c <chSysInit+0x4c>)
 8007362:	9b01      	ldr	r3, [sp, #4]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	2200      	movs	r2, #0
 800736a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	3301      	adds	r3, #1
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	9b01      	ldr	r3, [sp, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0f3      	beq.n	8007360 <chSysInit+0x10>
  }

#if CH_CFG_USE_TM == TRUE
  /* Time Measurement calibration.*/
  __tm_calibration_object_init(&ch_system.tmc);
 8007378:	4809      	ldr	r0, [pc, #36]	; (80073a0 <chSysInit+0x50>)
 800737a:	f7ff ffb1 	bl	80072e0 <__tm_calibration_object_init>

  /* User system initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* OS library modules.*/
  __oslib_init();
 800737e:	f7ff ffdf 	bl	8007340 <__oslib_init>

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);
 8007382:	4908      	ldr	r1, [pc, #32]	; (80073a4 <chSysInit+0x54>)
 8007384:	4808      	ldr	r0, [pc, #32]	; (80073a8 <chSysInit+0x58>)
 8007386:	f000 fdc3 	bl	8007f10 <chInstanceObjectInit>

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 800738a:	4b04      	ldr	r3, [pc, #16]	; (800739c <chSysInit+0x4c>)
 800738c:	2202      	movs	r2, #2
 800738e:	701a      	strb	r2, [r3, #0]
  chSysUnlock();
 8007390:	f7ff ffc6 	bl	8007320 <chSysUnlock.lto_priv.9>
}
 8007394:	b003      	add	sp, #12
 8007396:	f85d fb04 	ldr.w	pc, [sp], #4
 800739a:	bf00      	nop
 800739c:	20000f90 	.word	0x20000f90
 80073a0:	20000f98 	.word	0x20000f98
 80073a4:	0800a9ac 	.word	0x0800a9ac
 80073a8:	20000fa0 	.word	0x20000fa0
 80073ac:	00000000 	.word	0x00000000

080073b0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 80073b0:	b082      	sub	sp, #8
 80073b2:	9001      	str	r0, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80073b4:	b672      	cpsid	i

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 80073b6:	4a04      	ldr	r2, [pc, #16]	; (80073c8 <chSysHalt+0x18>)
 80073b8:	9b01      	ldr	r3, [sp, #4]
 80073ba:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 80073be:	4b03      	ldr	r3, [pc, #12]	; (80073cc <chSysHalt+0x1c>)
 80073c0:	2203      	movs	r2, #3
 80073c2:	701a      	strb	r2, [r3, #0]
 80073c4:	e7fe      	b.n	80073c4 <chSysHalt+0x14>
 80073c6:	bf00      	nop
 80073c8:	20000fa0 	.word	0x20000fa0
 80073cc:	20000f90 	.word	0x20000f90

080073d0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80073d0:	b508      	push	{r3, lr}
#if (CH_CFG_TIME_QUANTUM > 0) || (CH_DBG_THREADS_PROFILING == TRUE)
  thread_t *currtp = chThdGetSelfX();
#endif

  chDbgCheckClassI();
 80073d2:	f000 f90d 	bl	80075f0 <chDbgCheckClassI>
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
 80073d6:	f000 fa5b 	bl	8007890 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 80073da:	bd08      	pop	{r3, pc}
 80073dc:	0000      	movs	r0, r0
	...

080073e0 <__dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void __dbg_check_lock(void) {
 80073e0:	b500      	push	{lr}
 80073e2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <__dbg_check_lock+0x44>)
 80073e6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80073e8:	9b01      	ldr	r3, [sp, #4]
 80073ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	bf14      	ite	ne
 80073f2:	2301      	movne	r3, #1
 80073f4:	2300      	moveq	r3, #0
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <__dbg_check_lock+0x30>
 80073fc:	9b01      	ldr	r3, [sp, #4]
 80073fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007402:	2b00      	cmp	r3, #0
 8007404:	bf14      	ite	ne
 8007406:	2301      	movne	r3, #1
 8007408:	2300      	moveq	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <__dbg_check_lock+0x36>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#4");
 8007410:	4805      	ldr	r0, [pc, #20]	; (8007428 <__dbg_check_lock+0x48>)
 8007412:	f7ff ffcd 	bl	80073b0 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 8007416:	9b01      	ldr	r3, [sp, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 800741e:	b003      	add	sp, #12
 8007420:	f85d fb04 	ldr.w	pc, [sp], #4
 8007424:	20000fa0 	.word	0x20000fa0
 8007428:	0800a9c0 	.word	0x0800a9c0
 800742c:	00000000 	.word	0x00000000

08007430 <__dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void __dbg_check_unlock(void) {
 8007430:	b500      	push	{lr}
 8007432:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8007434:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <__dbg_check_unlock+0x44>)
 8007436:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8007438:	9b01      	ldr	r3, [sp, #4]
 800743a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800743e:	2b00      	cmp	r3, #0
 8007440:	bf14      	ite	ne
 8007442:	2301      	movne	r3, #1
 8007444:	2300      	moveq	r3, #0
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <__dbg_check_unlock+0x30>
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007452:	2b00      	cmp	r3, #0
 8007454:	bfd4      	ite	le
 8007456:	2301      	movle	r3, #1
 8007458:	2300      	movgt	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <__dbg_check_unlock+0x36>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#5");
 8007460:	4805      	ldr	r0, [pc, #20]	; (8007478 <__dbg_check_unlock+0x48>)
 8007462:	f7ff ffa5 	bl	80073b0 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 800746e:	b003      	add	sp, #12
 8007470:	f85d fb04 	ldr.w	pc, [sp], #4
 8007474:	20000fa0 	.word	0x20000fa0
 8007478:	0800a9c8 	.word	0x0800a9c8
 800747c:	00000000 	.word	0x00000000

08007480 <__dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
 8007480:	b500      	push	{lr}
 8007482:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8007484:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <__dbg_check_lock_from_isr+0x44>)
 8007486:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800748e:	2b00      	cmp	r3, #0
 8007490:	bfd4      	ite	le
 8007492:	2301      	movle	r3, #1
 8007494:	2300      	movgt	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d109      	bne.n	80074b0 <__dbg_check_lock_from_isr+0x30>
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bf14      	ite	ne
 80074a6:	2301      	movne	r3, #1
 80074a8:	2300      	moveq	r3, #0
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <__dbg_check_lock_from_isr+0x36>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
 80074b0:	4805      	ldr	r0, [pc, #20]	; (80074c8 <__dbg_check_lock_from_isr+0x48>)
 80074b2:	f7ff ff7d 	bl	80073b0 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 80074be:	b003      	add	sp, #12
 80074c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80074c4:	20000fa0 	.word	0x20000fa0
 80074c8:	0800a9d0 	.word	0x0800a9d0
 80074cc:	00000000 	.word	0x00000000

080074d0 <__dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void __dbg_check_unlock_from_isr(void) {
 80074d0:	b500      	push	{lr}
 80074d2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <__dbg_check_unlock_from_isr+0x44>)
 80074d6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80074d8:	9b01      	ldr	r3, [sp, #4]
 80074da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bfd4      	ite	le
 80074e2:	2301      	movle	r3, #1
 80074e4:	2300      	movgt	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <__dbg_check_unlock_from_isr+0x30>
 80074ec:	9b01      	ldr	r3, [sp, #4]
 80074ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bfd4      	ite	le
 80074f6:	2301      	movle	r3, #1
 80074f8:	2300      	movgt	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <__dbg_check_unlock_from_isr+0x36>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
 8007500:	4805      	ldr	r0, [pc, #20]	; (8007518 <__dbg_check_unlock_from_isr+0x48>)
 8007502:	f7ff ff55 	bl	80073b0 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 8007506:	9b01      	ldr	r3, [sp, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 800750e:	b003      	add	sp, #12
 8007510:	f85d fb04 	ldr.w	pc, [sp], #4
 8007514:	20000fa0 	.word	0x20000fa0
 8007518:	0800a9d8 	.word	0x0800a9d8
 800751c:	00000000 	.word	0x00000000

08007520 <__dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void __dbg_check_enter_isr(void) {
 8007520:	b500      	push	{lr}
 8007522:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8007524:	4b14      	ldr	r3, [pc, #80]	; (8007578 <__dbg_check_enter_isr+0x58>)
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	2330      	movs	r3, #48	; 0x30
 800752a:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800752c:	9b02      	ldr	r3, [sp, #8]
 800752e:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8007532:	9b03      	ldr	r3, [sp, #12]
 8007534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007538:	0fdb      	lsrs	r3, r3, #31
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d109      	bne.n	8007554 <__dbg_check_enter_isr+0x34>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007546:	2b00      	cmp	r3, #0
 8007548:	bf14      	ite	ne
 800754a:	2301      	movne	r3, #1
 800754c:	2300      	moveq	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <__dbg_check_enter_isr+0x3a>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#8");
 8007554:	4809      	ldr	r0, [pc, #36]	; (800757c <__dbg_check_enter_isr+0x5c>)
 8007556:	f7ff ff2b 	bl	80073b0 <chSysHalt>
  }
  oip->dbg.isr_cnt++;
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007568:	2300      	movs	r3, #0
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	9b01      	ldr	r3, [sp, #4]
 800756e:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 8007572:	b005      	add	sp, #20
 8007574:	f85d fb04 	ldr.w	pc, [sp], #4
 8007578:	20000fa0 	.word	0x20000fa0
 800757c:	0800a9e0 	.word	0x0800a9e0

08007580 <__dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void __dbg_check_leave_isr(void) {
 8007580:	b500      	push	{lr}
 8007582:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8007584:	4b16      	ldr	r3, [pc, #88]	; (80075e0 <__dbg_check_leave_isr+0x60>)
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	2330      	movs	r3, #48	; 0x30
 800758a:	9302      	str	r3, [sp, #8]
 800758c:	9b02      	ldr	r3, [sp, #8]
 800758e:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007598:	2b00      	cmp	r3, #0
 800759a:	bfd4      	ite	le
 800759c:	2301      	movle	r3, #1
 800759e:	2300      	movgt	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <__dbg_check_leave_isr+0x3a>
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf14      	ite	ne
 80075b0:	2301      	movne	r3, #1
 80075b2:	2300      	moveq	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <__dbg_check_leave_isr+0x40>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#9");
 80075ba:	480a      	ldr	r0, [pc, #40]	; (80075e4 <__dbg_check_leave_isr+0x64>)
 80075bc:	f7ff fef8 	bl	80073b0 <chSysHalt>
  }
  oip->dbg.isr_cnt--;
 80075c0:	9b03      	ldr	r3, [sp, #12]
 80075c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075c6:	1e5a      	subs	r2, r3, #1
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80075ce:	2300      	movs	r3, #0
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	9b01      	ldr	r3, [sp, #4]
 80075d4:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 80075d8:	b005      	add	sp, #20
 80075da:	f85d fb04 	ldr.w	pc, [sp], #4
 80075de:	bf00      	nop
 80075e0:	20000fa0 	.word	0x20000fa0
 80075e4:	0800a9e8 	.word	0x0800a9e8
	...

080075f0 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 80075f0:	b500      	push	{lr}
 80075f2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <chDbgCheckClassI+0x38>)
 80075f6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80075f8:	9b01      	ldr	r3, [sp, #4]
 80075fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075fe:	0fdb      	lsrs	r3, r3, #31
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <chDbgCheckClassI+0x2a>
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800760c:	2b00      	cmp	r3, #0
 800760e:	bfd4      	ite	le
 8007610:	2301      	movle	r3, #1
 8007612:	2300      	movgt	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <chDbgCheckClassI+0x30>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
 800761a:	4804      	ldr	r0, [pc, #16]	; (800762c <chDbgCheckClassI+0x3c>)
 800761c:	f7ff fec8 	bl	80073b0 <chSysHalt>
  }
}
 8007620:	b003      	add	sp, #12
 8007622:	f85d fb04 	ldr.w	pc, [sp], #4
 8007626:	bf00      	nop
 8007628:	20000fa0 	.word	0x20000fa0
 800762c:	0800a9f0 	.word	0x0800a9f0

08007630 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8007630:	b500      	push	{lr}
 8007632:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8007634:	4b0d      	ldr	r3, [pc, #52]	; (800766c <chDbgCheckClassS+0x3c>)
 8007636:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800763e:	2b00      	cmp	r3, #0
 8007640:	bf14      	ite	ne
 8007642:	2301      	movne	r3, #1
 8007644:	2300      	moveq	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <chDbgCheckClassS+0x30>
 800764c:	9b01      	ldr	r3, [sp, #4]
 800764e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007652:	2b00      	cmp	r3, #0
 8007654:	bfd4      	ite	le
 8007656:	2301      	movle	r3, #1
 8007658:	2300      	movgt	r3, #0
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <chDbgCheckClassS+0x36>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
 8007660:	4803      	ldr	r0, [pc, #12]	; (8007670 <chDbgCheckClassS+0x40>)
 8007662:	f7ff fea5 	bl	80073b0 <chSysHalt>
  }
}
 8007666:	b003      	add	sp, #12
 8007668:	f85d fb04 	ldr.w	pc, [sp], #4
 800766c:	20000fa0 	.word	0x20000fa0
 8007670:	0800a9f8 	.word	0x0800a9f8
	...

08007680 <ch_dlist_notempty>:
 * @param[in] dlhp      pointer to the delta list header
 * @return              The status of the delta list.
 *
 * @notapi
 */
static inline bool ch_dlist_notempty(ch_delta_list_t *dlhp) {
 8007680:	b082      	sub	sp, #8
 8007682:	9001      	str	r0, [sp, #4]

  return (bool)(dlhp != dlhp->next);
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	9a01      	ldr	r2, [sp, #4]
 800768a:	429a      	cmp	r2, r3
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
}
 8007694:	4618      	mov	r0, r3
 8007696:	b002      	add	sp, #8
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	0000      	movs	r0, r0
	...

080076a0 <ch_dlist_insert_before>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {
 80076a0:	b084      	sub	sp, #16
 80076a2:	9003      	str	r0, [sp, #12]
 80076a4:	9102      	str	r1, [sp, #8]
 80076a6:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 80076a8:	9b02      	ldr	r3, [sp, #8]
 80076aa:	9a01      	ldr	r2, [sp, #4]
 80076ac:	609a      	str	r2, [r3, #8]
  dlp->next       = dlhp;
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	9a03      	ldr	r2, [sp, #12]
 80076b2:	601a      	str	r2, [r3, #0]
  dlp->prev       = dlp->next->prev;
 80076b4:	9b02      	ldr	r3, [sp, #8]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	9b02      	ldr	r3, [sp, #8]
 80076bc:	605a      	str	r2, [r3, #4]
  dlp->prev->next = dlp;
 80076be:	9b02      	ldr	r3, [sp, #8]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	9a02      	ldr	r2, [sp, #8]
 80076c4:	601a      	str	r2, [r3, #0]
  dlhp->prev      = dlp;
 80076c6:	9b03      	ldr	r3, [sp, #12]
 80076c8:	9a02      	ldr	r2, [sp, #8]
 80076ca:	605a      	str	r2, [r3, #4]
}
 80076cc:	b004      	add	sp, #16
 80076ce:	4770      	bx	lr

080076d0 <ch_dlist_insert>:
 *
 * @notapi
 */
static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
                                   ch_delta_list_t *dlep,
                                   sysinterval_t delta) {
 80076d0:	b500      	push	{lr}
 80076d2:	b087      	sub	sp, #28
 80076d4:	9003      	str	r0, [sp, #12]
 80076d6:	9102      	str	r1, [sp, #8]
 80076d8:	9201      	str	r2, [sp, #4]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	9305      	str	r3, [sp, #20]
 80076e0:	e007      	b.n	80076f2 <ch_dlist_insert+0x22>
  while (likely(dlp->delta < delta)) {
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
 80076e2:	9b05      	ldr	r3, [sp, #20]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	9a01      	ldr	r2, [sp, #4]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	9301      	str	r3, [sp, #4]
    dlp = dlp->next;
 80076ec:	9b05      	ldr	r3, [sp, #20]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 80076f2:	9b05      	ldr	r3, [sp, #20]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	9a01      	ldr	r2, [sp, #4]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	bf8c      	ite	hi
 80076fc:	2301      	movhi	r3, #1
 80076fe:	2300      	movls	r3, #0
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1ed      	bne.n	80076e2 <ch_dlist_insert+0x12>
  }

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);
 8007706:	9a01      	ldr	r2, [sp, #4]
 8007708:	9902      	ldr	r1, [sp, #8]
 800770a:	9805      	ldr	r0, [sp, #20]
 800770c:	f7ff ffc8 	bl	80076a0 <ch_dlist_insert_before>

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8007710:	9b05      	ldr	r3, [sp, #20]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	9b05      	ldr	r3, [sp, #20]
 800771a:	609a      	str	r2, [r3, #8]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007722:	609a      	str	r2, [r3, #8]
}
 8007724:	b007      	add	sp, #28
 8007726:	f85d fb04 	ldr.w	pc, [sp], #4
 800772a:	bf00      	nop
 800772c:	0000      	movs	r0, r0
	...

08007730 <ch_dlist_dequeue>:
 *
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
 8007730:	b082      	sub	sp, #8
 8007732:	9001      	str	r0, [sp, #4]

  dlp->prev->next = dlp->next;
 8007734:	9b01      	ldr	r3, [sp, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	9a01      	ldr	r2, [sp, #4]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp->prev;
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	9a01      	ldr	r2, [sp, #4]
 8007744:	6852      	ldr	r2, [r2, #4]
 8007746:	605a      	str	r2, [r3, #4]

  return dlp;
 8007748:	9b01      	ldr	r3, [sp, #4]
}
 800774a:	4618      	mov	r0, r3
 800774c:	b002      	add	sp, #8
 800774e:	4770      	bx	lr

08007750 <chSysLockFromISR.lto_priv.6>:
static inline void chSysLockFromISR(void) {
 8007750:	b500      	push	{lr}
 8007752:	b083      	sub	sp, #12
 8007754:	2330      	movs	r3, #48	; 0x30
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	9b01      	ldr	r3, [sp, #4]
 800775a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock_from_isr();
 800775e:	f7ff fe8f 	bl	8007480 <__dbg_check_lock_from_isr>
}
 8007762:	b003      	add	sp, #12
 8007764:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007770 <chSysUnlockFromISR.lto_priv.6>:
static inline void chSysUnlockFromISR(void) {
 8007770:	b500      	push	{lr}
 8007772:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
 8007774:	f7ff feac 	bl	80074d0 <__dbg_check_unlock_from_isr>
 8007778:	2300      	movs	r3, #0
 800777a:	9301      	str	r3, [sp, #4]
 800777c:	9b01      	ldr	r3, [sp, #4]
 800777e:	f383 8811 	msr	BASEPRI, r3
}
 8007782:	b003      	add	sp, #12
 8007784:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007790 <vt_enqueue>:
 * @param[in] vtp       pointer to a @p virtual_timer_t object
 * @param[in] delay     delay over current system time
 */
static void vt_enqueue(virtual_timers_list_t *vtlp,
                       virtual_timer_t *vtp,
                       sysinterval_t delay) {
 8007790:	b500      	push	{lr}
 8007792:	b087      	sub	sp, #28
 8007794:	9003      	str	r0, [sp, #12]
 8007796:	9102      	str	r1, [sp, #8]
 8007798:	9201      	str	r2, [sp, #4]
    }
  }
#else /* CH_CFG_ST_TIMEDELTA == 0 */

  /* Delta is initially equal to the specified delay.*/
  delta = delay;
 800779a:	9b01      	ldr	r3, [sp, #4]
 800779c:	9305      	str	r3, [sp, #20]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	9902      	ldr	r1, [sp, #8]
 80077a2:	9a05      	ldr	r2, [sp, #20]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff ff93 	bl	80076d0 <ch_dlist_insert>
}
 80077aa:	b007      	add	sp, #28
 80077ac:	f85d fb04 	ldr.w	pc, [sp], #4

080077b0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 80077b0:	b500      	push	{lr}
 80077b2:	b087      	sub	sp, #28
 80077b4:	9003      	str	r0, [sp, #12]
 80077b6:	9102      	str	r1, [sp, #8]
 80077b8:	9201      	str	r2, [sp, #4]
 80077ba:	9300      	str	r3, [sp, #0]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 80077bc:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <chVTDoSetI+0x78>)
 80077be:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
 80077c0:	f7ff ff16 	bl	80075f0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bf0c      	ite	eq
 80077ca:	2301      	moveq	r3, #1
 80077cc:	2300      	movne	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <chVTDoSetI+0x34>
 80077d4:	9b01      	ldr	r3, [sp, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	bf0c      	ite	eq
 80077da:	2301      	moveq	r3, #1
 80077dc:	2300      	movne	r3, #0
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <chVTDoSetI+0x38>
 80077e4:	2301      	movs	r3, #1
 80077e6:	e000      	b.n	80077ea <chVTDoSetI+0x3a>
 80077e8:	2300      	movs	r3, #0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d107      	bne.n	80077fe <chVTDoSetI+0x4e>
 80077ee:	9b02      	ldr	r3, [sp, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <chVTDoSetI+0x54>
 80077fe:	480b      	ldr	r0, [pc, #44]	; (800782c <chVTDoSetI+0x7c>)
 8007800:	f7ff fdd6 	bl	80073b0 <chSysHalt>

  /* Timer initialization.*/
  vtp->par     = par;
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	9a00      	ldr	r2, [sp, #0]
 8007808:	611a      	str	r2, [r3, #16]
  vtp->func    = vtfunc;
 800780a:	9b03      	ldr	r3, [sp, #12]
 800780c:	9a01      	ldr	r2, [sp, #4]
 800780e:	60da      	str	r2, [r3, #12]
  vtp->reload  = (sysinterval_t)0;
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	615a      	str	r2, [r3, #20]

  /* Inserting the timer in the delta list.*/
  vt_enqueue(vtlp, vtp, delay);
 8007816:	9a02      	ldr	r2, [sp, #8]
 8007818:	9903      	ldr	r1, [sp, #12]
 800781a:	9805      	ldr	r0, [sp, #20]
 800781c:	f7ff ffb8 	bl	8007790 <vt_enqueue>
}
 8007820:	b007      	add	sp, #28
 8007822:	f85d fb04 	ldr.w	pc, [sp], #4
 8007826:	bf00      	nop
 8007828:	20000fb0 	.word	0x20000fb0
 800782c:	0800aa00 	.word	0x0800aa00

08007830 <chVTDoResetI>:
 *
 * @param[in] vtp       pointer to a @p virtual_timer_t object
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8007830:	b500      	push	{lr}
 8007832:	b085      	sub	sp, #20
 8007834:	9001      	str	r0, [sp, #4]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 8007836:	4b13      	ldr	r3, [pc, #76]	; (8007884 <chVTDoResetI+0x54>)
 8007838:	9303      	str	r3, [sp, #12]

  chDbgCheckClassI();
 800783a:	f7ff fed9 	bl	80075f0 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 800783e:	9b01      	ldr	r3, [sp, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	bf0c      	ite	eq
 8007844:	2301      	moveq	r3, #1
 8007846:	2300      	movne	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <chVTDoResetI+0x24>
 800784e:	480e      	ldr	r0, [pc, #56]	; (8007888 <chVTDoResetI+0x58>)
 8007850:	f7ff fdae 	bl	80073b0 <chSysHalt>
  chDbgAssert(chVTIsArmedI(vtp), "timer not armed");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->dlist.next->delta += vtp->dlist.delta;
 8007854:	9b01      	ldr	r3, [sp, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6899      	ldr	r1, [r3, #8]
 800785a:	9b01      	ldr	r3, [sp, #4]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	440a      	add	r2, r1
 8007864:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list, marking it as not armed.*/
  (void) ch_dlist_dequeue(&vtp->dlist);
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff ff61 	bl	8007730 <ch_dlist_dequeue>
  vtp->dlist.next = NULL;
 800786e:	9b01      	ldr	r3, [sp, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  vtlp->dlist.delta = (sysinterval_t)-1;
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800787a:	609a      	str	r2, [r3, #8]
  delta = vtlp->dlist.next->delta - nowdelta;

  /* Setting up the alarm.*/
  vt_set_alarm(vtlp, now, delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800787c:	b005      	add	sp, #20
 800787e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007882:	bf00      	nop
 8007884:	20000fb0 	.word	0x20000fb0
 8007888:	0800aa0c 	.word	0x0800aa0c
 800788c:	00000000 	.word	0x00000000

08007890 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
 8007890:	b500      	push	{lr}
 8007892:	b083      	sub	sp, #12
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 8007894:	4b1f      	ldr	r3, [pc, #124]	; (8007914 <chVTDoTickI+0x84>)
 8007896:	9301      	str	r3, [sp, #4]

  chDbgCheckClassI();
 8007898:	f7ff feaa 	bl	80075f0 <chDbgCheckClassI>

#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
 800789c:	9b01      	ldr	r3, [sp, #4]
 800789e:	899b      	ldrh	r3, [r3, #12]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3301      	adds	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	9b01      	ldr	r3, [sp, #4]
 80078a8:	819a      	strh	r2, [r3, #12]
  if (ch_dlist_notempty(&vtlp->dlist)) {
 80078aa:	9b01      	ldr	r3, [sp, #4]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fee7 	bl	8007680 <ch_dlist_notempty>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d02a      	beq.n	800790e <chVTDoTickI+0x7e>
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
 80078b8:	9b01      	ldr	r3, [sp, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	3a01      	subs	r2, #1
 80078c0:	609a      	str	r2, [r3, #8]
 80078c2:	e01f      	b.n	8007904 <chVTDoTickI+0x74>
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
      virtual_timer_t *vtp;

      /* Triggered timer.*/
      vtp = (virtual_timer_t *)vtlp->dlist.next;
 80078c4:	9b01      	ldr	r3, [sp, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	9300      	str	r3, [sp, #0]

      /* Removing the element from the delta list, marking it as not armed.*/
      (void) ch_dlist_dequeue(&vtp->dlist);
 80078ca:	9b00      	ldr	r3, [sp, #0]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff ff2f 	bl	8007730 <ch_dlist_dequeue>
      vtp->dlist.next = NULL;
 80078d2:	9b00      	ldr	r3, [sp, #0]
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]

      chSysUnlockFromISR();
 80078d8:	f7ff ff4a 	bl	8007770 <chSysUnlockFromISR.lto_priv.6>
      vtp->func(vtp, vtp->par);
 80078dc:	9b00      	ldr	r3, [sp, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	9a00      	ldr	r2, [sp, #0]
 80078e2:	6912      	ldr	r2, [r2, #16]
 80078e4:	4611      	mov	r1, r2
 80078e6:	9800      	ldr	r0, [sp, #0]
 80078e8:	4798      	blx	r3
      chSysLockFromISR();
 80078ea:	f7ff ff31 	bl	8007750 <chSysLockFromISR.lto_priv.6>

      /* If a reload is defined the timer needs to be restarted.*/
      if (vtp->reload > (sysinterval_t)0) {
 80078ee:	9b00      	ldr	r3, [sp, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d006      	beq.n	8007904 <chVTDoTickI+0x74>
        ch_dlist_insert(&vtlp->dlist, &vtp->dlist, vtp->reload);
 80078f6:	9801      	ldr	r0, [sp, #4]
 80078f8:	9900      	ldr	r1, [sp, #0]
 80078fa:	9b00      	ldr	r3, [sp, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	461a      	mov	r2, r3
 8007900:	f7ff fee6 	bl	80076d0 <ch_dlist_insert>
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
 8007904:	9b01      	ldr	r3, [sp, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0da      	beq.n	80078c4 <chVTDoTickI+0x34>
  vtp->dlist.delta -= nowdelta;

  /* Update alarm time to next timer.*/
  vt_set_alarm(vtlp, now, vtp->dlist.delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800790e:	b003      	add	sp, #12
 8007910:	f85d fb04 	ldr.w	pc, [sp], #4
 8007914:	20000fb0 	.word	0x20000fb0
	...

08007920 <ch_queue_dequeue.lto_priv.0>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8007920:	b082      	sub	sp, #8
 8007922:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	9a01      	ldr	r2, [sp, #4]
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	6852      	ldr	r2, [r2, #4]
 8007936:	605a      	str	r2, [r3, #4]
  return p;
 8007938:	9b01      	ldr	r3, [sp, #4]
}
 800793a:	4618      	mov	r0, r3
 800793c:	b002      	add	sp, #8
 800793e:	4770      	bx	lr

08007940 <ch_pqueue_remove_highest>:
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 8007940:	b084      	sub	sp, #16
 8007942:	9001      	str	r0, [sp, #4]
  ch_priority_queue_t *p = pqp->next;
 8007944:	9b01      	ldr	r3, [sp, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	9303      	str	r3, [sp, #12]
  pqp->next       = p->next;
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	9a01      	ldr	r2, [sp, #4]
 8007958:	605a      	str	r2, [r3, #4]
  return p;
 800795a:	9b03      	ldr	r3, [sp, #12]
}
 800795c:	4618      	mov	r0, r3
 800795e:	b004      	add	sp, #16
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
	...

08007970 <ch_pqueue_insert_behind>:
                                                           ch_priority_queue_t *p) {
 8007970:	b082      	sub	sp, #8
 8007972:	9001      	str	r0, [sp, #4]
 8007974:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 8007976:	9b01      	ldr	r3, [sp, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	9b00      	ldr	r3, [sp, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	429a      	cmp	r2, r3
 8007986:	bf2c      	ite	cs
 8007988:	2301      	movcs	r3, #1
 800798a:	2300      	movcc	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f1      	bne.n	8007976 <ch_pqueue_insert_behind+0x6>
  p->next       = pqp;
 8007992:	9b00      	ldr	r3, [sp, #0]
 8007994:	9a01      	ldr	r2, [sp, #4]
 8007996:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8007998:	9b01      	ldr	r3, [sp, #4]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	9b00      	ldr	r3, [sp, #0]
 800799e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80079a0:	9b00      	ldr	r3, [sp, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	9a00      	ldr	r2, [sp, #0]
 80079a6:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 80079a8:	9b01      	ldr	r3, [sp, #4]
 80079aa:	9a00      	ldr	r2, [sp, #0]
 80079ac:	605a      	str	r2, [r3, #4]
  return p;
 80079ae:	9b00      	ldr	r3, [sp, #0]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	b002      	add	sp, #8
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
	...

080079c0 <ch_pqueue_insert_ahead>:
                                                          ch_priority_queue_t *p) {
 80079c0:	b082      	sub	sp, #8
 80079c2:	9001      	str	r0, [sp, #4]
 80079c4:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 80079c6:	9b01      	ldr	r3, [sp, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio > p->prio));
 80079cc:	9b01      	ldr	r3, [sp, #4]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	9b00      	ldr	r3, [sp, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	bf8c      	ite	hi
 80079d8:	2301      	movhi	r3, #1
 80079da:	2300      	movls	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f1      	bne.n	80079c6 <ch_pqueue_insert_ahead+0x6>
  p->next       = pqp;
 80079e2:	9b00      	ldr	r3, [sp, #0]
 80079e4:	9a01      	ldr	r2, [sp, #4]
 80079e6:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	9b00      	ldr	r3, [sp, #0]
 80079ee:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	9a00      	ldr	r2, [sp, #0]
 80079f6:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 80079f8:	9b01      	ldr	r3, [sp, #4]
 80079fa:	9a00      	ldr	r2, [sp, #0]
 80079fc:	605a      	str	r2, [r3, #4]
  return p;
 80079fe:	9b00      	ldr	r3, [sp, #0]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	b002      	add	sp, #8
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
	...

08007a10 <chSysLockFromISR.lto_priv.7>:
static inline void chSysLockFromISR(void) {
 8007a10:	b500      	push	{lr}
 8007a12:	b083      	sub	sp, #12
 8007a14:	2330      	movs	r3, #48	; 0x30
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	9b01      	ldr	r3, [sp, #4]
 8007a1a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock_from_isr();
 8007a1e:	f7ff fd2f 	bl	8007480 <__dbg_check_lock_from_isr>
}
 8007a22:	b003      	add	sp, #12
 8007a24:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007a30 <chSysUnlockFromISR.lto_priv.7>:
static inline void chSysUnlockFromISR(void) {
 8007a30:	b500      	push	{lr}
 8007a32:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
 8007a34:	f7ff fd4c 	bl	80074d0 <__dbg_check_unlock_from_isr>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	9b01      	ldr	r3, [sp, #4]
 8007a3e:	f383 8811 	msr	BASEPRI, r3
}
 8007a42:	b003      	add	sp, #12
 8007a44:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007a50 <chVTIsArmedI>:
 * @param[in] vtp       pointer to a @p virtual_timer_t object
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8007a50:	b500      	push	{lr}
 8007a52:	b083      	sub	sp, #12
 8007a54:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8007a56:	f7ff fdcb 	bl	80075f0 <chDbgCheckClassI>

  return (bool)(vtp->dlist.next != NULL);
 8007a5a:	9b01      	ldr	r3, [sp, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bf14      	ite	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	2300      	moveq	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	b003      	add	sp, #12
 8007a6c:	f85d fb04 	ldr.w	pc, [sp], #4

08007a70 <chSemFastSignalI.lto_priv.0>:
 *
 * @param[in] sp        pointer to a @p semaphore_t object
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8007a70:	b500      	push	{lr}
 8007a72:	b083      	sub	sp, #12
 8007a74:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8007a76:	f7ff fdbb 	bl	80075f0 <chDbgCheckClassI>

  sp->cnt++;
 8007a7a:	9b01      	ldr	r3, [sp, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	9b01      	ldr	r3, [sp, #4]
 8007a82:	609a      	str	r2, [r3, #8]
}
 8007a84:	b003      	add	sp, #12
 8007a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a8a:	bf00      	nop
 8007a8c:	0000      	movs	r0, r0
	...

08007a90 <__sch_ready_behind>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_behind(thread_t *tp) {
 8007a90:	b500      	push	{lr}
 8007a92:	b083      	sub	sp, #12
 8007a94:	9001      	str	r0, [sp, #4]

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8007a9c:	9b01      	ldr	r3, [sp, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	9b01      	ldr	r3, [sp, #4]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	f7ff ff62 	bl	8007970 <ch_pqueue_insert_behind>
 8007aac:	4603      	mov	r3, r0
                                           &tp->hdr.pqueue));
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	b003      	add	sp, #12
 8007ab2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ab6:	bf00      	nop
	...

08007ac0 <__sch_ready_ahead>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_ahead(thread_t *tp) {
 8007ac0:	b500      	push	{lr}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	9001      	str	r0, [sp, #4]

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	771a      	strb	r2, [r3, #28]

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8007acc:	9b01      	ldr	r3, [sp, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	9b01      	ldr	r3, [sp, #4]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	f7ff ff72 	bl	80079c0 <ch_pqueue_insert_ahead>
 8007adc:	4603      	mov	r3, r0
                                          &tp->hdr.pqueue));
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	b003      	add	sp, #12
 8007ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ae6:	bf00      	nop
	...

08007af0 <__sch_reschedule_ahead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @notapi
 */
static void __sch_reschedule_ahead(void) {
 8007af0:	b500      	push	{lr}
 8007af2:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8007af4:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <__sch_reschedule_ahead+0x3c>)
 8007af6:	9303      	str	r3, [sp, #12]
  thread_t *otp = __instance_get_currthread(oip);
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	9302      	str	r3, [sp, #8]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff ff1d 	bl	8007940 <ch_pqueue_remove_highest>
 8007b06:	9001      	str	r0, [sp, #4]
  ntp->state = CH_STATE_CURRENT;
 8007b08:	9b01      	ldr	r3, [sp, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	771a      	strb	r2, [r3, #28]
  __instance_set_currthread(oip, ntp);
 8007b0e:	9b03      	ldr	r3, [sp, #12]
 8007b10:	9a01      	ldr	r2, [sp, #4]
 8007b12:	60da      	str	r2, [r3, #12]
  if (otp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = __sch_ready_ahead(otp);
 8007b14:	9802      	ldr	r0, [sp, #8]
 8007b16:	f7ff ffd3 	bl	8007ac0 <__sch_ready_ahead>
 8007b1a:	9002      	str	r0, [sp, #8]

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8007b1c:	9902      	ldr	r1, [sp, #8]
 8007b1e:	9801      	ldr	r0, [sp, #4]
 8007b20:	f7f8 fb96 	bl	8000250 <__port_switch>
}
 8007b24:	b005      	add	sp, #20
 8007b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b2a:	bf00      	nop
 8007b2c:	20000fa0 	.word	0x20000fa0

08007b30 <__sch_wakeup>:

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8007b30:	b500      	push	{lr}
 8007b32:	b085      	sub	sp, #20
 8007b34:	9001      	str	r0, [sp, #4]
 8007b36:	9100      	str	r1, [sp, #0]
  thread_t *tp = threadref(p);
 8007b38:	9b00      	ldr	r3, [sp, #0]
 8007b3a:	9303      	str	r3, [sp, #12]

  (void)vtp;

  chSysLockFromISR();
 8007b3c:	f7ff ff68 	bl	8007a10 <chSysLockFromISR.lto_priv.7>
  switch (tp->state) {
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	7f1b      	ldrb	r3, [r3, #28]
 8007b44:	2b0c      	cmp	r3, #12
 8007b46:	d82e      	bhi.n	8007ba6 <__sch_wakeup+0x76>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <__sch_wakeup+0x20>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b85 	.word	0x08007b85
 8007b54:	08007ba7 	.word	0x08007ba7
 8007b58:	08007ba7 	.word	0x08007ba7
 8007b5c:	08007b8b 	.word	0x08007b8b
 8007b60:	08007b9f 	.word	0x08007b9f
 8007b64:	08007b95 	.word	0x08007b95
 8007b68:	08007ba7 	.word	0x08007ba7
 8007b6c:	08007b9f 	.word	0x08007b9f
 8007b70:	08007ba7 	.word	0x08007ba7
 8007b74:	08007ba7 	.word	0x08007ba7
 8007b78:	08007ba7 	.word	0x08007ba7
 8007b7c:	08007ba7 	.word	0x08007ba7
 8007b80:	08007b9f 	.word	0x08007b9f
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8007b84:	f7ff ff54 	bl	8007a30 <chSysUnlockFromISR.lto_priv.7>
 8007b88:	e016      	b.n	8007bb8 <__sch_wakeup+0x88>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e008      	b.n	8007ba6 <__sch_wakeup+0x76>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff69 	bl	8007a70 <chSemFastSignalI.lto_priv.0>
#endif
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) ch_queue_dequeue(&tp->hdr.queue);
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff febd 	bl	8007920 <ch_queue_dequeue.lto_priv.0>
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
 8007bae:	9803      	ldr	r0, [sp, #12]
 8007bb0:	f7ff ff6e 	bl	8007a90 <__sch_ready_behind>
  chSysUnlockFromISR();
 8007bb4:	f7ff ff3c 	bl	8007a30 <chSysUnlockFromISR.lto_priv.7>

  return;
}
 8007bb8:	b005      	add	sp, #20
 8007bba:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bbe:	bf00      	nop

08007bc0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8007bc0:	b500      	push	{lr}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8007bc6:	f7ff fd13 	bl	80075f0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8007bca:	9b01      	ldr	r3, [sp, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <chSchReadyI+0x20>
 8007bda:	4805      	ldr	r0, [pc, #20]	; (8007bf0 <chSchReadyI+0x30>)
 8007bdc:	f7ff fbe8 	bl	80073b0 <chSysHalt>
       the other core.*/
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
 8007be0:	9801      	ldr	r0, [sp, #4]
 8007be2:	f7ff ff55 	bl	8007a90 <__sch_ready_behind>
 8007be6:	4603      	mov	r3, r0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	b003      	add	sp, #12
 8007bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bf0:	0800aa1c 	.word	0x0800aa1c
	...

08007c00 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8007c00:	b500      	push	{lr}
 8007c02:	b087      	sub	sp, #28
 8007c04:	4603      	mov	r3, r0
 8007c06:	f88d 3007 	strb.w	r3, [sp, #7]
  os_instance_t *oip = currcore;
 8007c0a:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <chSchGoSleepS+0x44>)
 8007c0c:	9304      	str	r3, [sp, #16]
  thread_t *otp = __instance_get_currthread(oip);
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	9303      	str	r3, [sp, #12]
  thread_t *ntp;

  chDbgCheckClassS();
 8007c14:	f7ff fd0c 	bl	8007630 <chDbgCheckClassS>

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007c1e:	771a      	strb	r2, [r3, #28]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8007c20:	9b04      	ldr	r3, [sp, #16]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff fe8c 	bl	8007940 <ch_pqueue_remove_highest>
 8007c28:	9005      	str	r0, [sp, #20]
  ntp->state = CH_STATE_CURRENT;
 8007c2a:	9b05      	ldr	r3, [sp, #20]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	771a      	strb	r2, [r3, #28]
  __instance_set_currthread(oip, ntp);
 8007c30:	9b04      	ldr	r3, [sp, #16]
 8007c32:	9a05      	ldr	r2, [sp, #20]
 8007c34:	60da      	str	r2, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8007c36:	9903      	ldr	r1, [sp, #12]
 8007c38:	9805      	ldr	r0, [sp, #20]
 8007c3a:	f7f8 fb09 	bl	8000250 <__port_switch>
}
 8007c3e:	b007      	add	sp, #28
 8007c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c44:	20000fa0 	.word	0x20000fa0
	...

08007c50 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8007c50:	b500      	push	{lr}
 8007c52:	b08b      	sub	sp, #44	; 0x2c
 8007c54:	4603      	mov	r3, r0
 8007c56:	9100      	str	r1, [sp, #0]
 8007c58:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *tp = __instance_get_currthread(currcore);
 8007c5c:	4b15      	ldr	r3, [pc, #84]	; (8007cb4 <chSchGoSleepTimeoutS+0x64>)
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	9309      	str	r3, [sp, #36]	; 0x24

  chDbgCheckClassS();
 8007c62:	f7ff fce5 	bl	8007630 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
 8007c66:	9b00      	ldr	r3, [sp, #0]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c6c:	d016      	beq.n	8007c9c <chSchGoSleepTimeoutS+0x4c>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8007c6e:	a803      	add	r0, sp, #12
 8007c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c72:	4a11      	ldr	r2, [pc, #68]	; (8007cb8 <chSchGoSleepTimeoutS+0x68>)
 8007c74:	9900      	ldr	r1, [sp, #0]
 8007c76:	f7ff fd9b 	bl	80077b0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8007c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff ffbe 	bl	8007c00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8007c84:	ab03      	add	r3, sp, #12
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff fee2 	bl	8007a50 <chVTIsArmedI>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <chSchGoSleepTimeoutS+0x56>
      chVTDoResetI(&vt);
 8007c92:	ab03      	add	r3, sp, #12
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff fdcb 	bl	8007830 <chVTDoResetI>
 8007c9a:	e004      	b.n	8007ca6 <chSchGoSleepTimeoutS+0x56>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8007c9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff ffad 	bl	8007c00 <chSchGoSleepS>
  }

  return tp->u.rdymsg;
 8007ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	b00b      	add	sp, #44	; 0x2c
 8007cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cb2:	bf00      	nop
 8007cb4:	20000fa0 	.word	0x20000fa0
 8007cb8:	08007b31 	.word	0x08007b31
 8007cbc:	00000000 	.word	0x00000000

08007cc0 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8007cc0:	b500      	push	{lr}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	9001      	str	r0, [sp, #4]
 8007cc6:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
 8007cc8:	4b14      	ldr	r3, [pc, #80]	; (8007d1c <chSchWakeupS+0x5c>)
 8007cca:	9302      	str	r3, [sp, #8]
  thread_t *otp = __instance_get_currthread(oip);
 8007ccc:	9b02      	ldr	r3, [sp, #8]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	9303      	str	r3, [sp, #12]

  chDbgCheckClassS();
 8007cd2:	f7ff fcad 	bl	8007630 <chDbgCheckClassS>
              (oip->rlist.current->hdr.pqueue.prio >= oip->rlist.pqueue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	9a00      	ldr	r2, [sp, #0]
 8007cda:	635a      	str	r2, [r3, #52]	; 0x34
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.
     Note, we are favoring the path where the woken thread has higher
     priority.*/
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8007cdc:	9b01      	ldr	r3, [sp, #4]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	9b03      	ldr	r3, [sp, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	bf94      	ite	ls
 8007ce8:	2301      	movls	r3, #1
 8007cea:	2300      	movhi	r3, #0
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <chSchWakeupS+0x3a>
    (void) __sch_ready_behind(ntp);
 8007cf2:	9801      	ldr	r0, [sp, #4]
 8007cf4:	f7ff fecc 	bl	8007a90 <__sch_ready_behind>
 8007cf8:	e00d      	b.n	8007d16 <chSchWakeupS+0x56>
  }
  else {
    /* The old thread goes back in the ready list ahead of its peers
       because it has not exhausted its time slice.*/
    otp = __sch_ready_ahead(otp);
 8007cfa:	9803      	ldr	r0, [sp, #12]
 8007cfc:	f7ff fee0 	bl	8007ac0 <__sch_ready_ahead>
 8007d00:	9003      	str	r0, [sp, #12]
    if (otp->hdr.pqueue.prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    ntp->state = CH_STATE_CURRENT;
 8007d02:	9b01      	ldr	r3, [sp, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	771a      	strb	r2, [r3, #28]
    __instance_set_currthread(oip, ntp);
 8007d08:	9b02      	ldr	r3, [sp, #8]
 8007d0a:	9a01      	ldr	r2, [sp, #4]
 8007d0c:	60da      	str	r2, [r3, #12]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8007d0e:	9903      	ldr	r1, [sp, #12]
 8007d10:	9801      	ldr	r0, [sp, #4]
 8007d12:	f7f8 fa9d 	bl	8000250 <__port_switch>
  }
}
 8007d16:	b005      	add	sp, #20
 8007d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d1c:	20000fa0 	.word	0x20000fa0

08007d20 <chSchRescheduleS>:
 * @note    Only local threads are considered, other cores are signaled
 *          and perform a reschedule locally.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 8007d20:	b500      	push	{lr}
 8007d22:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8007d24:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <chSchRescheduleS+0x34>)
 8007d26:	9301      	str	r3, [sp, #4]
  thread_t *tp = __instance_get_currthread(oip);
 8007d28:	9b01      	ldr	r3, [sp, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	9300      	str	r3, [sp, #0]

  chDbgCheckClassS();
 8007d2e:	f7ff fc7f 	bl	8007630 <chDbgCheckClassS>

  /* Note, we are favoring the path where the reschedule is necessary
     because higher priority threads are ready.*/
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	9b00      	ldr	r3, [sp, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	bf8c      	ite	hi
 8007d40:	2301      	movhi	r3, #1
 8007d42:	2300      	movls	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <chSchRescheduleS+0x2e>
    __sch_reschedule_ahead();
 8007d4a:	f7ff fed1 	bl	8007af0 <__sch_reschedule_ahead>
  }
}
 8007d4e:	b003      	add	sp, #12
 8007d50:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d54:	20000fa0 	.word	0x20000fa0
	...

08007d60 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8007d60:	b084      	sub	sp, #16
  os_instance_t *oip = currcore;
 8007d62:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <chSchIsPreemptionRequired+0x30>)
 8007d64:	9303      	str	r3, [sp, #12]
  thread_t *tp = __instance_get_currthread(oip);
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	9302      	str	r3, [sp, #8]

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	9301      	str	r3, [sp, #4]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8007d74:	9b02      	ldr	r3, [sp, #8]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8007d7a:	9a01      	ldr	r2, [sp, #4]
 8007d7c:	9b00      	ldr	r3, [sp, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	bf8c      	ite	hi
 8007d82:	2301      	movhi	r3, #1
 8007d84:	2300      	movls	r3, #0
 8007d86:	b2db      	uxtb	r3, r3
#endif
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	b004      	add	sp, #16
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20000fa0 	.word	0x20000fa0
	...

08007da0 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
 8007da0:	b500      	push	{lr}
 8007da2:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8007da4:	4b0d      	ldr	r3, [pc, #52]	; (8007ddc <chSchDoPreemption+0x3c>)
 8007da6:	9303      	str	r3, [sp, #12]
  thread_t *otp = __instance_get_currthread(oip);
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	9302      	str	r3, [sp, #8]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fdc5 	bl	8007940 <ch_pqueue_remove_highest>
 8007db6:	9001      	str	r0, [sp, #4]
  ntp->state = CH_STATE_CURRENT;
 8007db8:	9b01      	ldr	r3, [sp, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	771a      	strb	r2, [r3, #28]
  __instance_set_currthread(oip, ntp);
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	9a01      	ldr	r2, [sp, #4]
 8007dc2:	60da      	str	r2, [r3, #12]
    otp = __sch_ready_ahead(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
 8007dc4:	9802      	ldr	r0, [sp, #8]
 8007dc6:	f7ff fe7b 	bl	8007ac0 <__sch_ready_ahead>
 8007dca:	9002      	str	r0, [sp, #8]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8007dcc:	9902      	ldr	r1, [sp, #8]
 8007dce:	9801      	ldr	r0, [sp, #4]
 8007dd0:	f7f8 fa3e 	bl	8000250 <__port_switch>
}
 8007dd4:	b005      	add	sp, #20
 8007dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dda:	bf00      	nop
 8007ddc:	20000fa0 	.word	0x20000fa0

08007de0 <__rfcu_object_init>:
 *
 * @param[out] rfcup    pointer to a @p rfcu_t object
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {
 8007de0:	b082      	sub	sp, #8
 8007de2:	9001      	str	r0, [sp, #4]

  rfcup->mask = (rfcu_mask_t)0;
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
}
 8007dea:	b002      	add	sp, #8
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop

08007df0 <__dbg_object_init>:
 *
 * @param[out] sdp      pointer to a @p system_debug_t object
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {
 8007df0:	b082      	sub	sp, #8
 8007df2:	9001      	str	r0, [sp, #4]

  sdp->panic_msg = NULL;
 8007df4:	9b01      	ldr	r3, [sp, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
 8007dfa:	9b01      	ldr	r3, [sp, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	605a      	str	r2, [r3, #4]
  sdp->lock_cnt = (cnt_t)1;
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	609a      	str	r2, [r3, #8]
#endif
}
 8007e06:	b002      	add	sp, #8
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	0000      	movs	r0, r0
	...

08007e10 <ch_queue_init.lto_priv.0>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8007e10:	b082      	sub	sp, #8
 8007e12:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8007e14:	9b01      	ldr	r3, [sp, #4]
 8007e16:	9a01      	ldr	r2, [sp, #4]
 8007e18:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8007e1a:	9b01      	ldr	r3, [sp, #4]
 8007e1c:	9a01      	ldr	r2, [sp, #4]
 8007e1e:	605a      	str	r2, [r3, #4]
}
 8007e20:	b002      	add	sp, #8
 8007e22:	4770      	bx	lr
	...

08007e30 <ch_queue_insert.lto_priv.0>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 8007e30:	b082      	sub	sp, #8
 8007e32:	9001      	str	r0, [sp, #4]
 8007e34:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	9a01      	ldr	r2, [sp, #4]
 8007e3a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 8007e3c:	9b01      	ldr	r3, [sp, #4]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8007e44:	9b00      	ldr	r3, [sp, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	9a00      	ldr	r2, [sp, #0]
 8007e4a:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 8007e4c:	9b01      	ldr	r3, [sp, #4]
 8007e4e:	9a00      	ldr	r2, [sp, #0]
 8007e50:	605a      	str	r2, [r3, #4]
}
 8007e52:	b002      	add	sp, #8
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
	...

08007e60 <ch_pqueue_init>:
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 8007e60:	b082      	sub	sp, #8
 8007e62:	9001      	str	r0, [sp, #4]
  pqp->next = pqp;
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	9a01      	ldr	r2, [sp, #4]
 8007e68:	601a      	str	r2, [r3, #0]
  pqp->prev = pqp;
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	9a01      	ldr	r2, [sp, #4]
 8007e6e:	605a      	str	r2, [r3, #4]
  pqp->prio = (tprio_t)0;
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	609a      	str	r2, [r3, #8]
}
 8007e76:	b002      	add	sp, #8
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	0000      	movs	r0, r0
	...

08007e80 <ch_dlist_init>:
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 8007e80:	b082      	sub	sp, #8
 8007e82:	9001      	str	r0, [sp, #4]
  dlhp->next  = dlhp;
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	9a01      	ldr	r2, [sp, #4]
 8007e88:	601a      	str	r2, [r3, #0]
  dlhp->prev  = dlhp;
 8007e8a:	9b01      	ldr	r3, [sp, #4]
 8007e8c:	9a01      	ldr	r2, [sp, #4]
 8007e8e:	605a      	str	r2, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 8007e90:	9b01      	ldr	r3, [sp, #4]
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e96:	609a      	str	r2, [r3, #8]
}
 8007e98:	b002      	add	sp, #8
 8007e9a:	4770      	bx	lr
 8007e9c:	0000      	movs	r0, r0
	...

08007ea0 <chVTGetSystemTimeX.lto_priv.2>:
  return currcore->vtlist.systime;
 8007ea0:	4b02      	ldr	r3, [pc, #8]	; (8007eac <chVTGetSystemTimeX.lto_priv.2+0xc>)
 8007ea2:	8b9b      	ldrh	r3, [r3, #28]
 8007ea4:	b29b      	uxth	r3, r3
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	20000fa0 	.word	0x20000fa0

08007eb0 <__vt_object_init>:
 *
 * @param[out] vtlp     pointer to the @p virtual_timers_list_t structure
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {
 8007eb0:	b500      	push	{lr}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	9001      	str	r0, [sp, #4]

  ch_dlist_init(&vtlp->dlist);
 8007eb6:	9b01      	ldr	r3, [sp, #4]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff ffe1 	bl	8007e80 <ch_dlist_init>
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	819a      	strh	r2, [r3, #12]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8007ec4:	f7ff ffec 	bl	8007ea0 <chVTGetSystemTimeX.lto_priv.2>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	f04f 0300 	mov.w	r3, #0
 8007ed0:	9901      	ldr	r1, [sp, #4]
 8007ed2:	e9c1 2304 	strd	r2, r3, [r1, #16]
#endif
}
 8007ed6:	b003      	add	sp, #12
 8007ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007edc:	0000      	movs	r0, r0
	...

08007ee0 <__reg_object_init>:
 *
 * @param[out] rp       pointer to a @p registry_t structure
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {
 8007ee0:	b500      	push	{lr}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	9001      	str	r0, [sp, #4]

  ch_queue_init(&rp->queue);
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff ff91 	bl	8007e10 <ch_queue_init.lto_priv.0>
}
 8007eee:	b003      	add	sp, #12
 8007ef0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007f00 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
 8007f00:	b082      	sub	sp, #8
 8007f02:	9001      	str	r0, [sp, #4]
 8007f04:	e7fe      	b.n	8007f04 <__idle_thread+0x4>
 8007f06:	bf00      	nop
	...

08007f10 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to an @p os_instance_config_t object
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
 8007f10:	b500      	push	{lr}
 8007f12:	b093      	sub	sp, #76	; 0x4c
 8007f14:	9001      	str	r0, [sp, #4]
 8007f16:	9100      	str	r1, [sp, #0]

  /* Registering into the global system structure.*/
#if CH_CFG_SMP_MODE == TRUE
  core_id = port_get_core_id();
#else
  core_id = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9311      	str	r3, [sp, #68]	; 0x44
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 8007f1c:	4a34      	ldr	r2, [pc, #208]	; (8007ff0 <chInstanceObjectInit+0xe0>)
 8007f1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	9a01      	ldr	r2, [sp, #4]
 8007f26:	605a      	str	r2, [r3, #4]

  /* Core associated to this instance.*/
  oip->core_id = core_id;
 8007f28:	9b01      	ldr	r3, [sp, #4]
 8007f2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	9a00      	ldr	r2, [sp, #0]
 8007f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Port initialization for the current instance.*/
  port_init(oip);
 8007f34:	9801      	ldr	r0, [sp, #4]
 8007f36:	f001 f883 	bl	8009040 <port_init>

  /* Ready list initialization.*/
  ch_pqueue_init(&oip->rlist.pqueue);
 8007f3a:	9b01      	ldr	r3, [sp, #4]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff ff8f 	bl	8007e60 <ch_pqueue_init>

#if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE)
  /* Registry initialization when SMP mode is disabled.*/
  __reg_object_init(&oip->reglist);
 8007f42:	9b01      	ldr	r3, [sp, #4]
 8007f44:	3328      	adds	r3, #40	; 0x28
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff ffca 	bl	8007ee0 <__reg_object_init>
#endif

#if CH_CFG_SMP_MODE == FALSE
  /* RFCU initialization when SMP mode is disabled.*/
  __rfcu_object_init(&oip->rfcu);
 8007f4c:	9b01      	ldr	r3, [sp, #4]
 8007f4e:	3334      	adds	r3, #52	; 0x34
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff ff45 	bl	8007de0 <__rfcu_object_init>
#endif

  /* Virtual timers list initialization.*/
  __vt_object_init(&oip->vtlist);
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	3310      	adds	r3, #16
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff ffa8 	bl	8007eb0 <__vt_object_init>

  /* Debug support initialization.*/
  __dbg_object_init(&oip->dbg);
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	33dc      	adds	r3, #220	; 0xdc
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff ff43 	bl	8007df0 <__dbg_object_init>

  /* Now this instructions flow becomes the main thread or the idle thread
     depending on the CH_CFG_NO_IDLE_THREAD setting.*/
  {
#if CH_CFG_NO_IDLE_THREAD == FALSE
    const THD_DECL(main_thd_desc,
 8007f6a:	4b22      	ldr	r3, [pc, #136]	; (8007ff4 <chInstanceObjectInit+0xe4>)
 8007f6c:	9303      	str	r3, [sp, #12]
 8007f6e:	9b00      	ldr	r3, [sp, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	9304      	str	r3, [sp, #16]
 8007f74:	9b00      	ldr	r3, [sp, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	2380      	movs	r3, #128	; 0x80
 8007f7c:	9306      	str	r3, [sp, #24]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9307      	str	r3, [sp, #28]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9308      	str	r3, [sp, #32]
 8007f86:	9b01      	ldr	r3, [sp, #4]
 8007f88:	9309      	str	r3, [sp, #36]	; 0x24
                   "main", oicp->cstack_base, oicp->cstack_end,
                   NORMALPRIO, NULL, NULL, oip
    );

    oip->rlist.current = chThdObjectInit(&oip->mainthread, &main_thd_desc);
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	338c      	adds	r3, #140	; 0x8c
 8007f8e:	aa03      	add	r2, sp, #12
 8007f90:	4611      	mov	r1, r2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 f914 	bl	80081c0 <chThdObjectInit>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	9b01      	ldr	r3, [sp, #4]
 8007f9c:	60da      	str	r2, [r3, #12]
    oip->rlist.current = chThdObjectInit(&oip->idlethread, &idle_thd_desc);
#endif
  }

#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(oip, oip->rlist.current);
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	3324      	adds	r3, #36	; 0x24
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f7ff ff3f 	bl	8007e30 <ch_queue_insert.lto_priv.0>
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 8007fb2:	9b01      	ldr	r3, [sp, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	771a      	strb	r2, [r3, #28]
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    const THD_DECL(idle_thd_desc,
 8007fba:	4b0f      	ldr	r3, [pc, #60]	; (8007ff8 <chInstanceObjectInit+0xe8>)
 8007fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fc4:	9b00      	ldr	r3, [sp, #0]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8007fca:	2301      	movs	r3, #1
 8007fcc:	930d      	str	r3, [sp, #52]	; 0x34
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <chInstanceObjectInit+0xec>)
 8007fd0:	930e      	str	r3, [sp, #56]	; 0x38
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	9310      	str	r3, [sp, #64]	; 0x40
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdSpawnRunningI(&oip->idlethread, &idle_thd_desc);
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	333c      	adds	r3, #60	; 0x3c
 8007fde:	aa0a      	add	r2, sp, #40	; 0x28
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 f9e4 	bl	80083b0 <chThdSpawnRunningI>
  }
#endif /* CH_CFG_NO_IDLE_THREAD == FALSE */
}
 8007fe8:	b013      	add	sp, #76	; 0x4c
 8007fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fee:	bf00      	nop
 8007ff0:	20000f90 	.word	0x20000f90
 8007ff4:	0800aa28 	.word	0x0800aa28
 8007ff8:	0800aa30 	.word	0x0800aa30
 8007ffc:	08007f01 	.word	0x08007f01

08008000 <ch_list_init>:
static inline void ch_list_init(ch_list_t *lp) {
 8008000:	b082      	sub	sp, #8
 8008002:	9001      	str	r0, [sp, #4]
  lp->next = lp;
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	9a01      	ldr	r2, [sp, #4]
 8008008:	601a      	str	r2, [r3, #0]
}
 800800a:	b002      	add	sp, #8
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop

08008010 <ch_list_notempty>:
static inline bool ch_list_notempty(ch_list_t *lp) {
 8008010:	b082      	sub	sp, #8
 8008012:	9001      	str	r0, [sp, #4]
  return (bool)(lp->next != lp);
 8008014:	9b01      	ldr	r3, [sp, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	9a01      	ldr	r2, [sp, #4]
 800801a:	429a      	cmp	r2, r3
 800801c:	bf14      	ite	ne
 800801e:	2301      	movne	r3, #1
 8008020:	2300      	moveq	r3, #0
 8008022:	b2db      	uxtb	r3, r3
}
 8008024:	4618      	mov	r0, r3
 8008026:	b002      	add	sp, #8
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	0000      	movs	r0, r0
	...

08008030 <ch_list_unlink>:
static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 8008030:	b084      	sub	sp, #16
 8008032:	9001      	str	r0, [sp, #4]
  ch_list_t *p = lp->next;
 8008034:	9b01      	ldr	r3, [sp, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	9303      	str	r3, [sp, #12]
  lp->next = p->next;
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	601a      	str	r2, [r3, #0]
  return p;
 8008042:	9b03      	ldr	r3, [sp, #12]
}
 8008044:	4618      	mov	r0, r3
 8008046:	b004      	add	sp, #16
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	0000      	movs	r0, r0
	...

08008050 <ch_queue_init.lto_priv.1>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8008050:	b082      	sub	sp, #8
 8008052:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	9a01      	ldr	r2, [sp, #4]
 8008058:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800805a:	9b01      	ldr	r3, [sp, #4]
 800805c:	9a01      	ldr	r2, [sp, #4]
 800805e:	605a      	str	r2, [r3, #4]
}
 8008060:	b002      	add	sp, #8
 8008062:	4770      	bx	lr
	...

08008070 <ch_queue_notempty.lto_priv.0>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8008070:	b082      	sub	sp, #8
 8008072:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	9a01      	ldr	r2, [sp, #4]
 800807a:	429a      	cmp	r2, r3
 800807c:	bf14      	ite	ne
 800807e:	2301      	movne	r3, #1
 8008080:	2300      	moveq	r3, #0
 8008082:	b2db      	uxtb	r3, r3
}
 8008084:	4618      	mov	r0, r3
 8008086:	b002      	add	sp, #8
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	0000      	movs	r0, r0
	...

08008090 <ch_queue_insert.lto_priv.1>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 8008090:	b082      	sub	sp, #8
 8008092:	9001      	str	r0, [sp, #4]
 8008094:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 8008096:	9b00      	ldr	r3, [sp, #0]
 8008098:	9a01      	ldr	r2, [sp, #4]
 800809a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 800809c:	9b01      	ldr	r3, [sp, #4]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	9b00      	ldr	r3, [sp, #0]
 80080a2:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80080a4:	9b00      	ldr	r3, [sp, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	9a00      	ldr	r2, [sp, #0]
 80080aa:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 80080ac:	9b01      	ldr	r3, [sp, #4]
 80080ae:	9a00      	ldr	r2, [sp, #0]
 80080b0:	605a      	str	r2, [r3, #4]
}
 80080b2:	b002      	add	sp, #8
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
	...

080080c0 <ch_queue_fifo_remove.lto_priv.0>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 80080c0:	b084      	sub	sp, #16
 80080c2:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 80080c4:	9b01      	ldr	r3, [sp, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 80080d2:	9b01      	ldr	r3, [sp, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	9a01      	ldr	r2, [sp, #4]
 80080d8:	605a      	str	r2, [r3, #4]
  return p;
 80080da:	9b03      	ldr	r3, [sp, #12]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	b004      	add	sp, #16
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
	...

080080f0 <ch_queue_dequeue.lto_priv.1>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 80080f0:	b082      	sub	sp, #8
 80080f2:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	9a01      	ldr	r2, [sp, #4]
 80080fa:	6812      	ldr	r2, [r2, #0]
 80080fc:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	9a01      	ldr	r2, [sp, #4]
 8008104:	6852      	ldr	r2, [r2, #4]
 8008106:	605a      	str	r2, [r3, #4]
  return p;
 8008108:	9b01      	ldr	r3, [sp, #4]
}
 800810a:	4618      	mov	r0, r3
 800810c:	b002      	add	sp, #8
 800810e:	4770      	bx	lr

08008110 <chSysLock.lto_priv.10>:
static inline void chSysLock(void) {
 8008110:	b500      	push	{lr}
 8008112:	b083      	sub	sp, #12
 8008114:	2330      	movs	r3, #48	; 0x30
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	9b01      	ldr	r3, [sp, #4]
 800811a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 800811e:	f7ff f95f 	bl	80073e0 <__dbg_check_lock>
}
 8008122:	b003      	add	sp, #12
 8008124:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008130 <chSysUnlock.lto_priv.10>:
static inline void chSysUnlock(void) {
 8008130:	b500      	push	{lr}
 8008132:	b083      	sub	sp, #12
  __dbg_check_unlock();
 8008134:	f7ff f97c 	bl	8007430 <__dbg_check_unlock>
 8008138:	2300      	movs	r3, #0
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	f383 8811 	msr	BASEPRI, r3
}
 8008142:	b003      	add	sp, #12
 8008144:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008150 <chThdGetSelfX.lto_priv.0>:
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 8008150:	4b01      	ldr	r3, [pc, #4]	; (8008158 <chThdGetSelfX.lto_priv.0+0x8>)
 8008152:	68db      	ldr	r3, [r3, #12]
}
 8008154:	4618      	mov	r0, r3
 8008156:	4770      	bx	lr
 8008158:	20000fa0 	.word	0x20000fa0
 800815c:	00000000 	.word	0x00000000

08008160 <chThdSleepS>:
 *                        state.
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {
 8008160:	b500      	push	{lr}
 8008162:	b083      	sub	sp, #12
 8008164:	9001      	str	r0, [sp, #4]

  chDbgCheck(ticks != TIME_IMMEDIATE);
 8008166:	9b01      	ldr	r3, [sp, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	bf0c      	ite	eq
 800816c:	2301      	moveq	r3, #1
 800816e:	2300      	movne	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <chThdSleepS+0x1c>
 8008176:	4805      	ldr	r0, [pc, #20]	; (800818c <chThdSleepS+0x2c>)
 8008178:	f7ff f91a 	bl	80073b0 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800817c:	9901      	ldr	r1, [sp, #4]
 800817e:	2008      	movs	r0, #8
 8008180:	f7ff fd66 	bl	8007c50 <chSchGoSleepTimeoutS>
}
 8008184:	b003      	add	sp, #12
 8008186:	f85d fb04 	ldr.w	pc, [sp], #4
 800818a:	bf00      	nop
 800818c:	0800aa7c 	.word	0x0800aa7c

08008190 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8008190:	b500      	push	{lr}
 8008192:	b085      	sub	sp, #20
 8008194:	9001      	str	r0, [sp, #4]
 8008196:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff ff90 	bl	80080c0 <ch_queue_fifo_remove.lto_priv.0>
 80081a0:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	9a00      	ldr	r2, [sp, #0]
 80081a6:	635a      	str	r2, [r3, #52]	; 0x34
  (void) chSchReadyI(tp);
 80081a8:	9803      	ldr	r0, [sp, #12]
 80081aa:	f7ff fd09 	bl	8007bc0 <chSchReadyI>
}
 80081ae:	b005      	add	sp, #20
 80081b0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080081c0 <chThdObjectInit>:
 * @return              The same thread pointer passed as parameter.
 *
 * @init
 */
thread_t *chThdObjectInit(thread_t *tp,
                          const thread_descriptor_t *tdp) {
 80081c0:	b500      	push	{lr}
 80081c2:	b083      	sub	sp, #12
 80081c4:	9001      	str	r0, [sp, #4]
 80081c6:	9100      	str	r1, [sp, #0]

  chDbgCheck(tp != NULL);
 80081c8:	9b01      	ldr	r3, [sp, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bf0c      	ite	eq
 80081ce:	2301      	moveq	r3, #1
 80081d0:	2300      	movne	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <chThdObjectInit+0x1e>
 80081d8:	4828      	ldr	r0, [pc, #160]	; (800827c <chThdObjectInit+0xbc>)
 80081da:	f7ff f8e9 	bl	80073b0 <chSysHalt>
  chDbgCheck(tdp != NULL);
 80081de:	9b00      	ldr	r3, [sp, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <chThdObjectInit+0x34>
 80081ee:	4823      	ldr	r0, [pc, #140]	; (800827c <chThdObjectInit+0xbc>)
 80081f0:	f7ff f8de 	bl	80073b0 <chSysHalt>

  /* Stack boundaries.*/
  tp->wabase = (void *)tdp->wbase;
 80081f4:	9b00      	ldr	r3, [sp, #0]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	9b01      	ldr	r3, [sp, #4]
 80081fa:	615a      	str	r2, [r3, #20]
  tp->waend  = (void *)tdp->wend;
 80081fc:	9b00      	ldr	r3, [sp, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	619a      	str	r2, [r3, #24]

  /* Thread-related fields.*/
  tp->hdr.pqueue.prio   = tdp->prio;
 8008204:	9b00      	ldr	r3, [sp, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	9b01      	ldr	r3, [sp, #4]
 800820a:	609a      	str	r2, [r3, #8]
  tp->state             = CH_STATE_WTSTART;
 800820c:	9b01      	ldr	r3, [sp, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	771a      	strb	r2, [r3, #28]
  tp->flags             = (tmode_t)0;
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	775a      	strb	r2, [r3, #29]
  if (tdp->owner != NULL) {
 8008218:	9b00      	ldr	r3, [sp, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <chThdObjectInit+0x6a>
    tp->owner           = tdp->owner;
 8008220:	9b00      	ldr	r3, [sp, #0]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	9b01      	ldr	r3, [sp, #4]
 8008226:	611a      	str	r2, [r3, #16]
 8008228:	e002      	b.n	8008230 <chThdObjectInit+0x70>
  }
  else {
    tp->owner           = currcore;
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	4a14      	ldr	r2, [pc, #80]	; (8008280 <chThdObjectInit+0xc0>)
 800822e:	611a      	str	r2, [r3, #16]
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->dispose           = NULL;
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	62da      	str	r2, [r3, #44]	; 0x2c
  tp->object            = NULL;
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  ch_list_init(&tp->waiting);
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	3338      	adds	r3, #56	; 0x38
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff fedd 	bl	8008000 <ch_list_init>
#endif

  /* Mutex-related fields.*/
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio          = tdp->prio;
 8008246:	9b00      	ldr	r3, [sp, #0]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	9b01      	ldr	r3, [sp, #4]
 800824c:	64da      	str	r2, [r3, #76]	; 0x4c
  tp->mtxlist           = NULL;
 800824e:	9b01      	ldr	r3, [sp, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	649a      	str	r2, [r3, #72]	; 0x48
#endif

  /* Events-related fields.*/
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending          = (eventmask_t)0;
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	645a      	str	r2, [r3, #68]	; 0x44
  tp->time              = (systime_t)0;
#endif

  /* Registry-related fields.*/
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs              = (trefs_t)1;
 800825a:	9b01      	ldr	r3, [sp, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	779a      	strb	r2, [r3, #30]
  tp->name              = tdp->name;
 8008260:	9b00      	ldr	r3, [sp, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	621a      	str	r2, [r3, #32]
  (void)name;
#endif

  /* Messages-related fields.*/
#if CH_CFG_USE_MESSAGES == TRUE
  ch_queue_init(&tp->msgqueue);
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	333c      	adds	r3, #60	; 0x3c
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff feef 	bl	8008050 <ch_queue_init.lto_priv.1>
#endif

  /* Custom thread initialization code.*/
  CH_CFG_THREAD_INIT_HOOK(tp);

  return tp;
 8008272:	9b01      	ldr	r3, [sp, #4]
}
 8008274:	4618      	mov	r0, r3
 8008276:	b003      	add	sp, #12
 8008278:	f85d fb04 	ldr.w	pc, [sp], #4
 800827c:	0800aa40 	.word	0x0800aa40
 8008280:	20000fa0 	.word	0x20000fa0
	...

08008290 <chThdSpawnSuspendedI>:
 * @return              Reference to the @p thread_t object.
 *
 * @api
 */
thread_t *chThdSpawnSuspendedI(thread_t *tp,
                               const thread_descriptor_t *tdp) {
 8008290:	b500      	push	{lr}
 8008292:	b083      	sub	sp, #12
 8008294:	9001      	str	r0, [sp, #4]
 8008296:	9100      	str	r1, [sp, #0]

  chDbgCheck(tp != NULL);
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf0c      	ite	eq
 800829e:	2301      	moveq	r3, #1
 80082a0:	2300      	movne	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <chThdSpawnSuspendedI+0x1e>
 80082a8:	483e      	ldr	r0, [pc, #248]	; (80083a4 <chThdSpawnSuspendedI+0x114>)
 80082aa:	f7ff f881 	bl	80073b0 <chSysHalt>
  chDbgCheck(tdp != NULL);
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bf0c      	ite	eq
 80082b4:	2301      	moveq	r3, #1
 80082b6:	2300      	movne	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <chThdSpawnSuspendedI+0x34>
 80082be:	4839      	ldr	r0, [pc, #228]	; (80083a4 <chThdSpawnSuspendedI+0x114>)
 80082c0:	f7ff f876 	bl	80073b0 <chSysHalt>

  /* Checks related to the working area geometry.*/
  chDbgCheck((tdp != NULL) &&
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bf0c      	ite	eq
 80082ca:	2301      	moveq	r3, #1
 80082cc:	2300      	movne	r3, #0
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <chThdSpawnSuspendedI+0x5a>
 80082d4:	9b00      	ldr	r3, [sp, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bf14      	ite	ne
 80082e0:	2301      	movne	r3, #1
 80082e2:	2300      	moveq	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <chThdSpawnSuspendedI+0x5e>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <chThdSpawnSuspendedI+0x60>
 80082ee:	2300      	movs	r3, #0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <chThdSpawnSuspendedI+0x7a>
 80082f4:	9b00      	ldr	r3, [sp, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bf14      	ite	ne
 8008300:	2301      	movne	r3, #1
 8008302:	2300      	moveq	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <chThdSpawnSuspendedI+0x7e>
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <chThdSpawnSuspendedI+0x80>
 800830e:	2300      	movs	r3, #0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <chThdSpawnSuspendedI+0x9a>
 8008314:	9b00      	ldr	r3, [sp, #0]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	9b00      	ldr	r3, [sp, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	429a      	cmp	r2, r3
 800831e:	bf94      	ite	ls
 8008320:	2301      	movls	r3, #1
 8008322:	2300      	movhi	r3, #0
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <chThdSpawnSuspendedI+0x9e>
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <chThdSpawnSuspendedI+0xa0>
 800832e:	2300      	movs	r3, #0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10c      	bne.n	800834e <chThdSpawnSuspendedI+0xbe>
 8008334:	9b00      	ldr	r3, [sp, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	461a      	mov	r2, r3
 800833a:	9b00      	ldr	r3, [sp, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2ba7      	cmp	r3, #167	; 0xa7
 8008342:	bf94      	ite	ls
 8008344:	2301      	movls	r3, #1
 8008346:	2300      	movhi	r3, #0
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <chThdSpawnSuspendedI+0xc4>
 800834e:	4815      	ldr	r0, [pc, #84]	; (80083a4 <chThdSpawnSuspendedI+0x114>)
 8008350:	f7ff f82e 	bl	80073b0 <chSysHalt>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_STACK_SIZE(0)));

  /* Thread object initialization.*/
  tp = chThdObjectInit(tp, tdp);
 8008354:	9900      	ldr	r1, [sp, #0]
 8008356:	9801      	ldr	r0, [sp, #4]
 8008358:	f7ff ff32 	bl	80081c0 <chThdObjectInit>
 800835c:	9001      	str	r0, [sp, #4]

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8008366:	9b01      	ldr	r3, [sp, #4]
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	9b00      	ldr	r3, [sp, #0]
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	9b00      	ldr	r3, [sp, #0]
 8008376:	695a      	ldr	r2, [r3, #20]
 8008378:	9b01      	ldr	r3, [sp, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	9b01      	ldr	r3, [sp, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	4a09      	ldr	r2, [pc, #36]	; (80083a8 <chThdSpawnSuspendedI+0x118>)
 8008384:	621a      	str	r2, [r3, #32]

  /* Registry-related fields.*/
#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(tp->owner, tp);
 8008386:	9b01      	ldr	r3, [sp, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800838e:	9b01      	ldr	r3, [sp, #4]
 8008390:	3324      	adds	r3, #36	; 0x24
 8008392:	4619      	mov	r1, r3
 8008394:	4610      	mov	r0, r2
 8008396:	f7ff fe7b 	bl	8008090 <ch_queue_insert.lto_priv.1>
#endif

  return tp;
 800839a:	9b01      	ldr	r3, [sp, #4]
}
 800839c:	4618      	mov	r0, r3
 800839e:	b003      	add	sp, #12
 80083a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80083a4:	0800aa50 	.word	0x0800aa50
 80083a8:	08000261 	.word	0x08000261
 80083ac:	00000000 	.word	0x00000000

080083b0 <chThdSpawnRunningI>:
 * @param[in] tdp       pointer to a @p thread_descriptor_t object
 * @return              Reference to the @p thread_t object.
 *
 * @iclass
 */
thread_t *chThdSpawnRunningI(thread_t *tp, const thread_descriptor_t *tdp) {
 80083b0:	b500      	push	{lr}
 80083b2:	b083      	sub	sp, #12
 80083b4:	9001      	str	r0, [sp, #4]
 80083b6:	9100      	str	r1, [sp, #0]

  return chSchReadyI(chThdSpawnSuspendedI(tp, tdp));
 80083b8:	9900      	ldr	r1, [sp, #0]
 80083ba:	9801      	ldr	r0, [sp, #4]
 80083bc:	f7ff ff68 	bl	8008290 <chThdSpawnSuspendedI>
 80083c0:	4603      	mov	r3, r0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff fbfc 	bl	8007bc0 <chSchReadyI>
 80083c8:	4603      	mov	r3, r0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	b003      	add	sp, #12
 80083ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80083d2:	bf00      	nop
	...

080083e0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wbase, size_t wsize,
                            tprio_t prio, tfunc_t func, void *arg) {
 80083e0:	b500      	push	{lr}
 80083e2:	b08f      	sub	sp, #60	; 0x3c
 80083e4:	9003      	str	r0, [sp, #12]
 80083e6:	9102      	str	r1, [sp, #8]
 80083e8:	9201      	str	r2, [sp, #4]
 80083ea:	9300      	str	r3, [sp, #0]
  thread_t *tp;
  uint8_t *wend;

  /* Checks related to the working area geometry.*/
  chDbgCheck((wbase != NULL) &&
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bf0c      	ite	eq
 80083f2:	2301      	moveq	r3, #1
 80083f4:	2300      	movne	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d109      	bne.n	8008410 <chThdCreateStatic+0x30>
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf14      	ite	ne
 8008406:	2301      	movne	r3, #1
 8008408:	2300      	moveq	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <chThdCreateStatic+0x34>
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <chThdCreateStatic+0x36>
 8008414:	2300      	movs	r3, #0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d107      	bne.n	800842a <chThdCreateStatic+0x4a>
 800841a:	9b02      	ldr	r3, [sp, #8]
 800841c:	2bf7      	cmp	r3, #247	; 0xf7
 800841e:	bf94      	ite	ls
 8008420:	2301      	movls	r3, #1
 8008422:	2300      	movhi	r3, #0
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <chThdCreateStatic+0x4e>
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <chThdCreateStatic+0x50>
 800842e:	2300      	movs	r3, #0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d109      	bne.n	8008448 <chThdCreateStatic+0x68>
 8008434:	9b02      	ldr	r3, [sp, #8]
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	2b00      	cmp	r3, #0
 800843c:	bf14      	ite	ne
 800843e:	2301      	movne	r3, #1
 8008440:	2300      	moveq	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <chThdCreateStatic+0x6e>
 8008448:	482c      	ldr	r0, [pc, #176]	; (80084fc <chThdCreateStatic+0x11c>)
 800844a:	f7fe ffb1 	bl	80073b0 <chSysHalt>
             MEM_IS_ALIGNED(wbase, PORT_WORKING_AREA_ALIGN) &&
             (wsize >= THD_WORKING_AREA_SIZE(0)) &&
             MEM_IS_ALIGNED(wsize, PORT_STACK_ALIGN));

  /* Other checks.*/
  chDbgCheck((prio <= HIGHPRIO) && (func != NULL));
 800844e:	9b01      	ldr	r3, [sp, #4]
 8008450:	2bff      	cmp	r3, #255	; 0xff
 8008452:	bf8c      	ite	hi
 8008454:	2301      	movhi	r3, #1
 8008456:	2300      	movls	r3, #0
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d107      	bne.n	800846e <chThdCreateStatic+0x8e>
 800845e:	9b00      	ldr	r3, [sp, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	bf0c      	ite	eq
 8008464:	2301      	moveq	r3, #1
 8008466:	2300      	movne	r3, #0
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <chThdCreateStatic+0x94>
 800846e:	4823      	ldr	r0, [pc, #140]	; (80084fc <chThdCreateStatic+0x11c>)
 8008470:	f7fe ff9e 	bl	80073b0 <chSysHalt>
     active thread.*/
  chDbgAssert(chRegFindThreadByWorkingArea(wbase) == NULL,
              "working area in use");

  /* Working area end address.*/
  wend = (uint8_t *)wbase + wsize;
 8008474:	9a03      	ldr	r2, [sp, #12]
 8008476:	9b02      	ldr	r3, [sp, #8]
 8008478:	4413      	add	r3, r2
 800847a:	930d      	str	r3, [sp, #52]	; 0x34
#endif

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = threadref(wend - MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 800847c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800847e:	3b50      	subs	r3, #80	; 0x50
 8008480:	930c      	str	r3, [sp, #48]	; 0x30

  /* Initializing the thread_t structure using the passed parameters.*/
  THD_DESC_DECL(desc, "noname", wbase, wend, prio, func, arg, currcore, NULL);
 8008482:	4b1f      	ldr	r3, [pc, #124]	; (8008500 <chThdCreateStatic+0x120>)
 8008484:	9305      	str	r3, [sp, #20]
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	9306      	str	r3, [sp, #24]
 800848a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800848c:	9307      	str	r3, [sp, #28]
 800848e:	9b01      	ldr	r3, [sp, #4]
 8008490:	9308      	str	r3, [sp, #32]
 8008492:	9b00      	ldr	r3, [sp, #0]
 8008494:	9309      	str	r3, [sp, #36]	; 0x24
 8008496:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008498:	930a      	str	r3, [sp, #40]	; 0x28
 800849a:	4b1a      	ldr	r3, [pc, #104]	; (8008504 <chThdCreateStatic+0x124>)
 800849c:	930b      	str	r3, [sp, #44]	; 0x2c
  tp = chThdObjectInit(tp, &desc);
 800849e:	ab05      	add	r3, sp, #20
 80084a0:	4619      	mov	r1, r3
 80084a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084a4:	f7ff fe8c 	bl	80081c0 <chThdObjectInit>
 80084a8:	900c      	str	r0, [sp, #48]	; 0x30

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
 80084aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084ac:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 80084b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b2:	60da      	str	r2, [r3, #12]
 80084b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	9a00      	ldr	r2, [sp, #0]
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084c2:	605a      	str	r2, [r3, #4]
 80084c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	4a0f      	ldr	r2, [pc, #60]	; (8008508 <chThdCreateStatic+0x128>)
 80084ca:	621a      	str	r2, [r3, #32]

  chSysLock();
 80084cc:	f7ff fe20 	bl	8008110 <chSysLock.lto_priv.10>

#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(tp->owner, tp);
 80084d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80084d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084da:	3324      	adds	r3, #36	; 0x24
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7ff fdd6 	bl	8008090 <ch_queue_insert.lto_priv.1>
#endif

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80084e4:	2100      	movs	r1, #0
 80084e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084e8:	f7ff fbea 	bl	8007cc0 <chSchWakeupS>
  chSysUnlock();
 80084ec:	f7ff fe20 	bl	8008130 <chSysUnlock.lto_priv.10>

  return tp;
 80084f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	b00f      	add	sp, #60	; 0x3c
 80084f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80084fa:	bf00      	nop
 80084fc:	0800aa68 	.word	0x0800aa68
 8008500:	0800aa38 	.word	0x0800aa38
 8008504:	20000fa0 	.word	0x20000fa0
 8008508:	08000261 	.word	0x08000261
 800850c:	00000000 	.word	0x00000000

08008510 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8008510:	b500      	push	{lr}
 8008512:	b083      	sub	sp, #12
 8008514:	9001      	str	r0, [sp, #4]

  chSysLock();
 8008516:	f7ff fdfb 	bl	8008110 <chSysLock.lto_priv.10>
  chThdExitS(msg);
 800851a:	9801      	ldr	r0, [sp, #4]
 800851c:	f000 f808 	bl	8008530 <chThdExitS>
  /* The thread never returns here.*/
}
 8008520:	b003      	add	sp, #12
 8008522:	f85d fb04 	ldr.w	pc, [sp], #4
 8008526:	bf00      	nop
	...

08008530 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8008530:	b500      	push	{lr}
 8008532:	b085      	sub	sp, #20
 8008534:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8008536:	f7ff fe0b 	bl	8008150 <chThdGetSelfX.lto_priv.0>
 800853a:	9003      	str	r0, [sp, #12]

  /* Storing exit message.*/
  currtp->u.exitcode = msg;
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	9a01      	ldr	r2, [sp, #4]
 8008540:	635a      	str	r2, [r3, #52]	; 0x34
 8008542:	e008      	b.n	8008556 <chThdExitS+0x26>
  CH_CFG_THREAD_EXIT_HOOK(currtp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	3338      	adds	r3, #56	; 0x38
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fd71 	bl	8008030 <ch_list_unlink>
 800854e:	4603      	mov	r3, r0
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fb35 	bl	8007bc0 <chSchReadyI>
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	3338      	adds	r3, #56	; 0x38
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fd58 	bl	8008010 <ch_list_notempty>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1ee      	bne.n	8008544 <chThdExitS+0x14>
  }
#endif

#if CH_CFG_USE_REGISTRY == TRUE
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	7f9b      	ldrb	r3, [r3, #30]
 800856a:	2b00      	cmp	r3, #0
 800856c:	bf0c      	ite	eq
 800856e:	2301      	moveq	r3, #1
 8008570:	2300      	movne	r3, #0
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b00      	cmp	r3, #0
 8008576:	d008      	beq.n	800858a <chThdExitS+0x5a>
#if CH_CFG_USE_DYNAMIC == TRUE
    /* Threads without a dispose callback are immediately removed from the
       registry because there is no memory to be recovered.*/
    if (currtp->dispose == NULL) {
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <chThdExitS+0x5a>
      REG_REMOVE(currtp);
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	3324      	adds	r3, #36	; 0x24
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff fdb3 	bl	80080f0 <ch_queue_dequeue.lto_priv.1>
#endif
  }
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 800858a:	200f      	movs	r0, #15
 800858c:	f7ff fb38 	bl	8007c00 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8008590:	b005      	add	sp, #20
 8008592:	f85d fb04 	ldr.w	pc, [sp], #4
 8008596:	bf00      	nop
	...

080085a0 <chThdSleep>:
 *                        state.
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 80085a0:	b500      	push	{lr}
 80085a2:	b083      	sub	sp, #12
 80085a4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80085a6:	f7ff fdb3 	bl	8008110 <chSysLock.lto_priv.10>
  chThdSleepS(time);
 80085aa:	9801      	ldr	r0, [sp, #4]
 80085ac:	f7ff fdd8 	bl	8008160 <chThdSleepS>
  chSysUnlock();
 80085b0:	f7ff fdbe 	bl	8008130 <chSysUnlock.lto_priv.10>
}
 80085b4:	b003      	add	sp, #12
 80085b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80085ba:	bf00      	nop
 80085bc:	0000      	movs	r0, r0
	...

080085c0 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 80085c0:	b500      	push	{lr}
 80085c2:	b085      	sub	sp, #20
 80085c4:	9001      	str	r0, [sp, #4]
 80085c6:	9100      	str	r1, [sp, #0]
  thread_t *tp = chThdGetSelfX();
 80085c8:	f7ff fdc2 	bl	8008150 <chThdGetSelfX.lto_priv.0>
 80085cc:	9003      	str	r0, [sp, #12]

  chDbgAssert(*trp == NULL, "not NULL");

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80085ce:	9b00      	ldr	r3, [sp, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	bf0c      	ite	eq
 80085d4:	2301      	moveq	r3, #1
 80085d6:	2300      	movne	r3, #0
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <chThdSuspendTimeoutS+0x24>
    return MSG_TIMEOUT;
 80085de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085e2:	e00a      	b.n	80085fa <chThdSuspendTimeoutS+0x3a>
  }

  *trp = tp;
 80085e4:	9b01      	ldr	r3, [sp, #4]
 80085e6:	9a03      	ldr	r2, [sp, #12]
 80085e8:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 80085ea:	9b03      	ldr	r3, [sp, #12]
 80085ec:	9a01      	ldr	r2, [sp, #4]
 80085ee:	635a      	str	r2, [r3, #52]	; 0x34

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80085f0:	9900      	ldr	r1, [sp, #0]
 80085f2:	2003      	movs	r0, #3
 80085f4:	f7ff fb2c 	bl	8007c50 <chSchGoSleepTimeoutS>
 80085f8:	4603      	mov	r3, r0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	b005      	add	sp, #20
 80085fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008602:	bf00      	nop
	...

08008610 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8008610:	b500      	push	{lr}
 8008612:	b085      	sub	sp, #20
 8008614:	9001      	str	r0, [sp, #4]
 8008616:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <chThdResumeI+0x28>
    thread_t *tp = *trp;
 8008620:	9b01      	ldr	r3, [sp, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 800862c:	9b03      	ldr	r3, [sp, #12]
 800862e:	9a00      	ldr	r2, [sp, #0]
 8008630:	635a      	str	r2, [r3, #52]	; 0x34
    (void) chSchReadyI(tp);
 8008632:	9803      	ldr	r0, [sp, #12]
 8008634:	f7ff fac4 	bl	8007bc0 <chSchReadyI>
  }
}
 8008638:	b005      	add	sp, #20
 800863a:	f85d fb04 	ldr.w	pc, [sp], #4
 800863e:	bf00      	nop

08008640 <chThdQueueObjectInit>:
 *
 * @param[out] tqp      pointer to a @p threads_queue_t object
 *
 * @init
 */
void chThdQueueObjectInit(threads_queue_t *tqp) {
 8008640:	b500      	push	{lr}
 8008642:	b083      	sub	sp, #12
 8008644:	9001      	str	r0, [sp, #4]

  chDbgCheck(tqp);
 8008646:	9b01      	ldr	r3, [sp, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	bf0c      	ite	eq
 800864c:	2301      	moveq	r3, #1
 800864e:	2300      	movne	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <chThdQueueObjectInit+0x1c>
 8008656:	4805      	ldr	r0, [pc, #20]	; (800866c <chThdQueueObjectInit+0x2c>)
 8008658:	f7fe feaa 	bl	80073b0 <chSysHalt>

  ch_queue_init(&tqp->queue);
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fcf6 	bl	8008050 <ch_queue_init.lto_priv.1>
}
 8008664:	b003      	add	sp, #12
 8008666:	f85d fb04 	ldr.w	pc, [sp], #4
 800866a:	bf00      	nop
 800866c:	0800aa88 	.word	0x0800aa88

08008670 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8008670:	b500      	push	{lr}
 8008672:	b085      	sub	sp, #20
 8008674:	9001      	str	r0, [sp, #4]
 8008676:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 8008678:	f7ff fd6a 	bl	8008150 <chThdGetSelfX.lto_priv.0>
 800867c:	9003      	str	r0, [sp, #12]

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800867e:	9b00      	ldr	r3, [sp, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	bf0c      	ite	eq
 8008684:	2301      	moveq	r3, #1
 8008686:	2300      	movne	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <chThdEnqueueTimeoutS+0x24>
    return MSG_TIMEOUT;
 800868e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008692:	e009      	b.n	80086a8 <chThdEnqueueTimeoutS+0x38>
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
 8008694:	9b01      	ldr	r3, [sp, #4]
 8008696:	9903      	ldr	r1, [sp, #12]
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff fcf9 	bl	8008090 <ch_queue_insert.lto_priv.1>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800869e:	9900      	ldr	r1, [sp, #0]
 80086a0:	2004      	movs	r0, #4
 80086a2:	f7ff fad5 	bl	8007c50 <chSchGoSleepTimeoutS>
 80086a6:	4603      	mov	r3, r0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	b005      	add	sp, #20
 80086ac:	f85d fb04 	ldr.w	pc, [sp], #4

080086b0 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80086b0:	b500      	push	{lr}
 80086b2:	b083      	sub	sp, #12
 80086b4:	9001      	str	r0, [sp, #4]
 80086b6:	9100      	str	r1, [sp, #0]

  if (ch_queue_notempty(&tqp->queue)) {
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff fcd8 	bl	8008070 <ch_queue_notempty.lto_priv.0>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
 80086c6:	9900      	ldr	r1, [sp, #0]
 80086c8:	9801      	ldr	r0, [sp, #4]
 80086ca:	f7ff fd61 	bl	8008190 <chThdDoDequeueNextI>
  }
}
 80086ce:	b003      	add	sp, #12
 80086d0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080086e0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80086e0:	b500      	push	{lr}
 80086e2:	b083      	sub	sp, #12
 80086e4:	9001      	str	r0, [sp, #4]
 80086e6:	9100      	str	r1, [sp, #0]
 80086e8:	e003      	b.n	80086f2 <chThdDequeueAllI+0x12>

  while (ch_queue_notempty(&tqp->queue)) {
    chThdDoDequeueNextI(tqp, msg);
 80086ea:	9900      	ldr	r1, [sp, #0]
 80086ec:	9801      	ldr	r0, [sp, #4]
 80086ee:	f7ff fd4f 	bl	8008190 <chThdDoDequeueNextI>
  while (ch_queue_notempty(&tqp->queue)) {
 80086f2:	9b01      	ldr	r3, [sp, #4]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fcbb 	bl	8008070 <ch_queue_notempty.lto_priv.0>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1f4      	bne.n	80086ea <chThdDequeueAllI+0xa>
  }
}
 8008700:	b003      	add	sp, #12
 8008702:	f85d fb04 	ldr.w	pc, [sp], #4
 8008706:	bf00      	nop
	...

08008710 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8008710:	b430      	push	{r4, r5}
 8008712:	b084      	sub	sp, #16
 8008714:	9003      	str	r0, [sp, #12]
 8008716:	9102      	str	r1, [sp, #8]
 8008718:	9201      	str	r2, [sp, #4]

  tmp->n++;
 800871a:	9b03      	ldr	r3, [sp, #12]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	9a02      	ldr	r2, [sp, #8]
 800872a:	1ad2      	subs	r2, r2, r3
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	1ad2      	subs	r2, r2, r3
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	461a      	mov	r2, r3
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	1884      	adds	r4, r0, r2
 8008746:	eb41 0503 	adc.w	r5, r1, r3
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	e9c3 4504 	strd	r4, r5, [r3, #16]
  if (tmp->last > tmp->worst) {
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	9b03      	ldr	r3, [sp, #12]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	429a      	cmp	r2, r3
 800875a:	d903      	bls.n	8008764 <tm_stop+0x54>
    tmp->worst = tmp->last;
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	9b03      	ldr	r3, [sp, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d203      	bcs.n	8008778 <tm_stop+0x68>
    tmp->best = tmp->last;
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	601a      	str	r2, [r3, #0]
  }
}
 8008778:	b004      	add	sp, #16
 800877a:	bc30      	pop	{r4, r5}
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop

08008780 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p time_measurement_t object
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8008780:	b082      	sub	sp, #8
 8008782:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800878a:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 800878c:	9b01      	ldr	r3, [sp, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8008792:	9b01      	ldr	r3, [sp, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 8008798:	9b01      	ldr	r3, [sp, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 800879e:	9901      	ldr	r1, [sp, #4]
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80087ac:	b002      	add	sp, #8
 80087ae:	4770      	bx	lr

080087b0 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t object
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 80087b0:	b082      	sub	sp, #8
 80087b2:	9001      	str	r0, [sp, #4]
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <chTMStartMeasurementX+0x10>)
 80087b6:	685a      	ldr	r2, [r3, #4]

  tmp->last = chSysGetRealtimeCounterX();
 80087b8:	9b01      	ldr	r3, [sp, #4]
 80087ba:	609a      	str	r2, [r3, #8]
}
 80087bc:	b002      	add	sp, #8
 80087be:	4770      	bx	lr
 80087c0:	e0001000 	.word	0xe0001000
	...

080087d0 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t object
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80087d0:	b500      	push	{lr}
 80087d2:	b083      	sub	sp, #12
 80087d4:	9001      	str	r0, [sp, #4]
 80087d6:	4b05      	ldr	r3, [pc, #20]	; (80087ec <chTMStopMeasurementX+0x1c>)
 80087d8:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 80087da:	4a05      	ldr	r2, [pc, #20]	; (80087f0 <chTMStopMeasurementX+0x20>)
 80087dc:	6892      	ldr	r2, [r2, #8]
 80087de:	4619      	mov	r1, r3
 80087e0:	9801      	ldr	r0, [sp, #4]
 80087e2:	f7ff ff95 	bl	8008710 <tm_stop>
}
 80087e6:	b003      	add	sp, #12
 80087e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80087ec:	e0001000 	.word	0xe0001000
 80087f0:	20000f90 	.word	0x20000f90
	...

08008800 <ch_queue_init.lto_priv.3>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8008800:	b082      	sub	sp, #8
 8008802:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	9a01      	ldr	r2, [sp, #4]
 8008808:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	9a01      	ldr	r2, [sp, #4]
 800880e:	605a      	str	r2, [r3, #4]
}
 8008810:	b002      	add	sp, #8
 8008812:	4770      	bx	lr
	...

08008820 <ch_queue_notempty.lto_priv.2>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8008820:	b082      	sub	sp, #8
 8008822:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	9a01      	ldr	r2, [sp, #4]
 800882a:	429a      	cmp	r2, r3
 800882c:	bf14      	ite	ne
 800882e:	2301      	movne	r3, #1
 8008830:	2300      	moveq	r3, #0
 8008832:	b2db      	uxtb	r3, r3
}
 8008834:	4618      	mov	r0, r3
 8008836:	b002      	add	sp, #8
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	0000      	movs	r0, r0
	...

08008840 <ch_queue_fifo_remove.lto_priv.2>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 8008840:	b084      	sub	sp, #16
 8008842:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	9b01      	ldr	r3, [sp, #4]
 8008850:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 8008852:	9b01      	ldr	r3, [sp, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	9a01      	ldr	r2, [sp, #4]
 8008858:	605a      	str	r2, [r3, #4]
  return p;
 800885a:	9b03      	ldr	r3, [sp, #12]
}
 800885c:	4618      	mov	r0, r3
 800885e:	b004      	add	sp, #16
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
	...

08008870 <ch_queue_dequeue.lto_priv.2>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8008870:	b082      	sub	sp, #8
 8008872:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8008874:	9b01      	ldr	r3, [sp, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	9a01      	ldr	r2, [sp, #4]
 800887a:	6812      	ldr	r2, [r2, #0]
 800887c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 800887e:	9b01      	ldr	r3, [sp, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	9a01      	ldr	r2, [sp, #4]
 8008884:	6852      	ldr	r2, [r2, #4]
 8008886:	605a      	str	r2, [r3, #4]
  return p;
 8008888:	9b01      	ldr	r3, [sp, #4]
}
 800888a:	4618      	mov	r0, r3
 800888c:	b002      	add	sp, #8
 800888e:	4770      	bx	lr

08008890 <chSysLock.lto_priv.13>:
static inline void chSysLock(void) {
 8008890:	b500      	push	{lr}
 8008892:	b083      	sub	sp, #12
 8008894:	2330      	movs	r3, #48	; 0x30
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 800889e:	f7fe fd9f 	bl	80073e0 <__dbg_check_lock>
}
 80088a2:	b003      	add	sp, #12
 80088a4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080088b0 <chSysUnlock.lto_priv.13>:
static inline void chSysUnlock(void) {
 80088b0:	b500      	push	{lr}
 80088b2:	b083      	sub	sp, #12
  __dbg_check_unlock();
 80088b4:	f7fe fdbc 	bl	8007430 <__dbg_check_unlock>
 80088b8:	2300      	movs	r3, #0
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	f383 8811 	msr	BASEPRI, r3
}
 80088c2:	b003      	add	sp, #12
 80088c4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080088d0 <ch_sch_prio_insert.lto_priv.0>:
/*===========================================================================*/

/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 80088d0:	b084      	sub	sp, #16
 80088d2:	9001      	str	r0, [sp, #4]
 80088d4:	9100      	str	r1, [sp, #0]

  ch_queue_t *cp = qp;
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->next;
 80088da:	9b03      	ldr	r3, [sp, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	9303      	str	r3, [sp, #12]
  } while ((cp != qp) &&
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 80088e0:	9a03      	ldr	r2, [sp, #12]
 80088e2:	9b01      	ldr	r3, [sp, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d005      	beq.n	80088f4 <ch_sch_prio_insert.lto_priv.0+0x24>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	9b00      	ldr	r3, [sp, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
  } while ((cp != qp) &&
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d2f2      	bcs.n	80088da <ch_sch_prio_insert.lto_priv.0+0xa>
  tp->next       = cp;
 80088f4:	9b00      	ldr	r3, [sp, #0]
 80088f6:	9a03      	ldr	r2, [sp, #12]
 80088f8:	601a      	str	r2, [r3, #0]
  tp->prev       = cp->prev;
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	9b00      	ldr	r3, [sp, #0]
 8008900:	605a      	str	r2, [r3, #4]
  tp->prev->next = tp;
 8008902:	9b00      	ldr	r3, [sp, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	9a00      	ldr	r2, [sp, #0]
 8008908:	601a      	str	r2, [r3, #0]
  cp->prev       = tp;
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	9a00      	ldr	r2, [sp, #0]
 800890e:	605a      	str	r2, [r3, #4]
}
 8008910:	b004      	add	sp, #16
 8008912:	4770      	bx	lr
	...

08008920 <chThdGetSelfX.lto_priv.2>:
  return __sch_get_currthread();
 8008920:	4b01      	ldr	r3, [pc, #4]	; (8008928 <chThdGetSelfX.lto_priv.2+0x8>)
 8008922:	68db      	ldr	r3, [r3, #12]
}
 8008924:	4618      	mov	r0, r3
 8008926:	4770      	bx	lr
 8008928:	20000fa0 	.word	0x20000fa0
 800892c:	00000000 	.word	0x00000000

08008930 <chMtxQueueNotEmptyS>:
 * @param[out] mp       pointer to a @p mutex_t object
 * @return              The mutex queue status.
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
 8008930:	b500      	push	{lr}
 8008932:	b083      	sub	sp, #12
 8008934:	9001      	str	r0, [sp, #4]

  chDbgCheckClassS();
 8008936:	f7fe fe7b 	bl	8007630 <chDbgCheckClassS>

  return ch_queue_notempty(&mp->queue);
 800893a:	9b01      	ldr	r3, [sp, #4]
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff ff6f 	bl	8008820 <ch_queue_notempty.lto_priv.2>
 8008942:	4603      	mov	r3, r0
}
 8008944:	4618      	mov	r0, r3
 8008946:	b003      	add	sp, #12
 8008948:	f85d fb04 	ldr.w	pc, [sp], #4
 800894c:	0000      	movs	r0, r0
	...

08008950 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t object
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8008950:	b500      	push	{lr}
 8008952:	b083      	sub	sp, #12
 8008954:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);
 8008956:	9b01      	ldr	r3, [sp, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	bf0c      	ite	eq
 800895c:	2301      	moveq	r3, #1
 800895e:	2300      	movne	r3, #0
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <chMtxObjectInit+0x1c>
 8008966:	4806      	ldr	r0, [pc, #24]	; (8008980 <chMtxObjectInit+0x30>)
 8008968:	f7fe fd22 	bl	80073b0 <chSysHalt>

  ch_queue_init(&mp->queue);
 800896c:	9b01      	ldr	r3, [sp, #4]
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff ff46 	bl	8008800 <ch_queue_init.lto_priv.3>
  mp->owner = NULL;
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 800897a:	b003      	add	sp, #12
 800897c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008980:	0800aaa0 	.word	0x0800aaa0
	...

08008990 <chMtxLock>:
 *
 * @param[in] mp        pointer to a @p mutex_t object
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8008990:	b500      	push	{lr}
 8008992:	b083      	sub	sp, #12
 8008994:	9001      	str	r0, [sp, #4]

  chSysLock();
 8008996:	f7ff ff7b 	bl	8008890 <chSysLock.lto_priv.13>
  chMtxLockS(mp);
 800899a:	9801      	ldr	r0, [sp, #4]
 800899c:	f000 f808 	bl	80089b0 <chMtxLockS>
  chSysUnlock();
 80089a0:	f7ff ff86 	bl	80088b0 <chSysUnlock.lto_priv.13>
}
 80089a4:	b003      	add	sp, #12
 80089a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80089aa:	bf00      	nop
 80089ac:	0000      	movs	r0, r0
	...

080089b0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to a @p mutex_t object
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80089b0:	b510      	push	{r4, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 80089b6:	f7ff ffb3 	bl	8008920 <chThdGetSelfX.lto_priv.2>
 80089ba:	9002      	str	r0, [sp, #8]

  chDbgCheckClassS();
 80089bc:	f7fe fe38 	bl	8007630 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 80089c0:	9b01      	ldr	r3, [sp, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bf0c      	ite	eq
 80089c6:	2301      	moveq	r3, #1
 80089c8:	2300      	movne	r3, #0
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <chMtxLockS+0x26>
 80089d0:	4830      	ldr	r0, [pc, #192]	; (8008a94 <chMtxLockS+0xe4>)
 80089d2:	f7fe fced 	bl	80073b0 <chSysHalt>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d04d      	beq.n	8008a7a <chMtxLockS+0xca>
    else {
#endif
      /* Priority inheritance protocol; explores the thread-mutex dependencies
         boosting the priority of all the affected threads to equal the
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	9303      	str	r3, [sp, #12]
 80089e4:	e034      	b.n	8008a50 <chMtxLockS+0xa0>

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 80089e6:	9b02      	ldr	r3, [sp, #8]
 80089e8:	689a      	ldr	r2, [r3, #8]
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	609a      	str	r2, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	7f1b      	ldrb	r3, [r3, #28]
 80089f2:	2b07      	cmp	r3, #7
 80089f4:	d016      	beq.n	8008a24 <chMtxLockS+0x74>
 80089f6:	2b07      	cmp	r3, #7
 80089f8:	dc31      	bgt.n	8008a5e <chMtxLockS+0xae>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d01f      	beq.n	8008a3e <chMtxLockS+0x8e>
 80089fe:	2b06      	cmp	r3, #6
 8008a00:	d12d      	bne.n	8008a5e <chMtxLockS+0xae>
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8008a02:	9b03      	ldr	r3, [sp, #12]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a06:	461c      	mov	r4, r3
 8008a08:	9b03      	ldr	r3, [sp, #12]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff ff30 	bl	8008870 <ch_queue_dequeue.lto_priv.2>
 8008a10:	4603      	mov	r3, r0
 8008a12:	4619      	mov	r1, r3
 8008a14:	4620      	mov	r0, r4
 8008a16:	f7ff ff5b 	bl	80088d0 <ch_sch_prio_insert.lto_priv.0>
                             ch_queue_dequeue(&tp->hdr.queue));
          tp = tp->u.wtmtxp->owner;
 8008a1a:	9b03      	ldr	r3, [sp, #12]
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	e015      	b.n	8008a50 <chMtxLockS+0xa0>
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a28:	461c      	mov	r4, r3
 8008a2a:	9b03      	ldr	r3, [sp, #12]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff ff1f 	bl	8008870 <ch_queue_dequeue.lto_priv.2>
 8008a32:	4603      	mov	r3, r0
 8008a34:	4619      	mov	r1, r3
 8008a36:	4620      	mov	r0, r4
 8008a38:	f7ff ff4a 	bl	80088d0 <ch_sch_prio_insert.lto_priv.0>
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 8008a3c:	e00f      	b.n	8008a5e <chMtxLockS+0xae>
 8008a3e:	9b03      	ldr	r3, [sp, #12]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff ff15 	bl	8008870 <ch_queue_dequeue.lto_priv.2>
 8008a46:	4603      	mov	r3, r0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff f8b9 	bl	8007bc0 <chSchReadyI>
 8008a4e:	e007      	b.n	8008a60 <chMtxLockS+0xb0>
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	9b02      	ldr	r3, [sp, #8]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d3c4      	bcc.n	80089e6 <chMtxLockS+0x36>
 8008a5c:	e000      	b.n	8008a60 <chMtxLockS+0xb0>
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 8008a5e:	bf00      	nop
        }
        break;
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&mp->queue, &currtp->hdr.queue);
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	9a02      	ldr	r2, [sp, #8]
 8008a64:	4611      	mov	r1, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff ff32 	bl	80088d0 <ch_sch_prio_insert.lto_priv.0>
      currtp->u.wtmtxp = mp;
 8008a6c:	9b02      	ldr	r3, [sp, #8]
 8008a6e:	9a01      	ldr	r2, [sp, #4]
 8008a70:	635a      	str	r2, [r3, #52]	; 0x34
      chSchGoSleepS(CH_STATE_WTMTX);
 8008a72:	2006      	movs	r0, #6
 8008a74:	f7ff f8c4 	bl	8007c00 <chSchGoSleepS>
 8008a78:	e009      	b.n	8008a8e <chMtxLockS+0xde>
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = currtp;
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	9a02      	ldr	r2, [sp, #8]
 8008a7e:	609a      	str	r2, [r3, #8]
    mp->next = currtp->mtxlist;
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a84:	9b01      	ldr	r3, [sp, #4]
 8008a86:	60da      	str	r2, [r3, #12]
    currtp->mtxlist = mp;
 8008a88:	9b02      	ldr	r3, [sp, #8]
 8008a8a:	9a01      	ldr	r2, [sp, #4]
 8008a8c:	649a      	str	r2, [r3, #72]	; 0x48
  }
}
 8008a8e:	b004      	add	sp, #16
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	bf00      	nop
 8008a94:	0800aab0 	.word	0x0800aab0
	...

08008aa0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to a @p mutex_t object
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8008aa0:	b500      	push	{lr}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8008aa6:	f7ff ff3b 	bl	8008920 <chThdGetSelfX.lto_priv.2>
 8008aaa:	9005      	str	r0, [sp, #20]
  mutex_t *lmp;

  chDbgCheck(mp != NULL);
 8008aac:	9b01      	ldr	r3, [sp, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bf0c      	ite	eq
 8008ab2:	2301      	moveq	r3, #1
 8008ab4:	2300      	movne	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <chMtxUnlock+0x22>
 8008abc:	4825      	ldr	r0, [pc, #148]	; (8008b54 <chMtxUnlock+0xb4>)
 8008abe:	f7fe fc77 	bl	80073b0 <chSysHalt>

  chSysLock();
 8008ac2:	f7ff fee5 	bl	8008890 <chSysLock.lto_priv.13>
    chDbgAssert(currtp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	9b05      	ldr	r3, [sp, #20]
 8008acc:	649a      	str	r2, [r3, #72]	; 0x48

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8008ace:	9801      	ldr	r0, [sp, #4]
 8008ad0:	f7ff ff2e 	bl	8008930 <chMtxQueueNotEmptyS>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d034      	beq.n	8008b44 <chMtxUnlock+0xa4>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8008ada:	9b05      	ldr	r3, [sp, #20]
 8008adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ade:	9303      	str	r3, [sp, #12]
      lmp = currtp->mtxlist;
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	e012      	b.n	8008b0e <chMtxUnlock+0x6e>
      while (lmp != NULL) {
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8008ae8:	9804      	ldr	r0, [sp, #16]
 8008aea:	f7ff ff21 	bl	8008930 <chMtxQueueNotEmptyS>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d009      	beq.n	8008b08 <chMtxUnlock+0x68>
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 8008afa:	9a03      	ldr	r2, [sp, #12]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d203      	bcs.n	8008b08 <chMtxUnlock+0x68>
          newprio = (threadref(lmp->queue.next))->hdr.pqueue.prio;
 8008b00:	9b04      	ldr	r3, [sp, #16]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	9303      	str	r3, [sp, #12]
        }
        lmp = lmp->next;
 8008b08:	9b04      	ldr	r3, [sp, #16]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	9304      	str	r3, [sp, #16]
      while (lmp != NULL) {
 8008b0e:	9b04      	ldr	r3, [sp, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e9      	bne.n	8008ae8 <chMtxUnlock+0x48>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8008b14:	9b05      	ldr	r3, [sp, #20]
 8008b16:	9a03      	ldr	r2, [sp, #12]
 8008b18:	609a      	str	r2, [r3, #8]
      /* Awakens the highest priority thread waiting for the unlocked mutex and
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff fe8f 	bl	8008840 <ch_queue_fifo_remove.lto_priv.2>
 8008b22:	9002      	str	r0, [sp, #8]
      mp->owner = tp;
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	9a02      	ldr	r2, [sp, #8]
 8008b28:	609a      	str	r2, [r3, #8]
      mp->next = tp->mtxlist;
 8008b2a:	9b02      	ldr	r3, [sp, #8]
 8008b2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b2e:	9b01      	ldr	r3, [sp, #4]
 8008b30:	60da      	str	r2, [r3, #12]
      tp->mtxlist = mp;
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	9a01      	ldr	r2, [sp, #4]
 8008b36:	649a      	str	r2, [r3, #72]	; 0x48

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8008b38:	9802      	ldr	r0, [sp, #8]
 8008b3a:	f7ff f841 	bl	8007bc0 <chSchReadyI>
      chSchRescheduleS();
 8008b3e:	f7ff f8ef 	bl	8007d20 <chSchRescheduleS>
 8008b42:	e002      	b.n	8008b4a <chMtxUnlock+0xaa>
    }
    else {
      mp->owner = NULL;
 8008b44:	9b01      	ldr	r3, [sp, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	609a      	str	r2, [r3, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
 8008b4a:	f7ff feb1 	bl	80088b0 <chSysUnlock.lto_priv.13>
}
 8008b4e:	b007      	add	sp, #28
 8008b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b54:	0800aabc 	.word	0x0800aabc
	...

08008b60 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to an @p event_source_t object
 *
 * @init
 */
void chEvtObjectInit(event_source_t *esp) {
 8008b60:	b500      	push	{lr}
 8008b62:	b083      	sub	sp, #12
 8008b64:	9001      	str	r0, [sp, #4]

  chDbgCheck(esp != NULL);
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	bf0c      	ite	eq
 8008b6c:	2301      	moveq	r3, #1
 8008b6e:	2300      	movne	r3, #0
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <chEvtObjectInit+0x1c>
 8008b76:	4804      	ldr	r0, [pc, #16]	; (8008b88 <chEvtObjectInit+0x28>)
 8008b78:	f7fe fc1a 	bl	80073b0 <chSysHalt>

  esp->next = (event_listener_t *)esp;
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	9a01      	ldr	r2, [sp, #4]
 8008b80:	601a      	str	r2, [r3, #0]
}
 8008b82:	b003      	add	sp, #12
 8008b84:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b88:	0800aac8 	.word	0x0800aac8
 8008b8c:	00000000 	.word	0x00000000

08008b90 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8008b90:	b500      	push	{lr}
 8008b92:	b083      	sub	sp, #12
 8008b94:	9001      	str	r0, [sp, #4]
 8008b96:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
 8008b98:	f7fe fd2a 	bl	80075f0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8008b9c:	9b01      	ldr	r3, [sp, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <chEvtSignalI+0x22>
 8008bac:	4814      	ldr	r0, [pc, #80]	; (8008c00 <chEvtSignalI+0x70>)
 8008bae:	f7fe fbff 	bl	80073b0 <chSysHalt>

  tp->epending |= events;
 8008bb2:	9b01      	ldr	r3, [sp, #4]
 8008bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bb6:	9b00      	ldr	r3, [sp, #0]
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	7f1b      	ldrb	r3, [r3, #28]
 8008bc2:	2b0a      	cmp	r3, #10
 8008bc4:	d106      	bne.n	8008bd4 <chEvtSignalI+0x44>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8008bc6:	9b01      	ldr	r3, [sp, #4]
 8008bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bca:	9b01      	ldr	r3, [sp, #4]
 8008bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bce:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10c      	bne.n	8008bee <chEvtSignalI+0x5e>
      ((tp->state == CH_STATE_WTANDEVT) &&
 8008bd4:	9b01      	ldr	r3, [sp, #4]
 8008bd6:	7f1b      	ldrb	r3, [r3, #28]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8008bd8:	2b0b      	cmp	r3, #11
 8008bda:	d10e      	bne.n	8008bfa <chEvtSignalI+0x6a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	401a      	ands	r2, r3
 8008be6:	9b01      	ldr	r3, [sp, #4]
 8008be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      ((tp->state == CH_STATE_WTANDEVT) &&
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d105      	bne.n	8008bfa <chEvtSignalI+0x6a>
    tp->u.rdymsg = MSG_OK;
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	635a      	str	r2, [r3, #52]	; 0x34
    (void) chSchReadyI(tp);
 8008bf4:	9801      	ldr	r0, [sp, #4]
 8008bf6:	f7fe ffe3 	bl	8007bc0 <chSchReadyI>
  }
}
 8008bfa:	b003      	add	sp, #12
 8008bfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c00:	0800aad8 	.word	0x0800aad8
	...

08008c10 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to an @p event_source_t object
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8008c10:	b500      	push	{lr}
 8008c12:	b085      	sub	sp, #20
 8008c14:	9001      	str	r0, [sp, #4]
 8008c16:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
 8008c18:	f7fe fcea 	bl	80075f0 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 8008c1c:	9b01      	ldr	r3, [sp, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	bf0c      	ite	eq
 8008c22:	2301      	moveq	r3, #1
 8008c24:	2300      	movne	r3, #0
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <chEvtBroadcastFlagsI+0x22>
 8008c2c:	4813      	ldr	r0, [pc, #76]	; (8008c7c <chEvtBroadcastFlagsI+0x6c>)
 8008c2e:	f7fe fbbf 	bl	80073b0 <chSysHalt>

  elp = esp->next;
 8008c32:	9b01      	ldr	r3, [sp, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	9303      	str	r3, [sp, #12]
 8008c38:	e019      	b.n	8008c6e <chEvtBroadcastFlagsI+0x5e>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
 8008c3a:	9b03      	ldr	r3, [sp, #12]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	9b00      	ldr	r3, [sp, #0]
 8008c40:	431a      	orrs	r2, r3
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <chEvtBroadcastFlagsI+0x48>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8008c4c:	9b03      	ldr	r3, [sp, #12]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	9b00      	ldr	r3, [sp, #0]
 8008c52:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <chEvtBroadcastFlagsI+0x58>
      chEvtSignalI(elp->listener, elp->events);
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f7ff ff94 	bl	8008b90 <chEvtSignalI>
    }
    elp = elp->next;
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 8008c6e:	9a03      	ldr	r2, [sp, #12]
 8008c70:	9b01      	ldr	r3, [sp, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d1e1      	bne.n	8008c3a <chEvtBroadcastFlagsI+0x2a>
  }
}
 8008c76:	b005      	add	sp, #20
 8008c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c7c:	0800aae8 	.word	0x0800aae8

08008c80 <chSysLock.lto_priv.19>:
static inline void chSysLock(void) {
 8008c80:	b500      	push	{lr}
 8008c82:	b083      	sub	sp, #12
 8008c84:	2330      	movs	r3, #48	; 0x30
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 8008c8e:	f7fe fba7 	bl	80073e0 <__dbg_check_lock>
}
 8008c92:	b003      	add	sp, #12
 8008c94:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008ca0 <chSysUnlock.lto_priv.19>:
static inline void chSysUnlock(void) {
 8008ca0:	b500      	push	{lr}
 8008ca2:	b083      	sub	sp, #12
  __dbg_check_unlock();
 8008ca4:	f7fe fbc4 	bl	8007430 <__dbg_check_unlock>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	9b01      	ldr	r3, [sp, #4]
 8008cae:	f383 8811 	msr	BASEPRI, r3
}
 8008cb2:	b003      	add	sp, #12
 8008cb4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008cc0 <__core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 8008cc0:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <__core_init+0x10>)
 8008cc2:	4a04      	ldr	r2, [pc, #16]	; (8008cd4 <__core_init+0x14>)
 8008cc4:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 8008cc6:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <__core_init+0x10>)
 8008cc8:	4a03      	ldr	r2, [pc, #12]	; (8008cd8 <__core_init+0x18>)
 8008cca:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20001170 	.word	0x20001170
 8008cd4:	20001c10 	.word	0x20001c10
 8008cd8:	20005000 	.word	0x20005000
 8008cdc:	00000000 	.word	0x00000000

08008ce0 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 8008ce0:	b500      	push	{lr}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	9003      	str	r0, [sp, #12]
 8008ce6:	9102      	str	r1, [sp, #8]
 8008ce8:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
 8008cea:	f7fe fc81 	bl	80075f0 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8008cee:	9b02      	ldr	r3, [sp, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bf0c      	ite	eq
 8008cf4:	2301      	moveq	r3, #1
 8008cf6:	2300      	movne	r3, #0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10a      	bne.n	8008d14 <chCoreAllocFromTopI+0x34>
 8008cfe:	9b02      	ldr	r3, [sp, #8]
 8008d00:	1e5a      	subs	r2, r3, #1
 8008d02:	9b02      	ldr	r3, [sp, #8]
 8008d04:	4013      	ands	r3, r2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	bf14      	ite	ne
 8008d0a:	2301      	movne	r3, #1
 8008d0c:	2300      	moveq	r3, #0
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <chCoreAllocFromTopI+0x3a>
 8008d14:	4812      	ldr	r0, [pc, #72]	; (8008d60 <chCoreAllocFromTopI+0x80>)
 8008d16:	f7fe fb4b 	bl	80073b0 <chSysHalt>

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8008d1a:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <chCoreAllocFromTopI+0x84>)
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	425b      	negs	r3, r3
 8008d22:	4413      	add	r3, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	9b02      	ldr	r3, [sp, #8]
 8008d28:	425b      	negs	r3, r3
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	9305      	str	r3, [sp, #20]
  prev = p - offset;
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	425b      	negs	r3, r3
 8008d32:	9a05      	ldr	r2, [sp, #20]
 8008d34:	4413      	add	r3, r2
 8008d36:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8008d38:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <chCoreAllocFromTopI+0x84>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	9a04      	ldr	r2, [sp, #16]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d304      	bcc.n	8008d4c <chCoreAllocFromTopI+0x6c>
 8008d42:	4b08      	ldr	r3, [pc, #32]	; (8008d64 <chCoreAllocFromTopI+0x84>)
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	9a04      	ldr	r2, [sp, #16]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d901      	bls.n	8008d50 <chCoreAllocFromTopI+0x70>
    return NULL;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e003      	b.n	8008d58 <chCoreAllocFromTopI+0x78>
  }

  ch_memcore.topmem = prev;
 8008d50:	4a04      	ldr	r2, [pc, #16]	; (8008d64 <chCoreAllocFromTopI+0x84>)
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	6053      	str	r3, [r2, #4]

  return p;
 8008d56:	9b05      	ldr	r3, [sp, #20]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	b007      	add	sp, #28
 8008d5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d60:	0800ab00 	.word	0x0800ab00
 8008d64:	20001170 	.word	0x20001170
	...

08008d70 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8008d70:	b500      	push	{lr}
 8008d72:	b087      	sub	sp, #28
 8008d74:	9003      	str	r0, [sp, #12]
 8008d76:	9102      	str	r1, [sp, #8]
 8008d78:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 8008d7a:	f7ff ff81 	bl	8008c80 <chSysLock.lto_priv.19>
  p = chCoreAllocFromTopI(size, align, offset);
 8008d7e:	9a01      	ldr	r2, [sp, #4]
 8008d80:	9902      	ldr	r1, [sp, #8]
 8008d82:	9803      	ldr	r0, [sp, #12]
 8008d84:	f7ff ffac 	bl	8008ce0 <chCoreAllocFromTopI>
 8008d88:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 8008d8a:	f7ff ff89 	bl	8008ca0 <chSysUnlock.lto_priv.19>

  return p;
 8008d8e:	9b05      	ldr	r3, [sp, #20]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	b007      	add	sp, #28
 8008d94:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008da0 <chCoreGetStatusX>:
 *
 * @param[in] map       Memory area representing available core space.
 *
 * @xclass
 */
void chCoreGetStatusX(memory_area_t *map) {
 8008da0:	b082      	sub	sp, #8
 8008da2:	9001      	str	r0, [sp, #4]

  map->base = ch_memcore.basemem;
 8008da4:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <chCoreGetStatusX+0x20>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	601a      	str	r2, [r3, #0]
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 8008dac:	4b04      	ldr	r3, [pc, #16]	; (8008dc0 <chCoreGetStatusX+0x20>)
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	4b03      	ldr	r3, [pc, #12]	; (8008dc0 <chCoreGetStatusX+0x20>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	9b01      	ldr	r3, [sp, #4]
 8008dba:	605a      	str	r2, [r3, #4]
  /*lint -restore*/
}
 8008dbc:	b002      	add	sp, #8
 8008dbe:	4770      	bx	lr
 8008dc0:	20001170 	.word	0x20001170
	...

08008dd0 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
 8008dd0:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8008dd2:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <__heap_init+0x24>)
 8008dd4:	4a08      	ldr	r2, [pc, #32]	; (8008df8 <__heap_init+0x28>)
 8008dd6:	601a      	str	r2, [r3, #0]
  chCoreGetStatusX(&default_heap.area);
 8008dd8:	4808      	ldr	r0, [pc, #32]	; (8008dfc <__heap_init+0x2c>)
 8008dda:	f7ff ffe1 	bl	8008da0 <chCoreGetStatusX>
  H_FREE_NEXT(&default_heap.header) = NULL;
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <__heap_init+0x24>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	60da      	str	r2, [r3, #12]
  H_FREE_PAGES(&default_heap.header) = 0;
 8008de4:	4b03      	ldr	r3, [pc, #12]	; (8008df4 <__heap_init+0x24>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	611a      	str	r2, [r3, #16]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8008dea:	4805      	ldr	r0, [pc, #20]	; (8008e00 <__heap_init+0x30>)
 8008dec:	f7ff fdb0 	bl	8008950 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 8008df0:	bd08      	pop	{r3, pc}
 8008df2:	bf00      	nop
 8008df4:	20001178 	.word	0x20001178
 8008df8:	08008d71 	.word	0x08008d71
 8008dfc:	2000117c 	.word	0x2000117c
 8008e00:	2000118c 	.word	0x2000118c
	...

08008e10 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8008e10:	b500      	push	{lr}
 8008e12:	b085      	sub	sp, #20
 8008e14:	9003      	str	r0, [sp, #12]
 8008e16:	9102      	str	r1, [sp, #8]
 8008e18:	9201      	str	r2, [sp, #4]
 8008e1a:	9300      	str	r3, [sp, #0]

  chDbgCheck((mp != NULL) &&
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bf0c      	ite	eq
 8008e22:	2301      	moveq	r3, #1
 8008e24:	2300      	movne	r3, #0
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d107      	bne.n	8008e3c <chPoolObjectInitAligned+0x2c>
 8008e2c:	9b02      	ldr	r3, [sp, #8]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	bf94      	ite	ls
 8008e32:	2301      	movls	r3, #1
 8008e34:	2300      	movhi	r3, #0
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <chPoolObjectInitAligned+0x30>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e000      	b.n	8008e42 <chPoolObjectInitAligned+0x32>
 8008e40:	2300      	movs	r3, #0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d107      	bne.n	8008e56 <chPoolObjectInitAligned+0x46>
 8008e46:	9b01      	ldr	r3, [sp, #4]
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	bf94      	ite	ls
 8008e4c:	2301      	movls	r3, #1
 8008e4e:	2300      	movhi	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <chPoolObjectInitAligned+0x4a>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <chPoolObjectInitAligned+0x4c>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d117      	bne.n	8008e90 <chPoolObjectInitAligned+0x80>
 8008e60:	9b01      	ldr	r3, [sp, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bf0c      	ite	eq
 8008e66:	2301      	moveq	r3, #1
 8008e68:	2300      	movne	r3, #0
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10a      	bne.n	8008e86 <chPoolObjectInitAligned+0x76>
 8008e70:	9b01      	ldr	r3, [sp, #4]
 8008e72:	1e5a      	subs	r2, r3, #1
 8008e74:	9b01      	ldr	r3, [sp, #4]
 8008e76:	4013      	ands	r3, r2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	bf14      	ite	ne
 8008e7c:	2301      	movne	r3, #1
 8008e7e:	2300      	moveq	r3, #0
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <chPoolObjectInitAligned+0x7a>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <chPoolObjectInitAligned+0x7c>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <chPoolObjectInitAligned+0x86>
 8008e90:	4808      	ldr	r0, [pc, #32]	; (8008eb4 <chPoolObjectInitAligned+0xa4>)
 8008e92:	f7fe fa8d 	bl	80073b0 <chSysHalt>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	9a02      	ldr	r2, [sp, #8]
 8008ea0:	605a      	str	r2, [r3, #4]
  mp->align = align;
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	9a01      	ldr	r2, [sp, #4]
 8008ea6:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 8008ea8:	9b03      	ldr	r3, [sp, #12]
 8008eaa:	9a00      	ldr	r2, [sp, #0]
 8008eac:	60da      	str	r2, [r3, #12]
}
 8008eae:	b005      	add	sp, #20
 8008eb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008eb4:	0800ab14 	.word	0x0800ab14
	...

08008ec0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8008ec0:	b500      	push	{lr}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	9001      	str	r0, [sp, #4]
 8008ec6:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8008ec8:	2200      	movs	r2, #0
 8008eca:	9900      	ldr	r1, [sp, #0]
 8008ecc:	9801      	ldr	r0, [sp, #4]
 8008ece:	f7ff ff07 	bl	8008ce0 <chCoreAllocFromTopI>
 8008ed2:	4603      	mov	r3, r0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	b003      	add	sp, #12
 8008ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008edc:	0000      	movs	r0, r0
	...

08008ee0 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 8008ee0:	b500      	push	{lr}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	9003      	str	r0, [sp, #12]
 8008ee6:	9102      	str	r1, [sp, #8]
 8008ee8:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 8008eea:	9b01      	ldr	r3, [sp, #4]
 8008eec:	2204      	movs	r2, #4
 8008eee:	9902      	ldr	r1, [sp, #8]
 8008ef0:	9803      	ldr	r0, [sp, #12]
 8008ef2:	f7ff ff8d 	bl	8008e10 <chPoolObjectInitAligned>
}
 8008ef6:	b005      	add	sp, #20
 8008ef8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008efc:	0000      	movs	r0, r0
	...

08008f00 <dyn_list_init>:
    *dp++ = c;
    i--;
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {
 8008f00:	b082      	sub	sp, #8
 8008f02:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 8008f04:	9b01      	ldr	r3, [sp, #4]
 8008f06:	9a01      	ldr	r2, [sp, #4]
 8008f08:	601a      	str	r2, [r3, #0]
}
 8008f0a:	b002      	add	sp, #8
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop

08008f10 <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
 8008f10:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8008f12:	4810      	ldr	r0, [pc, #64]	; (8008f54 <__factory_init+0x44>)
 8008f14:	f7ff fd1c 	bl	8008950 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 8008f18:	480f      	ldr	r0, [pc, #60]	; (8008f58 <__factory_init+0x48>)
 8008f1a:	f7ff fff1 	bl	8008f00 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 8008f1e:	4a0f      	ldr	r2, [pc, #60]	; (8008f5c <__factory_init+0x4c>)
 8008f20:	2114      	movs	r1, #20
 8008f22:	480f      	ldr	r0, [pc, #60]	; (8008f60 <__factory_init+0x50>)
 8008f24:	f7ff ffdc 	bl	8008ee0 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 8008f28:	480e      	ldr	r0, [pc, #56]	; (8008f64 <__factory_init+0x54>)
 8008f2a:	f7ff ffe9 	bl	8008f00 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 8008f2e:	480e      	ldr	r0, [pc, #56]	; (8008f68 <__factory_init+0x58>)
 8008f30:	f7ff ffe6 	bl	8008f00 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 8008f34:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <__factory_init+0x4c>)
 8008f36:	211c      	movs	r1, #28
 8008f38:	480c      	ldr	r0, [pc, #48]	; (8008f6c <__factory_init+0x5c>)
 8008f3a:	f7ff ffd1 	bl	8008ee0 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 8008f3e:	480c      	ldr	r0, [pc, #48]	; (8008f70 <__factory_init+0x60>)
 8008f40:	f7ff ffde 	bl	8008f00 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 8008f44:	480b      	ldr	r0, [pc, #44]	; (8008f74 <__factory_init+0x64>)
 8008f46:	f7ff ffdb 	bl	8008f00 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
 8008f4a:	480b      	ldr	r0, [pc, #44]	; (8008f78 <__factory_init+0x68>)
 8008f4c:	f7ff ffd8 	bl	8008f00 <dyn_list_init>
#endif
}
 8008f50:	bd08      	pop	{r3, pc}
 8008f52:	bf00      	nop
 8008f54:	2000119c 	.word	0x2000119c
 8008f58:	200011ac 	.word	0x200011ac
 8008f5c:	08008ec1 	.word	0x08008ec1
 8008f60:	200011b0 	.word	0x200011b0
 8008f64:	200011c0 	.word	0x200011c0
 8008f68:	200011c4 	.word	0x200011c4
 8008f6c:	200011c8 	.word	0x200011c8
 8008f70:	200011d8 	.word	0x200011d8
 8008f74:	200011dc 	.word	0x200011dc
 8008f78:	200011e0 	.word	0x200011e0
 8008f7c:	00000000 	.word	0x00000000

08008f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f80:	b084      	sub	sp, #16
 8008f82:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <__NVIC_SetPriorityGrouping+0x38>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f92:	9a02      	ldr	r2, [sp, #8]
 8008f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f98:	4013      	ands	r3, r2
 8008f9a:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fa0:	9b02      	ldr	r3, [sp, #8]
 8008fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fac:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 8008fae:	4a02      	ldr	r2, [pc, #8]	; (8008fb8 <__NVIC_SetPriorityGrouping+0x38>)
 8008fb0:	9b02      	ldr	r3, [sp, #8]
 8008fb2:	60d3      	str	r3, [r2, #12]
}
 8008fb4:	b004      	add	sp, #16
 8008fb6:	4770      	bx	lr
 8008fb8:	e000ed00 	.word	0xe000ed00
 8008fbc:	00000000 	.word	0x00000000

08008fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	9100      	str	r1, [sp, #0]
 8008fc6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fca:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	db0a      	blt.n	8008fe8 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fd2:	9b00      	ldr	r3, [sp, #0]
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	490b      	ldr	r1, [pc, #44]	; (8009004 <__NVIC_SetPriority+0x44>)
 8008fd8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8008fdc:	0112      	lsls	r2, r2, #4
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	440b      	add	r3, r1
 8008fe2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008fe6:	e00b      	b.n	8009000 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fe8:	9b00      	ldr	r3, [sp, #0]
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	4906      	ldr	r1, [pc, #24]	; (8009008 <__NVIC_SetPriority+0x48>)
 8008fee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008ff2:	f003 030f 	and.w	r3, r3, #15
 8008ff6:	3b04      	subs	r3, #4
 8008ff8:	0112      	lsls	r2, r2, #4
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	440b      	add	r3, r1
 8008ffe:	761a      	strb	r2, [r3, #24]
  }
}
 8009000:	b002      	add	sp, #8
 8009002:	4770      	bx	lr
 8009004:	e000e100 	.word	0xe000e100
 8009008:	e000ed00 	.word	0xe000ed00
 800900c:	00000000 	.word	0x00000000

08009010 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch and, optionally, for system calls.
 * @note    The SVC vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8009010:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8009012:	f3ef 8309 	mrs	r3, PSP
 8009016:	9300      	str	r3, [sp, #0]
  return(result);
 8009018:	9b00      	ldr	r3, [sp, #0]
/*lint -restore*/
  uint32_t psp = __get_PSP();
 800901a:	9303      	str	r3, [sp, #12]

  /* Unstacking procedure, discarding the current exception context and
     positioning the stack to point to the real one.*/
  psp += sizeof (struct port_extctx);
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	3320      	adds	r3, #32
 8009020:	9303      	str	r3, [sp, #12]
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	f383 8809 	msr	PSP, r3
 800902c:	2300      	movs	r3, #0
 800902e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009030:	9b02      	ldr	r3, [sp, #8]
 8009032:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP(psp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 8009036:	b004      	add	sp, #16
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	0000      	movs	r0, r0
	...

08009040 <port_init>:
 *
 * @param[in, out] oip  pointer to the @p os_instance_t structure
 *
 * @notapi
 */
void port_init(os_instance_t *oip) {
 8009040:	b500      	push	{lr}
 8009042:	b085      	sub	sp, #20
 8009044:	9001      	str	r0, [sp, #4]
 8009046:	2330      	movs	r3, #48	; 0x30
 8009048:	9303      	str	r3, [sp, #12]
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8009050:	b662      	cpsie	i

  /* Starting in a known IRQ configuration.*/
  port_suspend();

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8009052:	2003      	movs	r0, #3
 8009054:	f7ff ff94 	bl	8008f80 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009058:	4b0c      	ldr	r3, [pc, #48]	; (800908c <port_init+0x4c>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	4a0b      	ldr	r2, [pc, #44]	; (800908c <port_init+0x4c>)
 800905e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009062:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8009064:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <port_init+0x50>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a09      	ldr	r2, [pc, #36]	; (8009090 <port_init+0x50>)
 800906a:	f043 0301 	orr.w	r3, r3, #1
 800906e:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8009070:	2102      	movs	r1, #2
 8009072:	f06f 0004 	mvn.w	r0, #4
 8009076:	f7ff ffa3 	bl	8008fc0 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 800907a:	2103      	movs	r1, #3
 800907c:	f06f 0001 	mvn.w	r0, #1
 8009080:	f7ff ff9e 	bl	8008fc0 <__NVIC_SetPriority>

#if PORT_ENABLE_GUARD_PAGES == TRUE
  /* MPU is enabled.*/
  mpuEnable(MPU_CTRL_PRIVDEFENA);
#endif
}
 8009084:	b005      	add	sp, #20
 8009086:	f85d fb04 	ldr.w	pc, [sp], #4
 800908a:	bf00      	nop
 800908c:	e000edf0 	.word	0xe000edf0
 8009090:	e0001000 	.word	0xe0001000
	...

080090a0 <__port_irq_epilogue>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 80090a0:	b500      	push	{lr}
 80090a2:	b087      	sub	sp, #28
 80090a4:	2330      	movs	r3, #48	; 0x30
 80090a6:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80090a8:	9b03      	ldr	r3, [sp, #12]
 80090aa:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80090ae:	4b17      	ldr	r3, [pc, #92]	; (800910c <__port_irq_epilogue+0x6c>)
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d01f      	beq.n	80090fa <__port_irq_epilogue+0x5a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80090ba:	f3ef 8309 	mrs	r3, PSP
 80090be:	9301      	str	r3, [sp, #4]
  return(result);
 80090c0:	9b01      	ldr	r3, [sp, #4]
#endif


    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    psp = __get_PSP();
 80090c2:	9305      	str	r3, [sp, #20]
    psp -= sizeof (struct port_extctx);
 80090c4:	9b05      	ldr	r3, [sp, #20]
 80090c6:	3b20      	subs	r3, #32
 80090c8:	9305      	str	r3, [sp, #20]

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)psp;
 80090ca:	9b05      	ldr	r3, [sp, #20]
 80090cc:	9304      	str	r3, [sp, #16]

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 80090ce:	9b04      	ldr	r3, [sp, #16]
 80090d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090d4:	61da      	str	r2, [r3, #28]
 80090d6:	9b05      	ldr	r3, [sp, #20]
 80090d8:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80090da:	9b02      	ldr	r3, [sp, #8]
 80090dc:	f383 8809 	msr	PSP, r3
    /* Writing back the modified S-PSP value.*/
    __set_PSP(psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80090e0:	f7fe fe3e 	bl	8007d60 <chSchIsPreemptionRequired>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <__port_irq_epilogue+0x52>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80090ea:	4a09      	ldr	r2, [pc, #36]	; (8009110 <__port_irq_epilogue+0x70>)
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	619a      	str	r2, [r3, #24]
      ectxp->pc = (uint32_t)__port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
 80090f0:	e008      	b.n	8009104 <__port_irq_epilogue+0x64>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80090f2:	4a08      	ldr	r2, [pc, #32]	; (8009114 <__port_irq_epilogue+0x74>)
 80090f4:	9b04      	ldr	r3, [sp, #16]
 80090f6:	619a      	str	r2, [r3, #24]
 80090f8:	e004      	b.n	8009104 <__port_irq_epilogue+0x64>
 80090fa:	2300      	movs	r3, #0
 80090fc:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80090fe:	9b00      	ldr	r3, [sp, #0]
 8009100:	f383 8811 	msr	BASEPRI, r3
  }
  port_unlock_from_isr();
}
 8009104:	b007      	add	sp, #28
 8009106:	f85d fb04 	ldr.w	pc, [sp], #4
 800910a:	bf00      	nop
 800910c:	e000ed00 	.word	0xe000ed00
 8009110:	08000277 	.word	0x08000277
 8009114:	08000282 	.word	0x08000282
	...

08009120 <pwm_init>:
  0, //CR2
  0, //BDTR
  0 //DIER
};

void pwm_init(void){
 8009120:	b508      	push	{r3, lr}

  //AFIO->MAPR|= AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2; 10: Partial remap (CH1/ETR/PA0, CH2/PA1, CH3/PB10, CH4/PB11)

  palSetPadMode(GPIOB, GPIOB_PIN1, PAL_MODE_STM32_ALTERNATE_PUSHPULL);//A0  TIM3 CH4
 8009122:	2210      	movs	r2, #16
 8009124:	2102      	movs	r1, #2
 8009126:	4834      	ldr	r0, [pc, #208]	; (80091f8 <pwm_init+0xd8>)
 8009128:	f7fb ffc2 	bl	80050b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, GPIOB_ARD_A3, PAL_MODE_STM32_ALTERNATE_PUSHPULL);//B0  TIM3 CH3 GPIOB_PIN0
 800912c:	2210      	movs	r2, #16
 800912e:	2101      	movs	r1, #1
 8009130:	4831      	ldr	r0, [pc, #196]	; (80091f8 <pwm_init+0xd8>)
 8009132:	f7fb ffbd 	bl	80050b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, GPIOA_ARD_D11, PAL_MODE_STM32_ALTERNATE_PUSHPULL);//C0  TIM3 CH2 GPIOA_PIN7
 8009136:	2210      	movs	r2, #16
 8009138:	2180      	movs	r1, #128	; 0x80
 800913a:	4830      	ldr	r0, [pc, #192]	; (80091fc <pwm_init+0xdc>)
 800913c:	f7fb ffb8 	bl	80050b0 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOA, GPIOA_ARD_D12, PAL_MODE_STM32_ALTERNATE_PUSHPULL);//A1  TIM3 CH1 GPIOA_PIN6
 8009140:	2210      	movs	r2, #16
 8009142:	2140      	movs	r1, #64	; 0x40
 8009144:	482d      	ldr	r0, [pc, #180]	; (80091fc <pwm_init+0xdc>)
 8009146:	f7fb ffb3 	bl	80050b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, GPIOA_ARD_D0, PAL_MODE_STM32_ALTERNATE_PUSHPULL);//B1  TIM2 CH4 GPIOA_PIN3
 800914a:	2210      	movs	r2, #16
 800914c:	2108      	movs	r1, #8
 800914e:	482b      	ldr	r0, [pc, #172]	; (80091fc <pwm_init+0xdc>)
 8009150:	f7fb ffae 	bl	80050b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, GPIOA_ARD_D1, PAL_MODE_STM32_ALTERNATE_PUSHPULL);//C1  TIM2 CH3 GPIOA_PIN2
 8009154:	2210      	movs	r2, #16
 8009156:	2104      	movs	r1, #4
 8009158:	4828      	ldr	r0, [pc, #160]	; (80091fc <pwm_init+0xdc>)
 800915a:	f7fb ffa9 	bl	80050b0 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOB, GPIOB_ARD_D14, PAL_MODE_STM32_ALTERNATE_PUSHPULL);//A2  TIM4 CH4 GPIOB_PIN9
 800915e:	2210      	movs	r2, #16
 8009160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009164:	4824      	ldr	r0, [pc, #144]	; (80091f8 <pwm_init+0xd8>)
 8009166:	f7fb ffa3 	bl	80050b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, GPIOA_ARD_A1, PAL_MODE_STM32_ALTERNATE_PUSHPULL);//B2  TIM2 CH2 GPIOA_PIN1
 800916a:	2210      	movs	r2, #16
 800916c:	2102      	movs	r1, #2
 800916e:	4823      	ldr	r0, [pc, #140]	; (80091fc <pwm_init+0xdc>)
 8009170:	f7fb ff9e 	bl	80050b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, GPIOB_ARD_D15, PAL_MODE_STM32_ALTERNATE_PUSHPULL);//C3  TIM4 CH3 GPIOB_PIN8
 8009174:	2210      	movs	r2, #16
 8009176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800917a:	481f      	ldr	r0, [pc, #124]	; (80091f8 <pwm_init+0xd8>)
 800917c:	f7fb ff98 	bl	80050b0 <_pal_lld_setgroupmode>


  // It configures PWM related PIN.
  pwmStart(&PWMD2, &pwmcfg2);
 8009180:	491f      	ldr	r1, [pc, #124]	; (8009200 <pwm_init+0xe0>)
 8009182:	4820      	ldr	r0, [pc, #128]	; (8009204 <pwm_init+0xe4>)
 8009184:	f7f9 fc8c 	bl	8002aa0 <pwmStart>
  pwmStart(&PWMD3, &pwmcfg3);
 8009188:	491f      	ldr	r1, [pc, #124]	; (8009208 <pwm_init+0xe8>)
 800918a:	4820      	ldr	r0, [pc, #128]	; (800920c <pwm_init+0xec>)
 800918c:	f7f9 fc88 	bl	8002aa0 <pwmStart>
  pwmStart(&PWMD4, &pwmcfg4);
 8009190:	491f      	ldr	r1, [pc, #124]	; (8009210 <pwm_init+0xf0>)
 8009192:	4820      	ldr	r0, [pc, #128]	; (8009214 <pwm_init+0xf4>)
 8009194:	f7f9 fc84 	bl	8002aa0 <pwmStart>

  PWMD2.tim -> CR1 = TIM_CR1_CMS_0 ;//center aligned mode
 8009198:	4b1a      	ldr	r3, [pc, #104]	; (8009204 <pwm_init+0xe4>)
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	2220      	movs	r2, #32
 800919e:	601a      	str	r2, [r3, #0]
  PWMD4.tim -> CR1 = TIM_CR1_CMS_0;
 80091a0:	4b1c      	ldr	r3, [pc, #112]	; (8009214 <pwm_init+0xf4>)
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	2220      	movs	r2, #32
 80091a6:	601a      	str	r2, [r3, #0]
  PWMD3.tim -> CR1 = TIM_CR1_CMS_0;
 80091a8:	4b18      	ldr	r3, [pc, #96]	; (800920c <pwm_init+0xec>)
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	2220      	movs	r2, #32
 80091ae:	601a      	str	r2, [r3, #0]

  TIM2 -> CNT =0;
 80091b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091b4:	2200      	movs	r2, #0
 80091b6:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3 -> CNT =0;
 80091b8:	4b17      	ldr	r3, [pc, #92]	; (8009218 <pwm_init+0xf8>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4 -> CNT =0;
 80091be:	4b17      	ldr	r3, [pc, #92]	; (800921c <pwm_init+0xfc>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	625a      	str	r2, [r3, #36]	; 0x24

  PWMD3.tim -> CR2 = TIM_CR2_MMS_0;//master mode enable
 80091c4:	4b11      	ldr	r3, [pc, #68]	; (800920c <pwm_init+0xec>)
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	2210      	movs	r2, #16
 80091ca:	605a      	str	r2, [r3, #4]
  //PWMD3.tim -> CR2 = TIM_CR2_MMS_2 | TIM_CR2_MMS_1;//OC3REF signal is used as trigger output (TRGO)
  //TIMx slave mode control register (TIMx_SMCR)
  //TS: Trigger selection  010: Internal Trigger 2 (ITR2) |
  //SMS: slave mode selection 110: Trigger mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset).
  PWMD2.tim -> SMCR = TIM_SMCR_TS_1 | ( TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 );
 80091cc:	4b0d      	ldr	r3, [pc, #52]	; (8009204 <pwm_init+0xe4>)
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	2226      	movs	r2, #38	; 0x26
 80091d2:	609a      	str	r2, [r3, #8]
  PWMD4.tim -> SMCR = TIM_SMCR_TS_1 | ( TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 );
 80091d4:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <pwm_init+0xf4>)
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	2226      	movs	r2, #38	; 0x26
 80091da:	609a      	str	r2, [r3, #8]


  PWMD3.tim -> CR1 |= TIM_CR1_CEN;//start timer3
 80091dc:	4b0b      	ldr	r3, [pc, #44]	; (800920c <pwm_init+0xec>)
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	4b0a      	ldr	r3, [pc, #40]	; (800920c <pwm_init+0xec>)
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]


  palSetPadMode(GPIOC, GPIOC_PIN3, PAL_MODE_OUTPUT_PUSHPULL);//
 80091ec:	2206      	movs	r2, #6
 80091ee:	2108      	movs	r1, #8
 80091f0:	480b      	ldr	r0, [pc, #44]	; (8009220 <pwm_init+0x100>)
 80091f2:	f7fb ff5d 	bl	80050b0 <_pal_lld_setgroupmode>
  //pwmEnablePeriodicNotification(&PWMD3);
 // chThdCreateStatic(PWMwaThread, sizeof(PWMwaThread), HIGHPRIO, pwmThread, NULL);


}
 80091f6:	bd08      	pop	{r3, pc}
 80091f8:	40010c00 	.word	0x40010c00
 80091fc:	40010800 	.word	0x40010800
 8009200:	20000808 	.word	0x20000808
 8009204:	20000e10 	.word	0x20000e10
 8009208:	20000840 	.word	0x20000840
 800920c:	20000e30 	.word	0x20000e30
 8009210:	20000878 	.word	0x20000878
 8009214:	20000e50 	.word	0x20000e50
 8009218:	40000400 	.word	0x40000400
 800921c:	40000800 	.word	0x40000800
 8009220:	40011000 	.word	0x40011000
	...

08009230 <setPwm>:
void setPwm(unsigned int motor,unsigned int a, unsigned int b,unsigned int c){
 8009230:	b500      	push	{lr}
 8009232:	b085      	sub	sp, #20
 8009234:	9003      	str	r0, [sp, #12]
 8009236:	9102      	str	r1, [sp, #8]
 8009238:	9201      	str	r2, [sp, #4]
 800923a:	9300      	str	r3, [sp, #0]
  switch (motor){
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	2b03      	cmp	r3, #3
 8009240:	d029      	beq.n	8009296 <setPwm+0x66>
 8009242:	9b03      	ldr	r3, [sp, #12]
 8009244:	2b03      	cmp	r3, #3
 8009246:	d835      	bhi.n	80092b4 <setPwm+0x84>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d003      	beq.n	8009256 <setPwm+0x26>
 800924e:	9b03      	ldr	r3, [sp, #12]
 8009250:	2b02      	cmp	r3, #2
 8009252:	d010      	beq.n	8009276 <setPwm+0x46>
 8009254:	e02e      	b.n	80092b4 <setPwm+0x84>
    case 1:
      pwmEnableChannel(&PWMD3, 3, a);
 8009256:	9a02      	ldr	r2, [sp, #8]
 8009258:	2103      	movs	r1, #3
 800925a:	4818      	ldr	r0, [pc, #96]	; (80092bc <setPwm+0x8c>)
 800925c:	f7f9 fc60 	bl	8002b20 <pwmEnableChannel>
      pwmEnableChannel(&PWMD3, 2, b);
 8009260:	9a01      	ldr	r2, [sp, #4]
 8009262:	2102      	movs	r1, #2
 8009264:	4815      	ldr	r0, [pc, #84]	; (80092bc <setPwm+0x8c>)
 8009266:	f7f9 fc5b 	bl	8002b20 <pwmEnableChannel>
      pwmEnableChannel(&PWMD3, 1, c);
 800926a:	9a00      	ldr	r2, [sp, #0]
 800926c:	2101      	movs	r1, #1
 800926e:	4813      	ldr	r0, [pc, #76]	; (80092bc <setPwm+0x8c>)
 8009270:	f7f9 fc56 	bl	8002b20 <pwmEnableChannel>
 8009274:	e01e      	b.n	80092b4 <setPwm+0x84>

      break;
    case 2:
      pwmEnableChannel(&PWMD3, 0, a);
 8009276:	9a02      	ldr	r2, [sp, #8]
 8009278:	2100      	movs	r1, #0
 800927a:	4810      	ldr	r0, [pc, #64]	; (80092bc <setPwm+0x8c>)
 800927c:	f7f9 fc50 	bl	8002b20 <pwmEnableChannel>
      pwmEnableChannel(&PWMD2, 3, b);
 8009280:	9a01      	ldr	r2, [sp, #4]
 8009282:	2103      	movs	r1, #3
 8009284:	480e      	ldr	r0, [pc, #56]	; (80092c0 <setPwm+0x90>)
 8009286:	f7f9 fc4b 	bl	8002b20 <pwmEnableChannel>
      pwmEnableChannel(&PWMD2, 2, c);
 800928a:	9a00      	ldr	r2, [sp, #0]
 800928c:	2102      	movs	r1, #2
 800928e:	480c      	ldr	r0, [pc, #48]	; (80092c0 <setPwm+0x90>)
 8009290:	f7f9 fc46 	bl	8002b20 <pwmEnableChannel>
 8009294:	e00e      	b.n	80092b4 <setPwm+0x84>
      break;
    case 3:
      pwmEnableChannel(&PWMD4, 3, a);
 8009296:	9a02      	ldr	r2, [sp, #8]
 8009298:	2103      	movs	r1, #3
 800929a:	480a      	ldr	r0, [pc, #40]	; (80092c4 <setPwm+0x94>)
 800929c:	f7f9 fc40 	bl	8002b20 <pwmEnableChannel>
      pwmEnableChannel(&PWMD2, 1, b);
 80092a0:	9a01      	ldr	r2, [sp, #4]
 80092a2:	2101      	movs	r1, #1
 80092a4:	4806      	ldr	r0, [pc, #24]	; (80092c0 <setPwm+0x90>)
 80092a6:	f7f9 fc3b 	bl	8002b20 <pwmEnableChannel>
      pwmEnableChannel(&PWMD4, 2, c);
 80092aa:	9a00      	ldr	r2, [sp, #0]
 80092ac:	2102      	movs	r1, #2
 80092ae:	4805      	ldr	r0, [pc, #20]	; (80092c4 <setPwm+0x94>)
 80092b0:	f7f9 fc36 	bl	8002b20 <pwmEnableChannel>
      break;
  }


}
 80092b4:	b005      	add	sp, #20
 80092b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80092ba:	bf00      	nop
 80092bc:	20000e30 	.word	0x20000e30
 80092c0:	20000e10 	.word	0x20000e10
 80092c4:	20000e50 	.word	0x20000e50
	...

080092d0 <setPhaseVoltage>:
void setPhaseVoltage(float Uq, float Ud, float angle_el){
 80092d0:	b510      	push	{r4, lr}
 80092d2:	b08e      	sub	sp, #56	; 0x38
 80092d4:	9003      	str	r0, [sp, #12]
 80092d6:	9102      	str	r1, [sp, #8]
 80092d8:	9201      	str	r2, [sp, #4]
    int sector;
    float _ca,_sa;
    float Ua,Ub,Uc;
      // Sinusoidal PWM modulation
      // Inverse Park + Clarke transformation
      _sincos(angle_el, &_sa, &_ca);
 80092da:	aa05      	add	r2, sp, #20
 80092dc:	ab04      	add	r3, sp, #16
 80092de:	4619      	mov	r1, r3
 80092e0:	9801      	ldr	r0, [sp, #4]
 80092e2:	f000 fa4d 	bl	8009780 <_sincos>

      // Inverse park transform
      Ualpha =  _ca * Ud - _sa * Uq;  // -sin(angle) * Uq;
 80092e6:	9b05      	ldr	r3, [sp, #20]
 80092e8:	9902      	ldr	r1, [sp, #8]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7f7 fd96 	bl	8000e1c <__aeabi_fmul>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461c      	mov	r4, r3
 80092f4:	9b04      	ldr	r3, [sp, #16]
 80092f6:	9903      	ldr	r1, [sp, #12]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7f7 fd8f 	bl	8000e1c <__aeabi_fmul>
 80092fe:	4603      	mov	r3, r0
 8009300:	4619      	mov	r1, r3
 8009302:	4620      	mov	r0, r4
 8009304:	f7f7 fc80 	bl	8000c08 <__aeabi_fsub>
 8009308:	4603      	mov	r3, r0
 800930a:	930d      	str	r3, [sp, #52]	; 0x34
      Ubeta =  _sa * Ud + _ca * Uq;    //  cos(angle) * Uq;
 800930c:	9b04      	ldr	r3, [sp, #16]
 800930e:	9902      	ldr	r1, [sp, #8]
 8009310:	4618      	mov	r0, r3
 8009312:	f7f7 fd83 	bl	8000e1c <__aeabi_fmul>
 8009316:	4603      	mov	r3, r0
 8009318:	461c      	mov	r4, r3
 800931a:	9b05      	ldr	r3, [sp, #20]
 800931c:	9903      	ldr	r1, [sp, #12]
 800931e:	4618      	mov	r0, r3
 8009320:	f7f7 fd7c 	bl	8000e1c <__aeabi_fmul>
 8009324:	4603      	mov	r3, r0
 8009326:	4619      	mov	r1, r3
 8009328:	4620      	mov	r0, r4
 800932a:	f7f7 fc6f 	bl	8000c0c <__addsf3>
 800932e:	4603      	mov	r3, r0
 8009330:	930c      	str	r3, [sp, #48]	; 0x30

      // Clarke transform
      Ua = Ualpha;
 8009332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009334:	930b      	str	r3, [sp, #44]	; 0x2c
      Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 8009336:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800933a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800933c:	f7f7 fd6e 	bl	8000e1c <__aeabi_fmul>
 8009340:	4603      	mov	r3, r0
 8009342:	461c      	mov	r4, r3
 8009344:	4957      	ldr	r1, [pc, #348]	; (80094a4 <setPhaseVoltage+0x1d4>)
 8009346:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009348:	f7f7 fd68 	bl	8000e1c <__aeabi_fmul>
 800934c:	4603      	mov	r3, r0
 800934e:	4619      	mov	r1, r3
 8009350:	4620      	mov	r0, r4
 8009352:	f7f7 fc5b 	bl	8000c0c <__addsf3>
 8009356:	4603      	mov	r3, r0
 8009358:	930a      	str	r3, [sp, #40]	; 0x28
      Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 800935a:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800935e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009360:	f7f7 fd5c 	bl	8000e1c <__aeabi_fmul>
 8009364:	4603      	mov	r3, r0
 8009366:	461c      	mov	r4, r3
 8009368:	494e      	ldr	r1, [pc, #312]	; (80094a4 <setPhaseVoltage+0x1d4>)
 800936a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800936c:	f7f7 fd56 	bl	8000e1c <__aeabi_fmul>
 8009370:	4603      	mov	r3, r0
 8009372:	4619      	mov	r1, r3
 8009374:	4620      	mov	r0, r4
 8009376:	f7f7 fc47 	bl	8000c08 <__aeabi_fsub>
 800937a:	4603      	mov	r3, r0
 800937c:	9309      	str	r3, [sp, #36]	; 0x24

      center = 0.5;
 800937e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8009382:	9308      	str	r3, [sp, #32]
      float Umin = min(Ua, min(Ub, Uc));
 8009384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009386:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009388:	f7f7 fee6 	bl	8001158 <__aeabi_fcmplt>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <setPhaseVoltage+0xc6>
 8009392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009394:	e000      	b.n	8009398 <setPhaseVoltage+0xc8>
 8009396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800939a:	4618      	mov	r0, r3
 800939c:	f7f7 fefa 	bl	8001194 <__aeabi_fcmpgt>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <setPhaseVoltage+0xda>
 80093a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a8:	e009      	b.n	80093be <setPhaseVoltage+0xee>
 80093aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093ae:	f7f7 fed3 	bl	8001158 <__aeabi_fcmplt>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <setPhaseVoltage+0xec>
 80093b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ba:	e000      	b.n	80093be <setPhaseVoltage+0xee>
 80093bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093be:	9307      	str	r3, [sp, #28]
      float Umax = max(Ua, max(Ub, Uc));
 80093c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093c4:	f7f7 fee6 	bl	8001194 <__aeabi_fcmpgt>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <setPhaseVoltage+0x102>
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	e000      	b.n	80093d4 <setPhaseVoltage+0x104>
 80093d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7f7 febe 	bl	8001158 <__aeabi_fcmplt>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <setPhaseVoltage+0x116>
 80093e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e4:	e009      	b.n	80093fa <setPhaseVoltage+0x12a>
 80093e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093ea:	f7f7 fed3 	bl	8001194 <__aeabi_fcmpgt>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <setPhaseVoltage+0x128>
 80093f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f6:	e000      	b.n	80093fa <setPhaseVoltage+0x12a>
 80093f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fa:	9306      	str	r3, [sp, #24]
      center -= (Umax+Umin) / 2;
 80093fc:	9907      	ldr	r1, [sp, #28]
 80093fe:	9806      	ldr	r0, [sp, #24]
 8009400:	f7f7 fc04 	bl	8000c0c <__addsf3>
 8009404:	4603      	mov	r3, r0
 8009406:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800940a:	4618      	mov	r0, r3
 800940c:	f7f7 fdba 	bl	8000f84 <__aeabi_fdiv>
 8009410:	4603      	mov	r3, r0
 8009412:	4619      	mov	r1, r3
 8009414:	9808      	ldr	r0, [sp, #32]
 8009416:	f7f7 fbf7 	bl	8000c08 <__aeabi_fsub>
 800941a:	4603      	mov	r3, r0
 800941c:	9308      	str	r3, [sp, #32]
      Ua += center;
 800941e:	9908      	ldr	r1, [sp, #32]
 8009420:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009422:	f7f7 fbf3 	bl	8000c0c <__addsf3>
 8009426:	4603      	mov	r3, r0
 8009428:	930b      	str	r3, [sp, #44]	; 0x2c
      Ub += center;
 800942a:	9908      	ldr	r1, [sp, #32]
 800942c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800942e:	f7f7 fbed 	bl	8000c0c <__addsf3>
 8009432:	4603      	mov	r3, r0
 8009434:	930a      	str	r3, [sp, #40]	; 0x28
      Uc += center;
 8009436:	9908      	ldr	r1, [sp, #32]
 8009438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800943a:	f7f7 fbe7 	bl	8000c0c <__addsf3>
 800943e:	4603      	mov	r3, r0
 8009440:	9309      	str	r3, [sp, #36]	; 0x24
      Pa = Ua*PWM_PERIOD;
 8009442:	4919      	ldr	r1, [pc, #100]	; (80094a8 <setPhaseVoltage+0x1d8>)
 8009444:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009446:	f7f7 fce9 	bl	8000e1c <__aeabi_fmul>
 800944a:	4603      	mov	r3, r0
 800944c:	4618      	mov	r0, r3
 800944e:	f7f7 feab 	bl	80011a8 <__aeabi_f2uiz>
 8009452:	4603      	mov	r3, r0
 8009454:	b29a      	uxth	r2, r3
 8009456:	4b15      	ldr	r3, [pc, #84]	; (80094ac <setPhaseVoltage+0x1dc>)
 8009458:	801a      	strh	r2, [r3, #0]
      Pb = Ub*PWM_PERIOD;
 800945a:	4913      	ldr	r1, [pc, #76]	; (80094a8 <setPhaseVoltage+0x1d8>)
 800945c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800945e:	f7f7 fcdd 	bl	8000e1c <__aeabi_fmul>
 8009462:	4603      	mov	r3, r0
 8009464:	4618      	mov	r0, r3
 8009466:	f7f7 fe9f 	bl	80011a8 <__aeabi_f2uiz>
 800946a:	4603      	mov	r3, r0
 800946c:	b29a      	uxth	r2, r3
 800946e:	4b10      	ldr	r3, [pc, #64]	; (80094b0 <setPhaseVoltage+0x1e0>)
 8009470:	801a      	strh	r2, [r3, #0]
      Pc = Uc*PWM_PERIOD;
 8009472:	490d      	ldr	r1, [pc, #52]	; (80094a8 <setPhaseVoltage+0x1d8>)
 8009474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009476:	f7f7 fcd1 	bl	8000e1c <__aeabi_fmul>
 800947a:	4603      	mov	r3, r0
 800947c:	4618      	mov	r0, r3
 800947e:	f7f7 fe93 	bl	80011a8 <__aeabi_f2uiz>
 8009482:	4603      	mov	r3, r0
 8009484:	b29a      	uxth	r2, r3
 8009486:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <setPhaseVoltage+0x1e4>)
 8009488:	801a      	strh	r2, [r3, #0]

      setPwm(1, Pa, Pb, Pc);
 800948a:	4b08      	ldr	r3, [pc, #32]	; (80094ac <setPhaseVoltage+0x1dc>)
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	4619      	mov	r1, r3
 8009490:	4b07      	ldr	r3, [pc, #28]	; (80094b0 <setPhaseVoltage+0x1e0>)
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <setPhaseVoltage+0x1e4>)
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	2001      	movs	r0, #1
 800949c:	f7ff fec8 	bl	8009230 <setPwm>
//      setPwm(2,Ua, Ub, Uc);
//      setPwm(3,Ua, Ub, Uc);

}
 80094a0:	b00e      	add	sp, #56	; 0x38
 80094a2:	bd10      	pop	{r4, pc}
 80094a4:	3f5db3d7 	.word	0x3f5db3d7
 80094a8:	447a0000 	.word	0x447a0000
 80094ac:	200011e4 	.word	0x200011e4
 80094b0:	200011e6 	.word	0x200011e6
 80094b4:	200011e8 	.word	0x200011e8
	...

080094c0 <chSysLockFromISR.lto_priv.8>:
static inline void chSysLockFromISR(void) {
 80094c0:	b500      	push	{lr}
 80094c2:	b083      	sub	sp, #12
 80094c4:	2330      	movs	r3, #48	; 0x30
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock_from_isr();
 80094ce:	f7fd ffd7 	bl	8007480 <__dbg_check_lock_from_isr>
}
 80094d2:	b003      	add	sp, #12
 80094d4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080094e0 <chSysUnlockFromISR.lto_priv.8>:
static inline void chSysUnlockFromISR(void) {
 80094e0:	b500      	push	{lr}
 80094e2:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
 80094e4:	f7fd fff4 	bl	80074d0 <__dbg_check_unlock_from_isr>
 80094e8:	2300      	movs	r3, #0
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	9b01      	ldr	r3, [sp, #4]
 80094ee:	f383 8811 	msr	BASEPRI, r3
}
 80094f2:	b003      	add	sp, #12
 80094f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009500 <osalSysLockFromISR.lto_priv.5>:
static inline void osalSysLockFromISR(void) {
 8009500:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8009502:	f7ff ffdd 	bl	80094c0 <chSysLockFromISR.lto_priv.8>
}
 8009506:	bd08      	pop	{r3, pc}
	...

08009510 <osalSysUnlockFromISR.lto_priv.5>:
static inline void osalSysUnlockFromISR(void) {
 8009510:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8009512:	f7ff ffe5 	bl	80094e0 <chSysUnlockFromISR.lto_priv.8>
}
 8009516:	bd08      	pop	{r3, pc}
	...

08009520 <get_descriptor>:
 * handled here.
 */
static const USBDescriptor *get_descriptor(USBDriver *usbp,
                                           uint8_t dtype,
                                           uint8_t dindex,
                                           uint16_t lang) {
 8009520:	b082      	sub	sp, #8
 8009522:	9001      	str	r0, [sp, #4]
 8009524:	4608      	mov	r0, r1
 8009526:	4611      	mov	r1, r2
 8009528:	461a      	mov	r2, r3
 800952a:	4603      	mov	r3, r0
 800952c:	f88d 3003 	strb.w	r3, [sp, #3]
 8009530:	460b      	mov	r3, r1
 8009532:	f88d 3002 	strb.w	r3, [sp, #2]
 8009536:	4613      	mov	r3, r2
 8009538:	f8ad 3000 	strh.w	r3, [sp]

  (void)usbp;
  (void)lang;
  switch (dtype) {
 800953c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009540:	2b03      	cmp	r3, #3
 8009542:	d00a      	beq.n	800955a <get_descriptor+0x3a>
 8009544:	2b03      	cmp	r3, #3
 8009546:	dc12      	bgt.n	800956e <get_descriptor+0x4e>
 8009548:	2b01      	cmp	r3, #1
 800954a:	d002      	beq.n	8009552 <get_descriptor+0x32>
 800954c:	2b02      	cmp	r3, #2
 800954e:	d002      	beq.n	8009556 <get_descriptor+0x36>
 8009550:	e00d      	b.n	800956e <get_descriptor+0x4e>
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
 8009552:	4b09      	ldr	r3, [pc, #36]	; (8009578 <get_descriptor+0x58>)
 8009554:	e00c      	b.n	8009570 <get_descriptor+0x50>
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8009556:	4b09      	ldr	r3, [pc, #36]	; (800957c <get_descriptor+0x5c>)
 8009558:	e00a      	b.n	8009570 <get_descriptor+0x50>
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 800955a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800955e:	2b03      	cmp	r3, #3
 8009560:	d805      	bhi.n	800956e <get_descriptor+0x4e>
      return &vcom_strings[dindex];
 8009562:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	4a05      	ldr	r2, [pc, #20]	; (8009580 <get_descriptor+0x60>)
 800956a:	4413      	add	r3, r2
 800956c:	e000      	b.n	8009570 <get_descriptor+0x50>
  }
  return NULL;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	b002      	add	sp, #8
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	0800ab40 	.word	0x0800ab40
 800957c:	0800ab8c 	.word	0x0800ab8c
 8009580:	0800ac00 	.word	0x0800ac00
	...

08009590 <usb_event>:
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8009590:	b500      	push	{lr}
 8009592:	b083      	sub	sp, #12
 8009594:	9001      	str	r0, [sp, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	f88d 3003 	strb.w	r3, [sp, #3]
  extern SerialUSBDriver SDU1;

  switch (event) {
 800959c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80095a0:	2b06      	cmp	r3, #6
 80095a2:	d832      	bhi.n	800960a <usb_event+0x7a>
 80095a4:	a201      	add	r2, pc, #4	; (adr r2, 80095ac <usb_event+0x1c>)
 80095a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095aa:	bf00      	nop
 80095ac:	080095ed 	.word	0x080095ed
 80095b0:	0800960b 	.word	0x0800960b
 80095b4:	080095c9 	.word	0x080095c9
 80095b8:	080095ed 	.word	0x080095ed
 80095bc:	080095ed 	.word	0x080095ed
 80095c0:	080095fd 	.word	0x080095fd
 80095c4:	0800960b 	.word	0x0800960b
  case USB_EVENT_ADDRESS:
    return;
  case USB_EVENT_CONFIGURED:
    chSysLockFromISR();
 80095c8:	f7ff ff7a 	bl	80094c0 <chSysLockFromISR.lto_priv.8>

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 80095cc:	4a10      	ldr	r2, [pc, #64]	; (8009610 <usb_event+0x80>)
 80095ce:	2101      	movs	r1, #1
 80095d0:	9801      	ldr	r0, [sp, #4]
 80095d2:	f7fa fbf5 	bl	8003dc0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 80095d6:	4a0f      	ldr	r2, [pc, #60]	; (8009614 <usb_event+0x84>)
 80095d8:	2102      	movs	r1, #2
 80095da:	9801      	ldr	r0, [sp, #4]
 80095dc:	f7fa fbf0 	bl	8003dc0 <usbInitEndpointI>

    /* Resetting the state of the CDC subsystem.*/
    sduConfigureHookI(&SDU1);
 80095e0:	480d      	ldr	r0, [pc, #52]	; (8009618 <usb_event+0x88>)
 80095e2:	f7f9 ff7d 	bl	80034e0 <sduConfigureHookI>

    chSysUnlockFromISR();
 80095e6:	f7ff ff7b 	bl	80094e0 <chSysUnlockFromISR.lto_priv.8>
 80095ea:	e00e      	b.n	800960a <usb_event+0x7a>
  case USB_EVENT_RESET:
    /* Falls into.*/
  case USB_EVENT_UNCONFIGURED:
    /* Falls into.*/
  case USB_EVENT_SUSPEND:
    chSysLockFromISR();
 80095ec:	f7ff ff68 	bl	80094c0 <chSysLockFromISR.lto_priv.8>

    /* Disconnection event on suspend.*/
    sduSuspendHookI(&SDU1);
 80095f0:	4809      	ldr	r0, [pc, #36]	; (8009618 <usb_event+0x88>)
 80095f2:	f7f9 ff2d 	bl	8003450 <sduSuspendHookI>

    chSysUnlockFromISR();
 80095f6:	f7ff ff73 	bl	80094e0 <chSysUnlockFromISR.lto_priv.8>
 80095fa:	e006      	b.n	800960a <usb_event+0x7a>
    return;
  case USB_EVENT_WAKEUP:
    chSysLockFromISR();
 80095fc:	f7ff ff60 	bl	80094c0 <chSysLockFromISR.lto_priv.8>

    /* Connection event on wakeup.*/
    sduWakeupHookI(&SDU1);
 8009600:	4805      	ldr	r0, [pc, #20]	; (8009618 <usb_event+0x88>)
 8009602:	f7f9 ff55 	bl	80034b0 <sduWakeupHookI>

    chSysUnlockFromISR();
 8009606:	f7ff ff6b 	bl	80094e0 <chSysUnlockFromISR.lto_priv.8>
    return;
  case USB_EVENT_STALLED:
    return;
  }
  return;
}
 800960a:	b003      	add	sp, #12
 800960c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009610:	0800ac20 	.word	0x0800ac20
 8009614:	0800ac44 	.word	0x0800ac44
 8009618:	200011ec 	.word	0x200011ec
 800961c:	00000000 	.word	0x00000000

08009620 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8009620:	b500      	push	{lr}
 8009622:	b083      	sub	sp, #12
 8009624:	9001      	str	r0, [sp, #4]

  (void)usbp;

  osalSysLockFromISR();
 8009626:	f7ff ff6b 	bl	8009500 <osalSysLockFromISR.lto_priv.5>
  sduSOFHookI(&SDU1);
 800962a:	4804      	ldr	r0, [pc, #16]	; (800963c <sof_handler+0x1c>)
 800962c:	f7f9 ffb8 	bl	80035a0 <sduSOFHookI>
  osalSysUnlockFromISR();
 8009630:	f7ff ff6e 	bl	8009510 <osalSysUnlockFromISR.lto_priv.5>
}
 8009634:	b003      	add	sp, #12
 8009636:	f85d fb04 	ldr.w	pc, [sp], #4
 800963a:	bf00      	nop
 800963c:	200011ec 	.word	0x200011ec

08009640 <_sin>:
#include <math.h>

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 8009640:	b500      	push	{lr}
 8009642:	b087      	sub	sp, #28
 8009644:	9001      	str	r0, [sp, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 8009646:	4935      	ldr	r1, [pc, #212]	; (800971c <_sin+0xdc>)
 8009648:	9801      	ldr	r0, [sp, #4]
 800964a:	f7f7 fbe7 	bl	8000e1c <__aeabi_fmul>
 800964e:	4603      	mov	r3, r0
 8009650:	4618      	mov	r0, r3
 8009652:	f7f7 fda9 	bl	80011a8 <__aeabi_f2uiz>
 8009656:	4603      	mov	r3, r0
 8009658:	9303      	str	r3, [sp, #12]
  int t1, t2, frac = i & 0xff;
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	b2db      	uxtb	r3, r3
 800965e:	9302      	str	r3, [sp, #8]
  i = (i >> 8) & 0xff;
 8009660:	9b03      	ldr	r3, [sp, #12]
 8009662:	0a1b      	lsrs	r3, r3, #8
 8009664:	b2db      	uxtb	r3, r3
 8009666:	9303      	str	r3, [sp, #12]
  if (i < 64) {
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	2b3f      	cmp	r3, #63	; 0x3f
 800966c:	d80b      	bhi.n	8009686 <_sin+0x46>
    t1 = sine_array[i]; t2 = sine_array[i+1];
 800966e:	4a2c      	ldr	r2, [pc, #176]	; (8009720 <_sin+0xe0>)
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009676:	9305      	str	r3, [sp, #20]
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	3301      	adds	r3, #1
 800967c:	4a28      	ldr	r2, [pc, #160]	; (8009720 <_sin+0xe0>)
 800967e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	e033      	b.n	80096ee <_sin+0xae>
  }
  else if(i < 128) {
 8009686:	9b03      	ldr	r3, [sp, #12]
 8009688:	2b7f      	cmp	r3, #127	; 0x7f
 800968a:	d80e      	bhi.n	80096aa <_sin+0x6a>
    t1 = sine_array[128 - i]; t2 = sine_array[127 - i];
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009692:	4a23      	ldr	r2, [pc, #140]	; (8009720 <_sin+0xe0>)
 8009694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009698:	9305      	str	r3, [sp, #20]
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80096a0:	4a1f      	ldr	r2, [pc, #124]	; (8009720 <_sin+0xe0>)
 80096a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	e021      	b.n	80096ee <_sin+0xae>
  }
  else if(i < 192) {
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	2bbf      	cmp	r3, #191	; 0xbf
 80096ae:	d80e      	bhi.n	80096ce <_sin+0x8e>
    t1 = -sine_array[-128 + i]; t2 = -sine_array[-127 + i];
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	3b80      	subs	r3, #128	; 0x80
 80096b4:	4a1a      	ldr	r2, [pc, #104]	; (8009720 <_sin+0xe0>)
 80096b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096ba:	425b      	negs	r3, r3
 80096bc:	9305      	str	r3, [sp, #20]
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	3b7f      	subs	r3, #127	; 0x7f
 80096c2:	4a17      	ldr	r2, [pc, #92]	; (8009720 <_sin+0xe0>)
 80096c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096c8:	425b      	negs	r3, r3
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	e00f      	b.n	80096ee <_sin+0xae>
  }
  else {
    t1 = -sine_array[256 - i]; t2 = -sine_array[255 - i];
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80096d4:	4a12      	ldr	r2, [pc, #72]	; (8009720 <_sin+0xe0>)
 80096d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096da:	425b      	negs	r3, r3
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80096e4:	4a0e      	ldr	r2, [pc, #56]	; (8009720 <_sin+0xe0>)
 80096e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096ea:	425b      	negs	r3, r3
 80096ec:	9304      	str	r3, [sp, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 80096ee:	9a04      	ldr	r2, [sp, #16]
 80096f0:	9b05      	ldr	r3, [sp, #20]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	9a02      	ldr	r2, [sp, #8]
 80096f6:	fb02 f303 	mul.w	r3, r2, r3
 80096fa:	121a      	asrs	r2, r3, #8
 80096fc:	9b05      	ldr	r3, [sp, #20]
 80096fe:	4413      	add	r3, r2
 8009700:	4618      	mov	r0, r3
 8009702:	f7f7 fb37 	bl	8000d74 <__aeabi_i2f>
 8009706:	4603      	mov	r3, r0
 8009708:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 800970c:	4618      	mov	r0, r3
 800970e:	f7f7 fb85 	bl	8000e1c <__aeabi_fmul>
 8009712:	4603      	mov	r3, r0
}
 8009714:	4618      	mov	r0, r3
 8009716:	b007      	add	sp, #28
 8009718:	f85d fb04 	ldr.w	pc, [sp], #4
 800971c:	4622f983 	.word	0x4622f983
 8009720:	200008b0 	.word	0x200008b0
	...

08009730 <_cos>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 8009730:	b500      	push	{lr}
 8009732:	b085      	sub	sp, #20
 8009734:	9001      	str	r0, [sp, #4]
  float a_sin = a + _PI_2;
 8009736:	490e      	ldr	r1, [pc, #56]	; (8009770 <_cos+0x40>)
 8009738:	9801      	ldr	r0, [sp, #4]
 800973a:	f7f7 fa67 	bl	8000c0c <__addsf3>
 800973e:	4603      	mov	r3, r0
 8009740:	9303      	str	r3, [sp, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8009742:	490c      	ldr	r1, [pc, #48]	; (8009774 <_cos+0x44>)
 8009744:	9803      	ldr	r0, [sp, #12]
 8009746:	f7f7 fd25 	bl	8001194 <__aeabi_fcmpgt>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <_cos+0x2c>
 8009750:	4908      	ldr	r1, [pc, #32]	; (8009774 <_cos+0x44>)
 8009752:	9803      	ldr	r0, [sp, #12]
 8009754:	f7f7 fa58 	bl	8000c08 <__aeabi_fsub>
 8009758:	4603      	mov	r3, r0
 800975a:	e000      	b.n	800975e <_cos+0x2e>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	9303      	str	r3, [sp, #12]
  return _sin(a_sin);
 8009760:	9803      	ldr	r0, [sp, #12]
 8009762:	f7ff ff6d 	bl	8009640 <_sin>
 8009766:	4603      	mov	r3, r0
}
 8009768:	4618      	mov	r0, r3
 800976a:	b005      	add	sp, #20
 800976c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009770:	3fc90fdb 	.word	0x3fc90fdb
 8009774:	40c90fdb 	.word	0x40c90fdb
	...

08009780 <_sincos>:


__attribute__((weak)) void _sincos(float a, float* s, float* c){
 8009780:	b500      	push	{lr}
 8009782:	b085      	sub	sp, #20
 8009784:	9003      	str	r0, [sp, #12]
 8009786:	9102      	str	r1, [sp, #8]
 8009788:	9201      	str	r2, [sp, #4]
  *s = _sin(a);
 800978a:	9803      	ldr	r0, [sp, #12]
 800978c:	f7ff ff58 	bl	8009640 <_sin>
 8009790:	4602      	mov	r2, r0
 8009792:	9b02      	ldr	r3, [sp, #8]
 8009794:	601a      	str	r2, [r3, #0]
  *c = _cos(a);
 8009796:	9803      	ldr	r0, [sp, #12]
 8009798:	f7ff ffca 	bl	8009730 <_cos>
 800979c:	4602      	mov	r2, r0
 800979e:	9b01      	ldr	r3, [sp, #4]
 80097a0:	601a      	str	r2, [r3, #0]
}
 80097a2:	b005      	add	sp, #20
 80097a4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080097b0 <chRegSetThreadName.lto_priv.0>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 80097b0:	b082      	sub	sp, #8
 80097b2:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 80097b4:	4b02      	ldr	r3, [pc, #8]	; (80097c0 <chRegSetThreadName.lto_priv.0+0x10>)
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	9a01      	ldr	r2, [sp, #4]
 80097ba:	621a      	str	r2, [r3, #32]
#else
  (void)name;
#endif
}
 80097bc:	b002      	add	sp, #8
 80097be:	4770      	bx	lr
 80097c0:	20000fa0 	.word	0x20000fa0
	...

080097d0 <CalThread>:
#define temperature_factor 0.00294117647f // 1/340

MPU6050 mpu6050;

static THD_WORKING_AREA(CalwaThread, 128);
static THD_FUNCTION(CalThread, arg) {
 80097d0:	b500      	push	{lr}
 80097d2:	b083      	sub	sp, #12
 80097d4:	9001      	str	r0, [sp, #4]

  (void)arg;

  chRegSetThreadName("calculate");
 80097d6:	4830      	ldr	r0, [pc, #192]	; (8009898 <CalThread+0xc8>)
 80097d8:	f7ff ffea 	bl	80097b0 <chRegSetThreadName.lto_priv.0>
  while (true) {
    mpu6050.acx_nomal = (float) mpu6050.acx_raw * ACCEL_FACTOR;
 80097dc:	4b2f      	ldr	r3, [pc, #188]	; (800989c <CalThread+0xcc>)
 80097de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7f7 fac6 	bl	8000d74 <__aeabi_i2f>
 80097e8:	4603      	mov	r3, r0
 80097ea:	492d      	ldr	r1, [pc, #180]	; (80098a0 <CalThread+0xd0>)
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7f7 fb15 	bl	8000e1c <__aeabi_fmul>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	4b29      	ldr	r3, [pc, #164]	; (800989c <CalThread+0xcc>)
 80097f8:	611a      	str	r2, [r3, #16]
    mpu6050.acy_nomal = (float) mpu6050.acy_raw * ACCEL_FACTOR;
 80097fa:	4b28      	ldr	r3, [pc, #160]	; (800989c <CalThread+0xcc>)
 80097fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009800:	4618      	mov	r0, r3
 8009802:	f7f7 fab7 	bl	8000d74 <__aeabi_i2f>
 8009806:	4603      	mov	r3, r0
 8009808:	4925      	ldr	r1, [pc, #148]	; (80098a0 <CalThread+0xd0>)
 800980a:	4618      	mov	r0, r3
 800980c:	f7f7 fb06 	bl	8000e1c <__aeabi_fmul>
 8009810:	4603      	mov	r3, r0
 8009812:	461a      	mov	r2, r3
 8009814:	4b21      	ldr	r3, [pc, #132]	; (800989c <CalThread+0xcc>)
 8009816:	615a      	str	r2, [r3, #20]
    mpu6050.acz_nomal = (float) mpu6050.acz_raw * ACCEL_FACTOR;
 8009818:	4b20      	ldr	r3, [pc, #128]	; (800989c <CalThread+0xcc>)
 800981a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800981e:	4618      	mov	r0, r3
 8009820:	f7f7 faa8 	bl	8000d74 <__aeabi_i2f>
 8009824:	4603      	mov	r3, r0
 8009826:	491e      	ldr	r1, [pc, #120]	; (80098a0 <CalThread+0xd0>)
 8009828:	4618      	mov	r0, r3
 800982a:	f7f7 faf7 	bl	8000e1c <__aeabi_fmul>
 800982e:	4603      	mov	r3, r0
 8009830:	461a      	mov	r2, r3
 8009832:	4b1a      	ldr	r3, [pc, #104]	; (800989c <CalThread+0xcc>)
 8009834:	619a      	str	r2, [r3, #24]
    mpu6050.gyx_rps = (float) mpu6050.gyx_raw * GYRO_FACTOR;
 8009836:	4b19      	ldr	r3, [pc, #100]	; (800989c <CalThread+0xcc>)
 8009838:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800983c:	4618      	mov	r0, r3
 800983e:	f7f7 fa99 	bl	8000d74 <__aeabi_i2f>
 8009842:	4603      	mov	r3, r0
 8009844:	4917      	ldr	r1, [pc, #92]	; (80098a4 <CalThread+0xd4>)
 8009846:	4618      	mov	r0, r3
 8009848:	f7f7 fae8 	bl	8000e1c <__aeabi_fmul>
 800984c:	4603      	mov	r3, r0
 800984e:	461a      	mov	r2, r3
 8009850:	4b12      	ldr	r3, [pc, #72]	; (800989c <CalThread+0xcc>)
 8009852:	621a      	str	r2, [r3, #32]
    mpu6050.gyy_rps = (float) mpu6050.gyy_raw * GYRO_FACTOR;
 8009854:	4b11      	ldr	r3, [pc, #68]	; (800989c <CalThread+0xcc>)
 8009856:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800985a:	4618      	mov	r0, r3
 800985c:	f7f7 fa8a 	bl	8000d74 <__aeabi_i2f>
 8009860:	4603      	mov	r3, r0
 8009862:	4910      	ldr	r1, [pc, #64]	; (80098a4 <CalThread+0xd4>)
 8009864:	4618      	mov	r0, r3
 8009866:	f7f7 fad9 	bl	8000e1c <__aeabi_fmul>
 800986a:	4603      	mov	r3, r0
 800986c:	461a      	mov	r2, r3
 800986e:	4b0b      	ldr	r3, [pc, #44]	; (800989c <CalThread+0xcc>)
 8009870:	625a      	str	r2, [r3, #36]	; 0x24
    mpu6050.gyz_rps = (float) mpu6050.gyz_raw * GYRO_FACTOR;
 8009872:	4b0a      	ldr	r3, [pc, #40]	; (800989c <CalThread+0xcc>)
 8009874:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009878:	4618      	mov	r0, r3
 800987a:	f7f7 fa7b 	bl	8000d74 <__aeabi_i2f>
 800987e:	4603      	mov	r3, r0
 8009880:	4908      	ldr	r1, [pc, #32]	; (80098a4 <CalThread+0xd4>)
 8009882:	4618      	mov	r0, r3
 8009884:	f7f7 faca 	bl	8000e1c <__aeabi_fmul>
 8009888:	4603      	mov	r3, r0
 800988a:	461a      	mov	r2, r3
 800988c:	4b03      	ldr	r3, [pc, #12]	; (800989c <CalThread+0xcc>)
 800988e:	629a      	str	r2, [r3, #40]	; 0x28
    chThdSleepMilliseconds(10);
 8009890:	2014      	movs	r0, #20
 8009892:	f7fe fe85 	bl	80085a0 <chThdSleep>
 8009896:	e7a1      	b.n	80097dc <CalThread+0xc>
 8009898:	0800ac80 	.word	0x0800ac80
 800989c:	200016ac 	.word	0x200016ac
 80098a0:	387ffffe 	.word	0x387ffffe
 80098a4:	3bfa232d 	.word	0x3bfa232d
	...

080098b0 <mpu6050init>:
  }
}
void mpu6050init(void){
 80098b0:	b500      	push	{lr}
 80098b2:	b087      	sub	sp, #28

    msg_t msg;
    uint8_t data_to_write[2];
   // chMtxObjectInit(&mt_mpu6050);
    //uint8_t data_to_write[2]; //레지스터 주소와 그 레지스터에 새로 넣어줄 값를 저장하는 배열
    data_to_write[0] = PWR_MGMT_1_REG;
 80098b4:	236b      	movs	r3, #107	; 0x6b
 80098b6:	f88d 3010 	strb.w	r3, [sp, #16]
    data_to_write[1] = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	f88d 3011 	strb.w	r3, [sp, #17]

    i2cAcquireBus(&I2CD1);
 80098c0:	4834      	ldr	r0, [pc, #208]	; (8009994 <mpu6050init+0xe4>)
 80098c2:	f7f9 f875 	bl	80029b0 <i2cAcquireBus>
    msg = i2cMasterTransmitTimeout(&I2CD1,MPU6050_ADDR, data_to_write, 2, NULL, 0, 10);
 80098c6:	aa04      	add	r2, sp, #16
 80098c8:	230a      	movs	r3, #10
 80098ca:	9302      	str	r3, [sp, #8]
 80098cc:	2300      	movs	r3, #0
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	2300      	movs	r3, #0
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	2302      	movs	r3, #2
 80098d6:	2168      	movs	r1, #104	; 0x68
 80098d8:	482e      	ldr	r0, [pc, #184]	; (8009994 <mpu6050init+0xe4>)
 80098da:	f7f8 ffe1 	bl	80028a0 <i2cMasterTransmitTimeout>
 80098de:	9005      	str	r0, [sp, #20]
    i2cReleaseBus(&I2CD1);
 80098e0:	482c      	ldr	r0, [pc, #176]	; (8009994 <mpu6050init+0xe4>)
 80098e2:	f7f9 f87d 	bl	80029e0 <i2cReleaseBus>
    //osalDbgCheck(MSG_OK == msg);

    // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
    data_to_write[0] = SMPLRT_DIV_REG;
 80098e6:	2319      	movs	r3, #25
 80098e8:	f88d 3010 	strb.w	r3, [sp, #16]
    data_to_write[1] = 0x07;
 80098ec:	2307      	movs	r3, #7
 80098ee:	f88d 3011 	strb.w	r3, [sp, #17]

    i2cAcquireBus(&I2CD1);
 80098f2:	4828      	ldr	r0, [pc, #160]	; (8009994 <mpu6050init+0xe4>)
 80098f4:	f7f9 f85c 	bl	80029b0 <i2cAcquireBus>
    msg = i2cMasterTransmitTimeout(&I2CD1,MPU6050_ADDR, data_to_write, 2, NULL, 0, 10);
 80098f8:	aa04      	add	r2, sp, #16
 80098fa:	230a      	movs	r3, #10
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	2300      	movs	r3, #0
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	2300      	movs	r3, #0
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	2302      	movs	r3, #2
 8009908:	2168      	movs	r1, #104	; 0x68
 800990a:	4822      	ldr	r0, [pc, #136]	; (8009994 <mpu6050init+0xe4>)
 800990c:	f7f8 ffc8 	bl	80028a0 <i2cMasterTransmitTimeout>
 8009910:	9005      	str	r0, [sp, #20]
    i2cReleaseBus(&I2CD1);
 8009912:	4820      	ldr	r0, [pc, #128]	; (8009994 <mpu6050init+0xe4>)
 8009914:	f7f9 f864 	bl	80029e0 <i2cReleaseBus>
    //osalDbgCheck(MSG_OK == msg);
    // Set accelerometer configuration in ACCEL_CONFIG Register
    // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
    data_to_write[0] = ACCEL_CONFIG_REG;
 8009918:	231c      	movs	r3, #28
 800991a:	f88d 3010 	strb.w	r3, [sp, #16]
    data_to_write[1] = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	f88d 3011 	strb.w	r3, [sp, #17]

    i2cAcquireBus(&I2CD1);
 8009924:	481b      	ldr	r0, [pc, #108]	; (8009994 <mpu6050init+0xe4>)
 8009926:	f7f9 f843 	bl	80029b0 <i2cAcquireBus>
    msg = i2cMasterTransmitTimeout(&I2CD1,MPU6050_ADDR, data_to_write, 2, NULL, 0, 10);
 800992a:	aa04      	add	r2, sp, #16
 800992c:	230a      	movs	r3, #10
 800992e:	9302      	str	r3, [sp, #8]
 8009930:	2300      	movs	r3, #0
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	2300      	movs	r3, #0
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	2302      	movs	r3, #2
 800993a:	2168      	movs	r1, #104	; 0x68
 800993c:	4815      	ldr	r0, [pc, #84]	; (8009994 <mpu6050init+0xe4>)
 800993e:	f7f8 ffaf 	bl	80028a0 <i2cMasterTransmitTimeout>
 8009942:	9005      	str	r0, [sp, #20]
    i2cReleaseBus(&I2CD1);
 8009944:	4813      	ldr	r0, [pc, #76]	; (8009994 <mpu6050init+0xe4>)
 8009946:	f7f9 f84b 	bl	80029e0 <i2cReleaseBus>
    //osalDbgCheck(MSG_OK == msg);

    // Set Gyroscopic configuration in GYRO_CONFIG Register
    // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
    data_to_write[0] = GYRO_CONFIG_REG;
 800994a:	231b      	movs	r3, #27
 800994c:	f88d 3010 	strb.w	r3, [sp, #16]
    data_to_write[1] = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	f88d 3011 	strb.w	r3, [sp, #17]

    i2cAcquireBus(&I2CD1);
 8009956:	480f      	ldr	r0, [pc, #60]	; (8009994 <mpu6050init+0xe4>)
 8009958:	f7f9 f82a 	bl	80029b0 <i2cAcquireBus>
    msg = i2cMasterTransmitTimeout(&I2CD1,MPU6050_ADDR, data_to_write, 2, NULL, 0, 10);
 800995c:	aa04      	add	r2, sp, #16
 800995e:	230a      	movs	r3, #10
 8009960:	9302      	str	r3, [sp, #8]
 8009962:	2300      	movs	r3, #0
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	2300      	movs	r3, #0
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	2302      	movs	r3, #2
 800996c:	2168      	movs	r1, #104	; 0x68
 800996e:	4809      	ldr	r0, [pc, #36]	; (8009994 <mpu6050init+0xe4>)
 8009970:	f7f8 ff96 	bl	80028a0 <i2cMasterTransmitTimeout>
 8009974:	9005      	str	r0, [sp, #20]
    i2cReleaseBus(&I2CD1);
 8009976:	4807      	ldr	r0, [pc, #28]	; (8009994 <mpu6050init+0xe4>)
 8009978:	f7f9 f832 	bl	80029e0 <i2cReleaseBus>
    //osalDbgCheck(MSG_OK == msg);

  //  palSetPadMode(GPIOC, GPIOC_ARD_A5, PAL_MODE_OUTPUT_PUSHPULL);//
  chThdCreateStatic(CalwaThread, sizeof(CalwaThread), NORMALPRIO, CalThread, NULL);
 800997c:	2300      	movs	r3, #0
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	4b05      	ldr	r3, [pc, #20]	; (8009998 <mpu6050init+0xe8>)
 8009982:	2280      	movs	r2, #128	; 0x80
 8009984:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8009988:	4804      	ldr	r0, [pc, #16]	; (800999c <mpu6050init+0xec>)
 800998a:	f7fe fd29 	bl	80083e0 <chThdCreateStatic>

}
 800998e:	b007      	add	sp, #28
 8009990:	f85d fb04 	ldr.w	pc, [sp], #4
 8009994:	20000da0 	.word	0x20000da0
 8009998:	080097d1 	.word	0x080097d1
 800999c:	200016d8 	.word	0x200016d8

080099a0 <as5600Init>:

uint16_t mag16;

void as5600Init(void){

}
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
	...

080099b0 <chSysLock.lto_priv.24>:
static inline void chSysLock(void) {
 80099b0:	b500      	push	{lr}
 80099b2:	b083      	sub	sp, #12
 80099b4:	2330      	movs	r3, #48	; 0x30
 80099b6:	9301      	str	r3, [sp, #4]
 80099b8:	9b01      	ldr	r3, [sp, #4]
 80099ba:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 80099be:	f7fd fd0f 	bl	80073e0 <__dbg_check_lock>
}
 80099c2:	b003      	add	sp, #12
 80099c4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080099d0 <chSysUnlock.lto_priv.24>:
static inline void chSysUnlock(void) {
 80099d0:	b500      	push	{lr}
 80099d2:	b083      	sub	sp, #12
  __dbg_check_unlock();
 80099d4:	f7fd fd2c 	bl	8007430 <__dbg_check_unlock>
 80099d8:	2300      	movs	r3, #0
 80099da:	9301      	str	r3, [sp, #4]
 80099dc:	9b01      	ldr	r3, [sp, #4]
 80099de:	f383 8811 	msr	BASEPRI, r3
}
 80099e2:	b003      	add	sp, #12
 80099e4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080099f0 <chVTGetSystemTimeX.lto_priv.4>:
  return currcore->vtlist.systime;
 80099f0:	4b02      	ldr	r3, [pc, #8]	; (80099fc <chVTGetSystemTimeX.lto_priv.4+0xc>)
 80099f2:	8b9b      	ldrh	r3, [r3, #28]
 80099f4:	b29b      	uxth	r3, r3
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	20000fa0 	.word	0x20000fa0

08009a00 <chVTGetSystemTime>:
static inline systime_t chVTGetSystemTime(void) {
 8009a00:	b500      	push	{lr}
 8009a02:	b083      	sub	sp, #12
  chSysLock();
 8009a04:	f7ff ffd4 	bl	80099b0 <chSysLock.lto_priv.24>
  systime = chVTGetSystemTimeX();
 8009a08:	f7ff fff2 	bl	80099f0 <chVTGetSystemTimeX.lto_priv.4>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f8ad 3006 	strh.w	r3, [sp, #6]
  chSysUnlock();
 8009a12:	f7ff ffdd 	bl	80099d0 <chSysUnlock.lto_priv.24>
  return systime;
 8009a16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	b003      	add	sp, #12
 8009a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a22:	bf00      	nop
	...

08009a30 <chRegSetThreadName.lto_priv.1>:
static inline void chRegSetThreadName(const char *name) {
 8009a30:	b082      	sub	sp, #8
 8009a32:	9001      	str	r0, [sp, #4]
  __sch_get_currthread()->name = name;
 8009a34:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <chRegSetThreadName.lto_priv.1+0x10>)
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	9a01      	ldr	r2, [sp, #4]
 8009a3a:	621a      	str	r2, [r3, #32]
}
 8009a3c:	b002      	add	sp, #8
 8009a3e:	4770      	bx	lr
 8009a40:	20000fa0 	.word	0x20000fa0
	...

08009a50 <i2cThread>:
    200000,
    FAST_DUTY_CYCLE_2
};
static uint8_t Buff[32];
static THD_WORKING_AREA(i2cwaThread, 256);
static THD_FUNCTION(i2cThread, arg) {
 8009a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a52:	b08f      	sub	sp, #60	; 0x3c
 8009a54:	9005      	str	r0, [sp, #20]

  (void)arg;
  chRegSetThreadName("i2c");
 8009a56:	48a9      	ldr	r0, [pc, #676]	; (8009cfc <i2cThread+0x2ac>)
 8009a58:	f7ff ffea 	bl	8009a30 <chRegSetThreadName.lto_priv.1>

  msg_t msg = MSG_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	930d      	str	r3, [sp, #52]	; 0x34
  uint8_t data_to_write = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	f88d 301b 	strb.w	r3, [sp, #27]
  i2cflags_t errors;
  int readCount=0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t total = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t errCount = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	930a      	str	r3, [sp, #40]	; 0x28
 // systime_t start = chVTGetSystemTime();
  systime_t systick = chVTGetSystemTime();
 8009a72:	f7ff ffc5 	bl	8009a00 <chVTGetSystemTime>
 8009a76:	4603      	mov	r3, r0
 8009a78:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  uint32_t waitTick = 10;
 8009a7c:	230a      	movs	r3, #10
 8009a7e:	9308      	str	r3, [sp, #32]
  while (true) {
    readCount = 2;
 8009a80:	2302      	movs	r3, #2
 8009a82:	930c      	str	r3, [sp, #48]	; 0x30
    switch(readCount){
 8009a84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d039      	beq.n	8009afe <i2cThread+0xae>
 8009a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	dc4d      	bgt.n	8009b2c <i2cThread+0xdc>
 8009a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <i2cThread+0x4e>
 8009a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d018      	beq.n	8009ace <i2cThread+0x7e>
 8009a9c:	e046      	b.n	8009b2c <i2cThread+0xdc>
      case(0):    //mpu6050 reading
        data_to_write = ADDRESS_ACCEL_XOUT_H;
 8009a9e:	233b      	movs	r3, #59	; 0x3b
 8009aa0:	f88d 301b 	strb.w	r3, [sp, #27]
        i2cAcquireBus(&I2CD1);
 8009aa4:	4896      	ldr	r0, [pc, #600]	; (8009d00 <i2cThread+0x2b0>)
 8009aa6:	f7f8 ff83 	bl	80029b0 <i2cAcquireBus>
        msg = i2cMasterTransmitTimeout(&I2CD1, MPU6050_ADDR, &data_to_write, 1, Buff, 8, 2);
 8009aaa:	f10d 021b 	add.w	r2, sp, #27
 8009aae:	2302      	movs	r3, #2
 8009ab0:	9302      	str	r3, [sp, #8]
 8009ab2:	2308      	movs	r3, #8
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	4b93      	ldr	r3, [pc, #588]	; (8009d04 <i2cThread+0x2b4>)
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	2301      	movs	r3, #1
 8009abc:	2168      	movs	r1, #104	; 0x68
 8009abe:	4890      	ldr	r0, [pc, #576]	; (8009d00 <i2cThread+0x2b0>)
 8009ac0:	f7f8 feee 	bl	80028a0 <i2cMasterTransmitTimeout>
 8009ac4:	900d      	str	r0, [sp, #52]	; 0x34
        i2cReleaseBus(&I2CD1);
 8009ac6:	488e      	ldr	r0, [pc, #568]	; (8009d00 <i2cThread+0x2b0>)
 8009ac8:	f7f8 ff8a 	bl	80029e0 <i2cReleaseBus>
 8009acc:	e02e      	b.n	8009b2c <i2cThread+0xdc>
        break;
      case(1):    //mpu6050 reading
        data_to_write = GYRO_XOUT_H_REG;
 8009ace:	2343      	movs	r3, #67	; 0x43
 8009ad0:	f88d 301b 	strb.w	r3, [sp, #27]
        i2cAcquireBus(&I2CD1);
 8009ad4:	488a      	ldr	r0, [pc, #552]	; (8009d00 <i2cThread+0x2b0>)
 8009ad6:	f7f8 ff6b 	bl	80029b0 <i2cAcquireBus>
        msg = i2cMasterTransmitTimeout(&I2CD1, MPU6050_ADDR, &data_to_write, 1, Buff, 6, 2);
 8009ada:	f10d 021b 	add.w	r2, sp, #27
 8009ade:	2302      	movs	r3, #2
 8009ae0:	9302      	str	r3, [sp, #8]
 8009ae2:	2306      	movs	r3, #6
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	4b87      	ldr	r3, [pc, #540]	; (8009d04 <i2cThread+0x2b4>)
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	2301      	movs	r3, #1
 8009aec:	2168      	movs	r1, #104	; 0x68
 8009aee:	4884      	ldr	r0, [pc, #528]	; (8009d00 <i2cThread+0x2b0>)
 8009af0:	f7f8 fed6 	bl	80028a0 <i2cMasterTransmitTimeout>
 8009af4:	900d      	str	r0, [sp, #52]	; 0x34
        i2cReleaseBus(&I2CD1);
 8009af6:	4882      	ldr	r0, [pc, #520]	; (8009d00 <i2cThread+0x2b0>)
 8009af8:	f7f8 ff72 	bl	80029e0 <i2cReleaseBus>
 8009afc:	e016      	b.n	8009b2c <i2cThread+0xdc>
        break;
      case(2):    //as5600 reading
        data_to_write = AS5600_REGISTER_ANGLE_HIGH;
 8009afe:	230e      	movs	r3, #14
 8009b00:	f88d 301b 	strb.w	r3, [sp, #27]
        i2cAcquireBus(&I2CD1);
 8009b04:	487e      	ldr	r0, [pc, #504]	; (8009d00 <i2cThread+0x2b0>)
 8009b06:	f7f8 ff53 	bl	80029b0 <i2cAcquireBus>
        msg = i2cMasterTransmitTimeout(&I2CD1,AS5600_SLAVE_ADDRESS, &data_to_write, 1, Buff, 2, 2);
 8009b0a:	f10d 021b 	add.w	r2, sp, #27
 8009b0e:	2302      	movs	r3, #2
 8009b10:	9302      	str	r3, [sp, #8]
 8009b12:	2302      	movs	r3, #2
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	4b7b      	ldr	r3, [pc, #492]	; (8009d04 <i2cThread+0x2b4>)
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	2136      	movs	r1, #54	; 0x36
 8009b1e:	4878      	ldr	r0, [pc, #480]	; (8009d00 <i2cThread+0x2b0>)
 8009b20:	f7f8 febe 	bl	80028a0 <i2cMasterTransmitTimeout>
 8009b24:	900d      	str	r0, [sp, #52]	; 0x34
        i2cReleaseBus(&I2CD1);
 8009b26:	4876      	ldr	r0, [pc, #472]	; (8009d00 <i2cThread+0x2b0>)
 8009b28:	f7f8 ff5a 	bl	80029e0 <i2cReleaseBus>
        break;
    }

    total += 1;
 8009b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b2e:	3301      	adds	r3, #1
 8009b30:	930b      	str	r3, [sp, #44]	; 0x2c
    if (msg != MSG_OK) {
 8009b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d019      	beq.n	8009b6c <i2cThread+0x11c>
      errCount +=1;
 8009b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	930a      	str	r3, [sp, #40]	; 0x28
       errors = i2cGetErrors(&I2CD1);
 8009b3e:	4870      	ldr	r0, [pc, #448]	; (8009d00 <i2cThread+0x2b0>)
 8009b40:	f7f8 fe96 	bl	8002870 <i2cGetErrors>
 8009b44:	9007      	str	r0, [sp, #28]
       if(errors != 0){
 8009b46:	9b07      	ldr	r3, [sp, #28]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d007      	beq.n	8009b5c <i2cThread+0x10c>
         chprintf((BaseSequentialStream*)&SD3, "errors from I2C: %d / %d code:%x\r\n", errCount,total,errors);
 8009b4c:	9b07      	ldr	r3, [sp, #28]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b54:	496c      	ldr	r1, [pc, #432]	; (8009d08 <i2cThread+0x2b8>)
 8009b56:	486d      	ldr	r0, [pc, #436]	; (8009d0c <i2cThread+0x2bc>)
 8009b58:	f7fa ff5a 	bl	8004a10 <chprintf>
       }
       i2cStop(&I2CD1);
 8009b5c:	4868      	ldr	r0, [pc, #416]	; (8009d00 <i2cThread+0x2b0>)
 8009b5e:	f7f8 fe67 	bl	8002830 <i2cStop>
       i2cStart(&I2CD1, &i2cfg1);
 8009b62:	496b      	ldr	r1, [pc, #428]	; (8009d10 <i2cThread+0x2c0>)
 8009b64:	4866      	ldr	r0, [pc, #408]	; (8009d00 <i2cThread+0x2b0>)
 8009b66:	f7f8 fe2b 	bl	80027c0 <i2cStart>
 8009b6a:	e070      	b.n	8009c4e <i2cThread+0x1fe>
    }
    else{

      switch(readCount){
 8009b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d05e      	beq.n	8009c30 <i2cThread+0x1e0>
 8009b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	dc6a      	bgt.n	8009c4e <i2cThread+0x1fe>
 8009b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <i2cThread+0x136>
 8009b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d030      	beq.n	8009be6 <i2cThread+0x196>
 8009b84:	e063      	b.n	8009c4e <i2cThread+0x1fe>
        case(0):    //mpu6050 acc reading
          mpu6050.acx_raw = (Buff[0] << 8) | Buff[1];
 8009b86:	4b5f      	ldr	r3, [pc, #380]	; (8009d04 <i2cThread+0x2b4>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	021b      	lsls	r3, r3, #8
 8009b8c:	b21a      	sxth	r2, r3
 8009b8e:	4b5d      	ldr	r3, [pc, #372]	; (8009d04 <i2cThread+0x2b4>)
 8009b90:	785b      	ldrb	r3, [r3, #1]
 8009b92:	b21b      	sxth	r3, r3
 8009b94:	4313      	orrs	r3, r2
 8009b96:	b21a      	sxth	r2, r3
 8009b98:	4b5e      	ldr	r3, [pc, #376]	; (8009d14 <i2cThread+0x2c4>)
 8009b9a:	801a      	strh	r2, [r3, #0]
          mpu6050.acy_raw= (Buff[2] << 8) | Buff[3];
 8009b9c:	4b59      	ldr	r3, [pc, #356]	; (8009d04 <i2cThread+0x2b4>)
 8009b9e:	789b      	ldrb	r3, [r3, #2]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	b21a      	sxth	r2, r3
 8009ba4:	4b57      	ldr	r3, [pc, #348]	; (8009d04 <i2cThread+0x2b4>)
 8009ba6:	78db      	ldrb	r3, [r3, #3]
 8009ba8:	b21b      	sxth	r3, r3
 8009baa:	4313      	orrs	r3, r2
 8009bac:	b21a      	sxth	r2, r3
 8009bae:	4b59      	ldr	r3, [pc, #356]	; (8009d14 <i2cThread+0x2c4>)
 8009bb0:	805a      	strh	r2, [r3, #2]
          mpu6050.acz_raw = (Buff[4] << 8) | Buff[5];
 8009bb2:	4b54      	ldr	r3, [pc, #336]	; (8009d04 <i2cThread+0x2b4>)
 8009bb4:	791b      	ldrb	r3, [r3, #4]
 8009bb6:	021b      	lsls	r3, r3, #8
 8009bb8:	b21a      	sxth	r2, r3
 8009bba:	4b52      	ldr	r3, [pc, #328]	; (8009d04 <i2cThread+0x2b4>)
 8009bbc:	795b      	ldrb	r3, [r3, #5]
 8009bbe:	b21b      	sxth	r3, r3
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	b21a      	sxth	r2, r3
 8009bc4:	4b53      	ldr	r3, [pc, #332]	; (8009d14 <i2cThread+0x2c4>)
 8009bc6:	809a      	strh	r2, [r3, #4]
          mpu6050.temp_raw = (Buff[6] << 8) | Buff[7];
 8009bc8:	4b4e      	ldr	r3, [pc, #312]	; (8009d04 <i2cThread+0x2b4>)
 8009bca:	799b      	ldrb	r3, [r3, #6]
 8009bcc:	021b      	lsls	r3, r3, #8
 8009bce:	b21a      	sxth	r2, r3
 8009bd0:	4b4c      	ldr	r3, [pc, #304]	; (8009d04 <i2cThread+0x2b4>)
 8009bd2:	79db      	ldrb	r3, [r3, #7]
 8009bd4:	b21b      	sxth	r3, r3
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	b21a      	sxth	r2, r3
 8009bda:	4b4e      	ldr	r3, [pc, #312]	; (8009d14 <i2cThread+0x2c4>)
 8009bdc:	80da      	strh	r2, [r3, #6]

          readCount +=1;
 8009bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009be0:	3301      	adds	r3, #1
 8009be2:	930c      	str	r3, [sp, #48]	; 0x30
 8009be4:	e033      	b.n	8009c4e <i2cThread+0x1fe>
          break;
        case(1):    //mpu6050 gyro reading
          mpu6050.gyx_raw = (Buff[0] << 8) | Buff[1];
 8009be6:	4b47      	ldr	r3, [pc, #284]	; (8009d04 <i2cThread+0x2b4>)
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	021b      	lsls	r3, r3, #8
 8009bec:	b21a      	sxth	r2, r3
 8009bee:	4b45      	ldr	r3, [pc, #276]	; (8009d04 <i2cThread+0x2b4>)
 8009bf0:	785b      	ldrb	r3, [r3, #1]
 8009bf2:	b21b      	sxth	r3, r3
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b21a      	sxth	r2, r3
 8009bf8:	4b46      	ldr	r3, [pc, #280]	; (8009d14 <i2cThread+0x2c4>)
 8009bfa:	811a      	strh	r2, [r3, #8]
          mpu6050.gyy_raw = (Buff[2] << 8) | Buff[3];
 8009bfc:	4b41      	ldr	r3, [pc, #260]	; (8009d04 <i2cThread+0x2b4>)
 8009bfe:	789b      	ldrb	r3, [r3, #2]
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	b21a      	sxth	r2, r3
 8009c04:	4b3f      	ldr	r3, [pc, #252]	; (8009d04 <i2cThread+0x2b4>)
 8009c06:	78db      	ldrb	r3, [r3, #3]
 8009c08:	b21b      	sxth	r3, r3
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	b21a      	sxth	r2, r3
 8009c0e:	4b41      	ldr	r3, [pc, #260]	; (8009d14 <i2cThread+0x2c4>)
 8009c10:	815a      	strh	r2, [r3, #10]
          mpu6050.gyz_raw = (Buff[4] << 8) | Buff[5];
 8009c12:	4b3c      	ldr	r3, [pc, #240]	; (8009d04 <i2cThread+0x2b4>)
 8009c14:	791b      	ldrb	r3, [r3, #4]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	b21a      	sxth	r2, r3
 8009c1a:	4b3a      	ldr	r3, [pc, #232]	; (8009d04 <i2cThread+0x2b4>)
 8009c1c:	795b      	ldrb	r3, [r3, #5]
 8009c1e:	b21b      	sxth	r3, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	b21a      	sxth	r2, r3
 8009c24:	4b3b      	ldr	r3, [pc, #236]	; (8009d14 <i2cThread+0x2c4>)
 8009c26:	819a      	strh	r2, [r3, #12]
          readCount +=1;
 8009c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	930c      	str	r3, [sp, #48]	; 0x30
 8009c2e:	e00e      	b.n	8009c4e <i2cThread+0x1fe>
          break;
        case(2):    //as5600 reading
          mag16 = (Buff[0] << 8) | Buff[1];
 8009c30:	4b34      	ldr	r3, [pc, #208]	; (8009d04 <i2cThread+0x2b4>)
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	021b      	lsls	r3, r3, #8
 8009c36:	b21a      	sxth	r2, r3
 8009c38:	4b32      	ldr	r3, [pc, #200]	; (8009d04 <i2cThread+0x2b4>)
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	b21b      	sxth	r3, r3
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	b21b      	sxth	r3, r3
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	4b34      	ldr	r3, [pc, #208]	; (8009d18 <i2cThread+0x2c8>)
 8009c46:	801a      	strh	r2, [r3, #0]
          readCount +=1;
 8009c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	930c      	str	r3, [sp, #48]	; 0x30
          break;
      }

    }

    if(readCount == 3){
 8009c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	f47f af15 	bne.w	8009a80 <i2cThread+0x30>
      readCount = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	930c      	str	r3, [sp, #48]	; 0x30
      waitTick = 10 - (chVTGetSystemTime() - systick);
 8009c5a:	f7ff fed1 	bl	8009a00 <chVTGetSystemTime>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	461a      	mov	r2, r3
 8009c62:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	f1c3 030a 	rsb	r3, r3, #10
 8009c6c:	9308      	str	r3, [sp, #32]
      chThdSleepMilliseconds(waitTick);
 8009c6e:	9b08      	ldr	r3, [sp, #32]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f04f 0100 	mov.w	r1, #0
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	f04f 0400 	mov.w	r4, #0
 8009c7e:	f04f 0500 	mov.w	r5, #0
 8009c82:	015d      	lsls	r5, r3, #5
 8009c84:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8009c88:	0154      	lsls	r4, r2, #5
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	462b      	mov	r3, r5
 8009c8e:	1a12      	subs	r2, r2, r0
 8009c90:	eb63 0301 	sbc.w	r3, r3, r1
 8009c94:	f04f 0400 	mov.w	r4, #0
 8009c98:	f04f 0500 	mov.w	r5, #0
 8009c9c:	009d      	lsls	r5, r3, #2
 8009c9e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8009ca2:	0094      	lsls	r4, r2, #2
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	1812      	adds	r2, r2, r0
 8009caa:	eb41 0303 	adc.w	r3, r1, r3
 8009cae:	f04f 0000 	mov.w	r0, #0
 8009cb2:	f04f 0100 	mov.w	r1, #0
 8009cb6:	0119      	lsls	r1, r3, #4
 8009cb8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8009cbc:	0110      	lsls	r0, r2, #4
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009cca:	f04f 0300 	mov.w	r3, #0
 8009cce:	1886      	adds	r6, r0, r2
 8009cd0:	eb41 0703 	adc.w	r7, r1, r3
 8009cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cd8:	f04f 0300 	mov.w	r3, #0
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f7f7 fa82 	bl	80011e8 <__aeabi_uldivmod>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4613      	mov	r3, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fc58 	bl	80085a0 <chThdSleep>
      //chprintf((BaseSequentialStream*)&SD3, "tick: %d\r\n", chVTGetSystemTime() - start);
     // start = chVTGetSystemTime();
      systick = chVTGetSystemTime();
 8009cf0:	f7ff fe86 	bl	8009a00 <chVTGetSystemTime>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8009cfa:	e6c1      	b.n	8009a80 <i2cThread+0x30>
 8009cfc:	0800ac98 	.word	0x0800ac98
 8009d00:	20000da0 	.word	0x20000da0
 8009d04:	20001854 	.word	0x20001854
 8009d08:	0800ac9c 	.word	0x0800ac9c
 8009d0c:	20000e70 	.word	0x20000e70
 8009d10:	0800ac8c 	.word	0x0800ac8c
 8009d14:	200016ac 	.word	0x200016ac
 8009d18:	20001850 	.word	0x20001850
 8009d1c:	00000000 	.word	0x00000000

08009d20 <i2c1Init>:

  }//while

}//static THD_FUNCTION(i2cThread, arg)

void i2c1Init(void){
 8009d20:	b500      	push	{lr}
 8009d22:	b085      	sub	sp, #20
    palSetPadMode(GPIOB, GPIOB_ARD_D10, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);//GPIOB_PIN6
 8009d24:	2211      	movs	r2, #17
 8009d26:	2140      	movs	r1, #64	; 0x40
 8009d28:	4811      	ldr	r0, [pc, #68]	; (8009d70 <i2c1Init+0x50>)
 8009d2a:	f7fb f9c1 	bl	80050b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, GPIOB_PIN7, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);
 8009d2e:	2211      	movs	r2, #17
 8009d30:	2180      	movs	r1, #128	; 0x80
 8009d32:	480f      	ldr	r0, [pc, #60]	; (8009d70 <i2c1Init+0x50>)
 8009d34:	f7fb f9bc 	bl	80050b0 <_pal_lld_setgroupmode>

    i2cStart(&I2CD1, &i2cfg1);
 8009d38:	490e      	ldr	r1, [pc, #56]	; (8009d74 <i2c1Init+0x54>)
 8009d3a:	480f      	ldr	r0, [pc, #60]	; (8009d78 <i2c1Init+0x58>)
 8009d3c:	f7f8 fd40 	bl	80027c0 <i2cStart>
    palSetPadMode(GPIOC, GPIOC_ARD_A5, PAL_MODE_OUTPUT_PUSHPULL);//
 8009d40:	2206      	movs	r2, #6
 8009d42:	2101      	movs	r1, #1
 8009d44:	480d      	ldr	r0, [pc, #52]	; (8009d7c <i2c1Init+0x5c>)
 8009d46:	f7fb f9b3 	bl	80050b0 <_pal_lld_setgroupmode>
    int size = sizeof(i2cwaThread);
 8009d4a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8009d4e:	9303      	str	r3, [sp, #12]
    chThdCreateStatic(i2cwaThread, sizeof(i2cwaThread), NORMALPRIO, i2cThread, NULL);
 8009d50:	2300      	movs	r3, #0
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <i2c1Init+0x60>)
 8009d56:	2280      	movs	r2, #128	; 0x80
 8009d58:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8009d5c:	4809      	ldr	r0, [pc, #36]	; (8009d84 <i2c1Init+0x64>)
 8009d5e:	f7fe fb3f 	bl	80083e0 <chThdCreateStatic>
    as5600Init();
 8009d62:	f7ff fe1d 	bl	80099a0 <as5600Init>
    mpu6050init();
 8009d66:	f7ff fda3 	bl	80098b0 <mpu6050init>
    //chThdSleepMilliseconds(100);
}
 8009d6a:	b005      	add	sp, #20
 8009d6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d70:	40010c00 	.word	0x40010c00
 8009d74:	0800ac8c 	.word	0x0800ac8c
 8009d78:	20000da0 	.word	0x20000da0
 8009d7c:	40011000 	.word	0x40011000
 8009d80:	08009a51 	.word	0x08009a51
 8009d84:	20001878 	.word	0x20001878
	...

08009d90 <_ZL18chRegSetThreadNamePKc>:
static inline void chRegSetThreadName(const char *name) {
 8009d90:	b082      	sub	sp, #8
 8009d92:	9001      	str	r0, [sp, #4]
  __sch_get_currthread()->name = name;
 8009d94:	4b02      	ldr	r3, [pc, #8]	; (8009da0 <_ZL18chRegSetThreadNamePKc+0x10>)
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	9a01      	ldr	r2, [sp, #4]
 8009d9a:	621a      	str	r2, [r3, #32]
}
 8009d9c:	b002      	add	sp, #8
 8009d9e:	4770      	bx	lr
 8009da0:	20000fa0 	.word	0x20000fa0
	...

08009db0 <_ZL7Thread1Pv>:

/*
 * Red LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8009db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009db4:	b085      	sub	sp, #20
 8009db6:	9001      	str	r0, [sp, #4]

  (void)arg;

  chRegSetThreadName("blinker");
 8009db8:	484b      	ldr	r0, [pc, #300]	; (8009ee8 <_ZL7Thread1Pv+0x138>)
 8009dba:	f7ff ffe9 	bl	8009d90 <_ZL18chRegSetThreadNamePKc>
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 100 : 500;
 8009dbe:	4b4b      	ldr	r3, [pc, #300]	; (8009eec <_ZL7Thread1Pv+0x13c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	d101      	bne.n	8009dcc <_ZL7Thread1Pv+0x1c>
 8009dc8:	2364      	movs	r3, #100	; 0x64
 8009dca:	e001      	b.n	8009dd0 <_ZL7Thread1Pv+0x20>
 8009dcc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009dd0:	f8ad 300e 	strh.w	r3, [sp, #14]
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8009dd4:	4b46      	ldr	r3, [pc, #280]	; (8009ef0 <_ZL7Thread1Pv+0x140>)
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	615a      	str	r2, [r3, #20]
        chThdSleepMilliseconds(time);
 8009dda:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009dde:	f04f 0100 	mov.w	r1, #0
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	f04f 0400 	mov.w	r4, #0
 8009dea:	f04f 0500 	mov.w	r5, #0
 8009dee:	015d      	lsls	r5, r3, #5
 8009df0:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8009df4:	0154      	lsls	r4, r2, #5
 8009df6:	4622      	mov	r2, r4
 8009df8:	462b      	mov	r3, r5
 8009dfa:	1a12      	subs	r2, r2, r0
 8009dfc:	eb63 0301 	sbc.w	r3, r3, r1
 8009e00:	f04f 0400 	mov.w	r4, #0
 8009e04:	f04f 0500 	mov.w	r5, #0
 8009e08:	009d      	lsls	r5, r3, #2
 8009e0a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8009e0e:	0094      	lsls	r4, r2, #2
 8009e10:	4622      	mov	r2, r4
 8009e12:	462b      	mov	r3, r5
 8009e14:	1812      	adds	r2, r2, r0
 8009e16:	eb41 0303 	adc.w	r3, r1, r3
 8009e1a:	f04f 0000 	mov.w	r0, #0
 8009e1e:	f04f 0100 	mov.w	r1, #0
 8009e22:	0119      	lsls	r1, r3, #4
 8009e24:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8009e28:	0110      	lsls	r0, r2, #4
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4610      	mov	r0, r2
 8009e30:	4619      	mov	r1, r3
 8009e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	eb10 0802 	adds.w	r8, r0, r2
 8009e3e:	eb41 0903 	adc.w	r9, r1, r3
 8009e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e46:	f04f 0300 	mov.w	r3, #0
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	f7f7 f9cb 	bl	80011e8 <__aeabi_uldivmod>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4613      	mov	r3, r2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe fba1 	bl	80085a0 <chThdSleep>
        palSetPad(GPIOA, GPIOA_LED_GREEN);
 8009e5e:	4b24      	ldr	r3, [pc, #144]	; (8009ef0 <_ZL7Thread1Pv+0x140>)
 8009e60:	2220      	movs	r2, #32
 8009e62:	611a      	str	r2, [r3, #16]
        chThdSleepMilliseconds(time);
 8009e64:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009e68:	f04f 0100 	mov.w	r1, #0
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	f04f 0400 	mov.w	r4, #0
 8009e74:	f04f 0500 	mov.w	r5, #0
 8009e78:	015d      	lsls	r5, r3, #5
 8009e7a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8009e7e:	0154      	lsls	r4, r2, #5
 8009e80:	4622      	mov	r2, r4
 8009e82:	462b      	mov	r3, r5
 8009e84:	1a12      	subs	r2, r2, r0
 8009e86:	eb63 0301 	sbc.w	r3, r3, r1
 8009e8a:	f04f 0400 	mov.w	r4, #0
 8009e8e:	f04f 0500 	mov.w	r5, #0
 8009e92:	009d      	lsls	r5, r3, #2
 8009e94:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8009e98:	0094      	lsls	r4, r2, #2
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	1812      	adds	r2, r2, r0
 8009ea0:	eb41 0303 	adc.w	r3, r1, r3
 8009ea4:	f04f 0000 	mov.w	r0, #0
 8009ea8:	f04f 0100 	mov.w	r1, #0
 8009eac:	0119      	lsls	r1, r3, #4
 8009eae:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8009eb2:	0110      	lsls	r0, r2, #4
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4619      	mov	r1, r3
 8009ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	1886      	adds	r6, r0, r2
 8009ec6:	eb41 0703 	adc.w	r7, r1, r3
 8009eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	f7f7 f987 	bl	80011e8 <__aeabi_uldivmod>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4613      	mov	r3, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe fb5d 	bl	80085a0 <chThdSleep>
 8009ee6:	e76a      	b.n	8009dbe <_ZL7Thread1Pv+0xe>
 8009ee8:	0800acc0 	.word	0x0800acc0
 8009eec:	0800ac78 	.word	0x0800ac78
 8009ef0:	40010800 	.word	0x40010800
	...

08009f00 <_Z7LEDinitv>:
  }
}


void LEDinit(void){
 8009f00:	b500      	push	{lr}
 8009f02:	b083      	sub	sp, #12

  palSetPadMode(GPIOA, GPIOA_LED_GREEN, PAL_MODE_OUTPUT_PUSHPULL);//
 8009f04:	2206      	movs	r2, #6
 8009f06:	2120      	movs	r1, #32
 8009f08:	4807      	ldr	r0, [pc, #28]	; (8009f28 <_Z7LEDinitv+0x28>)
 8009f0a:	f7fb f8d1 	bl	80050b0 <_pal_lld_setgroupmode>
  //Creates the blinker thread.
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <_Z7LEDinitv+0x2c>)
 8009f14:	2280      	movs	r2, #128	; 0x80
 8009f16:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8009f1a:	4805      	ldr	r0, [pc, #20]	; (8009f30 <_Z7LEDinitv+0x30>)
 8009f1c:	f7fe fa60 	bl	80083e0 <chThdCreateStatic>
}
 8009f20:	b003      	add	sp, #12
 8009f22:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f26:	bf00      	nop
 8009f28:	40010800 	.word	0x40010800
 8009f2c:	08009db1 	.word	0x08009db1
 8009f30:	20001a98 	.word	0x20001a98
	...

08009f40 <_Z9uart3initv>:
/*
 * Application entry point.
 *
*/

void uart3init(void){
 8009f40:	b508      	push	{r3, lr}
  AFIO->MAPR|= AFIO_MAPR_USART3_REMAP_0;// USART3_REMAP[1:0] =  “01” (partial remap) PB10,PB11 -> PC10,PC11
 8009f42:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <_Z9uart3initv+0x30>)
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	4a0a      	ldr	r2, [pc, #40]	; (8009f70 <_Z9uart3initv+0x30>)
 8009f48:	f043 0310 	orr.w	r3, r3, #16
 8009f4c:	6053      	str	r3, [r2, #4]
  palSetPadMode(GPIOC, GPIOC_PIN10, PAL_MODE_STM32_ALTERNATE_PUSHPULL);
 8009f4e:	2210      	movs	r2, #16
 8009f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f54:	4807      	ldr	r0, [pc, #28]	; (8009f74 <_Z9uart3initv+0x34>)
 8009f56:	f7fb f8ab 	bl	80050b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, GPIOC_PIN11, PAL_MODE_INPUT_PULLDOWN);
 8009f5a:	2204      	movs	r2, #4
 8009f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f60:	4804      	ldr	r0, [pc, #16]	; (8009f74 <_Z9uart3initv+0x34>)
 8009f62:	f7fb f8a5 	bl	80050b0 <_pal_lld_setgroupmode>
  sdStart(&SD3, NULL);
 8009f66:	2100      	movs	r1, #0
 8009f68:	4803      	ldr	r0, [pc, #12]	; (8009f78 <_Z9uart3initv+0x38>)
 8009f6a:	f7f8 ff79 	bl	8002e60 <sdStart>
}
 8009f6e:	bd08      	pop	{r3, pc}
 8009f70:	40010000 	.word	0x40010000
 8009f74:	40011000 	.word	0x40011000
 8009f78:	20000e70 	.word	0x20000e70
 8009f7c:	00000000 	.word	0x00000000

08009f80 <_Z7USBinitv>:

//#define BUF_SIZE 30
//uint8_t usb_buf[BUF_SIZE];
//uint32_t count;

void USBinit(void){
 8009f80:	b508      	push	{r3, lr}
  /*
     * Initializes a serial-over-USB CDC driver.
     */
    sduObjectInit(&SDU1);
 8009f82:	480d      	ldr	r0, [pc, #52]	; (8009fb8 <_Z7USBinitv+0x38>)
 8009f84:	f7f9 f9dc 	bl	8003340 <sduObjectInit>
    sduStart(&SDU1, &serusbcfg);
 8009f88:	490c      	ldr	r1, [pc, #48]	; (8009fbc <_Z7USBinitv+0x3c>)
 8009f8a:	480b      	ldr	r0, [pc, #44]	; (8009fb8 <_Z7USBinitv+0x38>)
 8009f8c:	f7f9 fa18 	bl	80033c0 <sduStart>
     * Activates the USB driver and then the USB bus pull-up on D+.
     * Note, a delay is inserted in order to not have to disconnect the cable
     * after a reset.
     */
    usbDisconnectBus(serusbcfg.usbp);
    chThdSleepMilliseconds(1500);
 8009f90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009f94:	f7fe fb04 	bl	80085a0 <chThdSleep>
    usbStart(serusbcfg.usbp, &usbcfg);
 8009f98:	4b08      	ldr	r3, [pc, #32]	; (8009fbc <_Z7USBinitv+0x3c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4908      	ldr	r1, [pc, #32]	; (8009fc0 <_Z7USBinitv+0x40>)
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7f9 fec6 	bl	8003d30 <usbStart>
    usbConnectBus(serusbcfg.usbp);

    palSetPadMode(GPIOB, GPIOB_ARD_D4, PAL_MODE_OUTPUT_PUSHPULL);//GPIOB_PIN5
 8009fa4:	2206      	movs	r2, #6
 8009fa6:	2120      	movs	r1, #32
 8009fa8:	4806      	ldr	r0, [pc, #24]	; (8009fc4 <_Z7USBinitv+0x44>)
 8009faa:	f7fb f881 	bl	80050b0 <_pal_lld_setgroupmode>
    palSetPad(GPIOB, GPIOB_ARD_D4); //enable usb//GPIOB_PIN5
 8009fae:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <_Z7USBinitv+0x44>)
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	611a      	str	r2, [r3, #16]
}
 8009fb4:	bd08      	pop	{r3, pc}
 8009fb6:	bf00      	nop
 8009fb8:	200011ec 	.word	0x200011ec
 8009fbc:	0800ac78 	.word	0x0800ac78
 8009fc0:	0800ac68 	.word	0x0800ac68
 8009fc4:	40010c00 	.word	0x40010c00
	...

08009fd0 <main>:
    chThdSleepMilliseconds(5);
  }


}
int main(void) {
 8009fd0:	b500      	push	{lr}
 8009fd2:	b085      	sub	sp, #20
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */

    halInit();
 8009fd4:	f7f7 fb54 	bl	8001680 <halInit>
    chSysInit();
 8009fd8:	f7fd f9ba 	bl	8007350 <chSysInit>
    USBinit();
 8009fdc:	f7ff ffd0 	bl	8009f80 <_Z7USBinitv>
    LEDinit();
 8009fe0:	f7ff ff8e 	bl	8009f00 <_Z7LEDinitv>
    uart3init();
 8009fe4:	f7ff ffac 	bl	8009f40 <_Z9uart3initv>
    pwm_init();
 8009fe8:	f7ff f89a 	bl	8009120 <pwm_init>
    i2c1Init();
 8009fec:	f7ff fe98 	bl	8009d20 <i2c1Init>

  //shellInit();

  palSetPadMode(GPIOC, GPIOC_BUTTON, PAL_MODE_INPUT_PULLUP);//button gpio setting
 8009ff0:	2203      	movs	r2, #3
 8009ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ff6:	4838      	ldr	r0, [pc, #224]	; (800a0d8 <main+0x108>)
 8009ff8:	f7fb f85a 	bl	80050b0 <_pal_lld_setgroupmode>


  float rangle = 0.0f;
 8009ffc:	f04f 0300 	mov.w	r3, #0
 800a000:	9303      	str	r3, [sp, #12]
  //float fmag;
  float add = 0.0f;
 800a002:	f04f 0300 	mov.w	r3, #0
 800a006:	9302      	str	r3, [sp, #8]
  while (true) {
    //find_drirection(1);
    float erad = ((float) mag16 / 4096.0 - 0.5) * 2.0*_PI * 7.0;
 800a008:	4b34      	ldr	r3, [pc, #208]	; (800a0dc <main+0x10c>)
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7f6 fead 	bl	8000d6c <__aeabi_ui2f>
 800a012:	4603      	mov	r3, r0
 800a014:	4618      	mov	r0, r3
 800a016:	f7f6 fd4b 	bl	8000ab0 <__aeabi_f2d>
 800a01a:	f04f 0200 	mov.w	r2, #0
 800a01e:	4b30      	ldr	r3, [pc, #192]	; (800a0e0 <main+0x110>)
 800a020:	f7f6 fa5c 	bl	80004dc <__aeabi_ddiv>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4610      	mov	r0, r2
 800a02a:	4619      	mov	r1, r3
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	4b2c      	ldr	r3, [pc, #176]	; (800a0e4 <main+0x114>)
 800a032:	f7f6 fbdd 	bl	80007f0 <__aeabi_dsub>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4610      	mov	r0, r2
 800a03c:	4619      	mov	r1, r3
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	f7f6 fbd7 	bl	80007f4 <__adddf3>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4610      	mov	r0, r2
 800a04c:	4619      	mov	r1, r3
 800a04e:	a31e      	add	r3, pc, #120	; (adr r3, 800a0c8 <main+0xf8>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 f918 	bl	8000288 <__aeabi_dmul>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4610      	mov	r0, r2
 800a05e:	4619      	mov	r1, r3
 800a060:	f04f 0200 	mov.w	r2, #0
 800a064:	4b20      	ldr	r3, [pc, #128]	; (800a0e8 <main+0x118>)
 800a066:	f7f6 f90f 	bl	8000288 <__aeabi_dmul>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4610      	mov	r0, r2
 800a070:	4619      	mov	r1, r3
 800a072:	f7f6 fd75 	bl	8000b60 <__aeabi_d2f>
 800a076:	4603      	mov	r3, r0
 800a078:	9301      	str	r3, [sp, #4]
    float eang = fmod(-erad, 2.0*_PI);
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 800a080:	a313      	add	r3, pc, #76	; (adr r3, 800a0d0 <main+0x100>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	4608      	mov	r0, r1
 800a088:	f000 f83a 	bl	800a100 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4610      	mov	r0, r2
 800a092:	4619      	mov	r1, r3
 800a094:	f7f6 fd64 	bl	8000b60 <__aeabi_d2f>
 800a098:	4603      	mov	r3, r0
 800a09a:	9300      	str	r3, [sp, #0]
    setPhaseVoltage(0.1,0,eang);
 800a09c:	9a00      	ldr	r2, [sp, #0]
 800a09e:	f04f 0100 	mov.w	r1, #0
 800a0a2:	4812      	ldr	r0, [pc, #72]	; (800a0ec <main+0x11c>)
 800a0a4:	f7ff f914 	bl	80092d0 <setPhaseVoltage>
    chprintf((BaseSequentialStream*)&SD3, "mag: %f\r\n", erad);
 800a0a8:	9801      	ldr	r0, [sp, #4]
 800a0aa:	f7f6 fd01 	bl	8000ab0 <__aeabi_f2d>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	490f      	ldr	r1, [pc, #60]	; (800a0f0 <main+0x120>)
 800a0b4:	480f      	ldr	r0, [pc, #60]	; (800a0f4 <main+0x124>)
 800a0b6:	f7fa fcab 	bl	8004a10 <chprintf>
    chThdSleepMilliseconds(10);
 800a0ba:	2014      	movs	r0, #20
 800a0bc:	f7fe fa70 	bl	80085a0 <chThdSleep>
 800a0c0:	e7a2      	b.n	800a008 <main+0x38>
 800a0c2:	bf00      	nop
 800a0c4:	f3af 8000 	nop.w
 800a0c8:	60000000 	.word	0x60000000
 800a0cc:	400921fb 	.word	0x400921fb
 800a0d0:	60000000 	.word	0x60000000
 800a0d4:	401921fb 	.word	0x401921fb
 800a0d8:	40011000 	.word	0x40011000
 800a0dc:	20001850 	.word	0x20001850
 800a0e0:	40b00000 	.word	0x40b00000
 800a0e4:	3fe00000 	.word	0x3fe00000
 800a0e8:	401c0000 	.word	0x401c0000
 800a0ec:	3dcccccd 	.word	0x3dcccccd
 800a0f0:	0800acc8 	.word	0x0800acc8
 800a0f4:	20000e70 	.word	0x20000e70
	...

0800a100 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 800a100:	b500      	push	{lr}
 800a102:	b085      	sub	sp, #20
 800a104:	9003      	str	r0, [sp, #12]
 800a106:	e9cd 2300 	strd	r2, r3, [sp]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 800a10a:	9803      	ldr	r0, [sp, #12]
 800a10c:	f7f6 fcd0 	bl	8000ab0 <__aeabi_f2d>
 800a110:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a114:	f000 f872 	bl	800a1fc <fmod>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
    }
 800a11c:	4610      	mov	r0, r2
 800a11e:	4619      	mov	r1, r3
 800a120:	b005      	add	sp, #20
 800a122:	f85d fb04 	ldr.w	pc, [sp], #4
 800a126:	bf00      	nop
	...

0800a130 <_Z41__static_initialization_and_destruction_0ii>:

 }
}
 800a130:	b500      	push	{lr}
 800a132:	b085      	sub	sp, #20
 800a134:	9003      	str	r0, [sp, #12]
 800a136:	9102      	str	r1, [sp, #8]
 800a138:	9b03      	ldr	r3, [sp, #12]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d111      	bne.n	800a162 <_Z41__static_initialization_and_destruction_0ii+0x32>
 800a13e:	9b02      	ldr	r3, [sp, #8]
 800a140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a144:	4293      	cmp	r3, r2
 800a146:	d10c      	bne.n	800a162 <_Z41__static_initialization_and_destruction_0ii+0x32>
PIDController pid1(1,2,3,4,5);
 800a148:	4b07      	ldr	r3, [pc, #28]	; (800a168 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	4b06      	ldr	r3, [pc, #24]	; (800a16c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800a154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a158:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a15c:	4804      	ldr	r0, [pc, #16]	; (800a170 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a15e:	f000 f817 	bl	800a190 <_ZN13PIDControllerC1Efffff>
}
 800a162:	b005      	add	sp, #20
 800a164:	f85d fb04 	ldr.w	pc, [sp], #4
 800a168:	40a00000 	.word	0x40a00000
 800a16c:	40400000 	.word	0x40400000
 800a170:	20001a70 	.word	0x20001a70
	...

0800a180 <_GLOBAL__sub_I_pid1>:
 800a180:	b508      	push	{r3, lr}
 800a182:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a186:	2001      	movs	r0, #1
 800a188:	f7ff ffd2 	bl	800a130 <_Z41__static_initialization_and_destruction_0ii>
 800a18c:	bd08      	pop	{r3, pc}
 800a18e:	bf00      	nop

0800a190 <_ZN13PIDControllerC1Efffff>:
#include "pid.h"

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 800a190:	b500      	push	{lr}
 800a192:	b085      	sub	sp, #20
 800a194:	9003      	str	r0, [sp, #12]
 800a196:	9102      	str	r1, [sp, #8]
 800a198:	9201      	str	r2, [sp, #4]
 800a19a:	9300      	str	r3, [sp, #0]
    , D(D)
    , output_ramp(ramp)    // output derivative limit [volts/second]
    , limit(limit)         // output supply limit     [volts]
    , error_prev(0.0f)
    , output_prev(0.0f)
    , integral_prev(0.0f)
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	9a02      	ldr	r2, [sp, #8]
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	9b03      	ldr	r3, [sp, #12]
 800a1a4:	9a01      	ldr	r2, [sp, #4]
 800a1a6:	605a      	str	r2, [r3, #4]
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	9a00      	ldr	r2, [sp, #0]
 800a1ac:	609a      	str	r2, [r3, #8]
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	9a06      	ldr	r2, [sp, #24]
 800a1b2:	60da      	str	r2, [r3, #12]
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	9a07      	ldr	r2, [sp, #28]
 800a1b8:	611a      	str	r2, [r3, #16]
 800a1ba:	9b03      	ldr	r3, [sp, #12]
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	615a      	str	r2, [r3, #20]
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	f04f 0200 	mov.w	r2, #0
 800a1c8:	619a      	str	r2, [r3, #24]
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = _micros();
 800a1d2:	f000 f80d 	bl	800a1f0 <_Z7_microsv>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	621a      	str	r2, [r3, #32]
}
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	b005      	add	sp, #20
 800a1e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1e6:	bf00      	nop
	...

0800a1f0 <_Z7_microsv>:
}


// function buffering _micros() 
// arduino function doesn't work well with interrupts
unsigned long _micros(){
 800a1f0:	b508      	push	{r3, lr}
    //return the value based on the prescaler
    if((TCCR0B & 0b00000111) == 0x01) return (micros()/32);
    else return (micros());
#else
  // regular micros
  return _micros();
 800a1f2:	f7ff fffd 	bl	800a1f0 <_Z7_microsv>
 800a1f6:	4603      	mov	r3, r0
#endif
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	bd08      	pop	{r3, pc}

0800a1fc <fmod>:
 800a1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a200:	461d      	mov	r5, r3
 800a202:	4680      	mov	r8, r0
 800a204:	4689      	mov	r9, r1
 800a206:	4614      	mov	r4, r2
 800a208:	f000 f832 	bl	800a270 <__ieee754_fmod>
 800a20c:	4b17      	ldr	r3, [pc, #92]	; (800a26c <fmod+0x70>)
 800a20e:	4606      	mov	r6, r0
 800a210:	f993 3000 	ldrsb.w	r3, [r3]
 800a214:	460f      	mov	r7, r1
 800a216:	3301      	adds	r3, #1
 800a218:	d014      	beq.n	800a244 <fmod+0x48>
 800a21a:	4622      	mov	r2, r4
 800a21c:	462b      	mov	r3, r5
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	f7f6 facb 	bl	80007bc <__aeabi_dcmpun>
 800a226:	b968      	cbnz	r0, 800a244 <fmod+0x48>
 800a228:	4642      	mov	r2, r8
 800a22a:	464b      	mov	r3, r9
 800a22c:	4640      	mov	r0, r8
 800a22e:	4649      	mov	r1, r9
 800a230:	f7f6 fac4 	bl	80007bc <__aeabi_dcmpun>
 800a234:	b930      	cbnz	r0, 800a244 <fmod+0x48>
 800a236:	4620      	mov	r0, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	2200      	movs	r2, #0
 800a23c:	2300      	movs	r3, #0
 800a23e:	f7f6 fa8b 	bl	8000758 <__aeabi_dcmpeq>
 800a242:	b918      	cbnz	r0, 800a24c <fmod+0x50>
 800a244:	4630      	mov	r0, r6
 800a246:	4639      	mov	r1, r7
 800a248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a24c:	f000 f94c 	bl	800a4e8 <__errno>
 800a250:	2200      	movs	r2, #0
 800a252:	2300      	movs	r3, #0
 800a254:	2121      	movs	r1, #33	; 0x21
 800a256:	6001      	str	r1, [r0, #0]
 800a258:	4610      	mov	r0, r2
 800a25a:	4619      	mov	r1, r3
 800a25c:	f7f6 f93e 	bl	80004dc <__aeabi_ddiv>
 800a260:	4606      	mov	r6, r0
 800a262:	460f      	mov	r7, r1
 800a264:	4630      	mov	r0, r6
 800a266:	4639      	mov	r1, r7
 800a268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a26c:	20000932 	.word	0x20000932

0800a270 <__ieee754_fmod>:
 800a270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a274:	4689      	mov	r9, r1
 800a276:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800a27a:	4601      	mov	r1, r0
 800a27c:	ea55 0002 	orrs.w	r0, r5, r2
 800a280:	461f      	mov	r7, r3
 800a282:	461c      	mov	r4, r3
 800a284:	464b      	mov	r3, r9
 800a286:	d031      	beq.n	800a2ec <__ieee754_fmod+0x7c>
 800a288:	f8df c258 	ldr.w	ip, [pc, #600]	; 800a4e4 <__ieee754_fmod+0x274>
 800a28c:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a290:	45e0      	cmp	r8, ip
 800a292:	4648      	mov	r0, r9
 800a294:	dc2a      	bgt.n	800a2ec <__ieee754_fmod+0x7c>
 800a296:	f1c2 0c00 	rsb	ip, r2, #0
 800a29a:	f8df 9234 	ldr.w	r9, [pc, #564]	; 800a4d0 <__ieee754_fmod+0x260>
 800a29e:	ea4c 0c02 	orr.w	ip, ip, r2
 800a2a2:	ea45 7cdc 	orr.w	ip, r5, ip, lsr #31
 800a2a6:	45cc      	cmp	ip, r9
 800a2a8:	4696      	mov	lr, r2
 800a2aa:	d81f      	bhi.n	800a2ec <__ieee754_fmod+0x7c>
 800a2ac:	45a8      	cmp	r8, r5
 800a2ae:	4616      	mov	r6, r2
 800a2b0:	4689      	mov	r9, r1
 800a2b2:	460a      	mov	r2, r1
 800a2b4:	f003 4c00 	and.w	ip, r3, #2147483648	; 0x80000000
 800a2b8:	dc06      	bgt.n	800a2c8 <__ieee754_fmod+0x58>
 800a2ba:	f2c0 80bf 	blt.w	800a43c <__ieee754_fmod+0x1cc>
 800a2be:	4571      	cmp	r1, lr
 800a2c0:	f0c0 80bc 	bcc.w	800a43c <__ieee754_fmod+0x1cc>
 800a2c4:	f000 80ee 	beq.w	800a4a4 <__ieee754_fmod+0x234>
 800a2c8:	4b81      	ldr	r3, [pc, #516]	; (800a4d0 <__ieee754_fmod+0x260>)
 800a2ca:	4003      	ands	r3, r0
 800a2cc:	b9f3      	cbnz	r3, 800a30c <__ieee754_fmod+0x9c>
 800a2ce:	f1b8 0f00 	cmp.w	r8, #0
 800a2d2:	f040 80d1 	bne.w	800a478 <__ieee754_fmod+0x208>
 800a2d6:	f1b9 0f00 	cmp.w	r9, #0
 800a2da:	464b      	mov	r3, r9
 800a2dc:	497d      	ldr	r1, [pc, #500]	; (800a4d4 <__ieee754_fmod+0x264>)
 800a2de:	dd19      	ble.n	800a314 <__ieee754_fmod+0xa4>
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800a2e8:	dcfa      	bgt.n	800a2e0 <__ieee754_fmod+0x70>
 800a2ea:	e013      	b.n	800a314 <__ieee754_fmod+0xa4>
 800a2ec:	461d      	mov	r5, r3
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	463b      	mov	r3, r7
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	f7f5 ffc8 	bl	8000288 <__aeabi_dmul>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	f7f6 f8ee 	bl	80004dc <__aeabi_ddiv>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4610      	mov	r0, r2
 800a306:	4619      	mov	r1, r3
 800a308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800a310:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a314:	4b6e      	ldr	r3, [pc, #440]	; (800a4d0 <__ieee754_fmod+0x260>)
 800a316:	4023      	ands	r3, r4
 800a318:	b96b      	cbnz	r3, 800a336 <__ieee754_fmod+0xc6>
 800a31a:	2d00      	cmp	r5, #0
 800a31c:	f040 80a1 	bne.w	800a462 <__ieee754_fmod+0x1f2>
 800a320:	f1be 0f00 	cmp.w	lr, #0
 800a324:	4673      	mov	r3, lr
 800a326:	4f6b      	ldr	r7, [pc, #428]	; (800a4d4 <__ieee754_fmod+0x264>)
 800a328:	dd08      	ble.n	800a33c <__ieee754_fmod+0xcc>
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800a332:	dcfa      	bgt.n	800a32a <__ieee754_fmod+0xba>
 800a334:	e002      	b.n	800a33c <__ieee754_fmod+0xcc>
 800a336:	152f      	asrs	r7, r5, #20
 800a338:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 800a33c:	4b66      	ldr	r3, [pc, #408]	; (800a4d8 <__ieee754_fmod+0x268>)
 800a33e:	4299      	cmp	r1, r3
 800a340:	db6e      	blt.n	800a420 <__ieee754_fmod+0x1b0>
 800a342:	f3c0 0313 	ubfx	r3, r0, #0, #20
 800a346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a34a:	4863      	ldr	r0, [pc, #396]	; (800a4d8 <__ieee754_fmod+0x268>)
 800a34c:	4287      	cmp	r7, r0
 800a34e:	db58      	blt.n	800a402 <__ieee754_fmod+0x192>
 800a350:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a354:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a358:	eba2 000e 	sub.w	r0, r2, lr
 800a35c:	1bc9      	subs	r1, r1, r7
 800a35e:	d10a      	bne.n	800a376 <__ieee754_fmod+0x106>
 800a360:	e01b      	b.n	800a39a <__ieee754_fmod+0x12a>
 800a362:	ea50 0305 	orrs.w	r3, r0, r5
 800a366:	d041      	beq.n	800a3ec <__ieee754_fmod+0x17c>
 800a368:	0feb      	lsrs	r3, r5, #31
 800a36a:	3901      	subs	r1, #1
 800a36c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a370:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800a374:	d010      	beq.n	800a398 <__ieee754_fmod+0x128>
 800a376:	1b18      	subs	r0, r3, r4
 800a378:	4296      	cmp	r6, r2
 800a37a:	bf88      	it	hi
 800a37c:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
 800a380:	2800      	cmp	r0, #0
 800a382:	eba2 0506 	sub.w	r5, r2, r6
 800a386:	ea4f 7ed2 	mov.w	lr, r2, lsr #31
 800a38a:	daea      	bge.n	800a362 <__ieee754_fmod+0xf2>
 800a38c:	3901      	subs	r1, #1
 800a38e:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a392:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a396:	d1ee      	bne.n	800a376 <__ieee754_fmod+0x106>
 800a398:	1b90      	subs	r0, r2, r6
 800a39a:	1b1c      	subs	r4, r3, r4
 800a39c:	4296      	cmp	r6, r2
 800a39e:	bf88      	it	hi
 800a3a0:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800a3a4:	2c00      	cmp	r4, #0
 800a3a6:	bfa4      	itt	ge
 800a3a8:	4602      	movge	r2, r0
 800a3aa:	4623      	movge	r3, r4
 800a3ac:	ea53 0102 	orrs.w	r1, r3, r2
 800a3b0:	d105      	bne.n	800a3be <__ieee754_fmod+0x14e>
 800a3b2:	e01b      	b.n	800a3ec <__ieee754_fmod+0x17c>
 800a3b4:	0fd1      	lsrs	r1, r2, #31
 800a3b6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a3ba:	3f01      	subs	r7, #1
 800a3bc:	0052      	lsls	r2, r2, #1
 800a3be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3c2:	dbf7      	blt.n	800a3b4 <__ieee754_fmod+0x144>
 800a3c4:	4944      	ldr	r1, [pc, #272]	; (800a4d8 <__ieee754_fmod+0x268>)
 800a3c6:	428f      	cmp	r7, r1
 800a3c8:	da62      	bge.n	800a490 <__ieee754_fmod+0x220>
 800a3ca:	1bc9      	subs	r1, r1, r7
 800a3cc:	2914      	cmp	r1, #20
 800a3ce:	dc71      	bgt.n	800a4b4 <__ieee754_fmod+0x244>
 800a3d0:	f207 401e 	addw	r0, r7, #1054	; 0x41e
 800a3d4:	40ca      	lsrs	r2, r1
 800a3d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a3da:	fa43 f101 	asr.w	r1, r3, r1
 800a3de:	ea4c 0c01 	orr.w	ip, ip, r1
 800a3e2:	ea40 0302 	orr.w	r3, r0, r2
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	4663      	mov	r3, ip
 800a3ea:	e78b      	b.n	800a304 <__ieee754_fmod+0x94>
 800a3ec:	4b3b      	ldr	r3, [pc, #236]	; (800a4dc <__ieee754_fmod+0x26c>)
 800a3ee:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 800a3f2:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 800a3f6:	e9dc 2300 	ldrd	r2, r3, [ip]
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a402:	1bc0      	subs	r0, r0, r7
 800a404:	281f      	cmp	r0, #31
 800a406:	dd21      	ble.n	800a44c <__ieee754_fmod+0x1dc>
 800a408:	4c35      	ldr	r4, [pc, #212]	; (800a4e0 <__ieee754_fmod+0x270>)
 800a40a:	1bc9      	subs	r1, r1, r7
 800a40c:	eba4 0407 	sub.w	r4, r4, r7
 800a410:	bf18      	it	ne
 800a412:	2600      	movne	r6, #0
 800a414:	fa0e f404 	lsl.w	r4, lr, r4
 800a418:	d1ad      	bne.n	800a376 <__ieee754_fmod+0x106>
 800a41a:	4610      	mov	r0, r2
 800a41c:	1b1c      	subs	r4, r3, r4
 800a41e:	e7c1      	b.n	800a3a4 <__ieee754_fmod+0x134>
 800a420:	1a5a      	subs	r2, r3, r1
 800a422:	2a1f      	cmp	r2, #31
 800a424:	dc0c      	bgt.n	800a440 <__ieee754_fmod+0x1d0>
 800a426:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800a42a:	fa08 f802 	lsl.w	r8, r8, r2
 800a42e:	fa29 f303 	lsr.w	r3, r9, r3
 800a432:	fa09 f202 	lsl.w	r2, r9, r2
 800a436:	ea43 0308 	orr.w	r3, r3, r8
 800a43a:	e786      	b.n	800a34a <__ieee754_fmod+0xda>
 800a43c:	460a      	mov	r2, r1
 800a43e:	e761      	b.n	800a304 <__ieee754_fmod+0x94>
 800a440:	4b27      	ldr	r3, [pc, #156]	; (800a4e0 <__ieee754_fmod+0x270>)
 800a442:	2200      	movs	r2, #0
 800a444:	1a5b      	subs	r3, r3, r1
 800a446:	fa09 f303 	lsl.w	r3, r9, r3
 800a44a:	e77e      	b.n	800a34a <__ieee754_fmod+0xda>
 800a44c:	f207 441e 	addw	r4, r7, #1054	; 0x41e
 800a450:	4085      	lsls	r5, r0
 800a452:	fa0e f600 	lsl.w	r6, lr, r0
 800a456:	fa2e f004 	lsr.w	r0, lr, r4
 800a45a:	ea40 0405 	orr.w	r4, r0, r5
 800a45e:	1b90      	subs	r0, r2, r6
 800a460:	e77c      	b.n	800a35c <__ieee754_fmod+0xec>
 800a462:	02eb      	lsls	r3, r5, #11
 800a464:	2b00      	cmp	r3, #0
 800a466:	4f1c      	ldr	r7, [pc, #112]	; (800a4d8 <__ieee754_fmod+0x268>)
 800a468:	f77f af68 	ble.w	800a33c <__ieee754_fmod+0xcc>
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800a474:	dcfa      	bgt.n	800a46c <__ieee754_fmod+0x1fc>
 800a476:	e761      	b.n	800a33c <__ieee754_fmod+0xcc>
 800a478:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	4916      	ldr	r1, [pc, #88]	; (800a4d8 <__ieee754_fmod+0x268>)
 800a480:	f77f af48 	ble.w	800a314 <__ieee754_fmod+0xa4>
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	2b00      	cmp	r3, #0
 800a488:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800a48c:	dcfa      	bgt.n	800a484 <__ieee754_fmod+0x214>
 800a48e:	e741      	b.n	800a314 <__ieee754_fmod+0xa4>
 800a490:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a494:	ea43 0c0c 	orr.w	ip, r3, ip
 800a498:	f207 37ff 	addw	r7, r7, #1023	; 0x3ff
 800a49c:	ea4c 5107 	orr.w	r1, ip, r7, lsl #20
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	e72f      	b.n	800a304 <__ieee754_fmod+0x94>
 800a4a4:	4b0d      	ldr	r3, [pc, #52]	; (800a4dc <__ieee754_fmod+0x26c>)
 800a4a6:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 800a4aa:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	e727      	b.n	800a304 <__ieee754_fmod+0x94>
 800a4b4:	291f      	cmp	r1, #31
 800a4b6:	dc06      	bgt.n	800a4c6 <__ieee754_fmod+0x256>
 800a4b8:	f207 471e 	addw	r7, r7, #1054	; 0x41e
 800a4bc:	40bb      	lsls	r3, r7
 800a4be:	fa22 f101 	lsr.w	r1, r2, r1
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	e78f      	b.n	800a3e6 <__ieee754_fmod+0x176>
 800a4c6:	4906      	ldr	r1, [pc, #24]	; (800a4e0 <__ieee754_fmod+0x270>)
 800a4c8:	1bc9      	subs	r1, r1, r7
 800a4ca:	410b      	asrs	r3, r1
 800a4cc:	e78b      	b.n	800a3e6 <__ieee754_fmod+0x176>
 800a4ce:	bf00      	nop
 800a4d0:	7ff00000 	.word	0x7ff00000
 800a4d4:	fffffbed 	.word	0xfffffbed
 800a4d8:	fffffc02 	.word	0xfffffc02
 800a4dc:	0800acd8 	.word	0x0800acd8
 800a4e0:	fffffbe2 	.word	0xfffffbe2
 800a4e4:	7fefffff 	.word	0x7fefffff

0800a4e8 <__errno>:
 800a4e8:	4b01      	ldr	r3, [pc, #4]	; (800a4f0 <__errno+0x8>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	20000934 	.word	0x20000934

0800a4f4 <memset>:
 800a4f4:	b4f0      	push	{r4, r5, r6, r7}
 800a4f6:	0786      	lsls	r6, r0, #30
 800a4f8:	d046      	beq.n	800a588 <memset+0x94>
 800a4fa:	1e54      	subs	r4, r2, #1
 800a4fc:	2a00      	cmp	r2, #0
 800a4fe:	d03c      	beq.n	800a57a <memset+0x86>
 800a500:	4603      	mov	r3, r0
 800a502:	b2ca      	uxtb	r2, r1
 800a504:	e001      	b.n	800a50a <memset+0x16>
 800a506:	3c01      	subs	r4, #1
 800a508:	d337      	bcc.n	800a57a <memset+0x86>
 800a50a:	f803 2b01 	strb.w	r2, [r3], #1
 800a50e:	079d      	lsls	r5, r3, #30
 800a510:	d1f9      	bne.n	800a506 <memset+0x12>
 800a512:	2c03      	cmp	r4, #3
 800a514:	d92a      	bls.n	800a56c <memset+0x78>
 800a516:	b2cd      	uxtb	r5, r1
 800a518:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800a51c:	2c0f      	cmp	r4, #15
 800a51e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800a522:	d934      	bls.n	800a58e <memset+0x9a>
 800a524:	f1a4 0210 	sub.w	r2, r4, #16
 800a528:	f022 0c0f 	bic.w	ip, r2, #15
 800a52c:	f103 0720 	add.w	r7, r3, #32
 800a530:	0916      	lsrs	r6, r2, #4
 800a532:	4467      	add	r7, ip
 800a534:	f103 0210 	add.w	r2, r3, #16
 800a538:	e942 5504 	strd	r5, r5, [r2, #-16]
 800a53c:	e942 5502 	strd	r5, r5, [r2, #-8]
 800a540:	3210      	adds	r2, #16
 800a542:	42ba      	cmp	r2, r7
 800a544:	d1f8      	bne.n	800a538 <memset+0x44>
 800a546:	1c72      	adds	r2, r6, #1
 800a548:	f014 0f0c 	tst.w	r4, #12
 800a54c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800a550:	f004 060f 	and.w	r6, r4, #15
 800a554:	d013      	beq.n	800a57e <memset+0x8a>
 800a556:	1f33      	subs	r3, r6, #4
 800a558:	f023 0303 	bic.w	r3, r3, #3
 800a55c:	3304      	adds	r3, #4
 800a55e:	4413      	add	r3, r2
 800a560:	f842 5b04 	str.w	r5, [r2], #4
 800a564:	4293      	cmp	r3, r2
 800a566:	d1fb      	bne.n	800a560 <memset+0x6c>
 800a568:	f006 0403 	and.w	r4, r6, #3
 800a56c:	b12c      	cbz	r4, 800a57a <memset+0x86>
 800a56e:	b2ca      	uxtb	r2, r1
 800a570:	441c      	add	r4, r3
 800a572:	f803 2b01 	strb.w	r2, [r3], #1
 800a576:	429c      	cmp	r4, r3
 800a578:	d1fb      	bne.n	800a572 <memset+0x7e>
 800a57a:	bcf0      	pop	{r4, r5, r6, r7}
 800a57c:	4770      	bx	lr
 800a57e:	4634      	mov	r4, r6
 800a580:	4613      	mov	r3, r2
 800a582:	2c00      	cmp	r4, #0
 800a584:	d1f3      	bne.n	800a56e <memset+0x7a>
 800a586:	e7f8      	b.n	800a57a <memset+0x86>
 800a588:	4614      	mov	r4, r2
 800a58a:	4603      	mov	r3, r0
 800a58c:	e7c1      	b.n	800a512 <memset+0x1e>
 800a58e:	461a      	mov	r2, r3
 800a590:	4626      	mov	r6, r4
 800a592:	e7e0      	b.n	800a556 <memset+0x62>
